
EVM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003950  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08003a5c  08003a5c  00004a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c1c  08003c1c  000050b4  2**0
                  CONTENTS
  4 .ARM          00000008  08003c1c  08003c1c  00004c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c24  08003c24  000050b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c24  08003c24  00004c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c28  08003c28  00004c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  20000000  08003c2c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  200000b4  08003ce0  000050b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000830  08003ce0  00005830  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000050b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000755a  00000000  00000000  000050dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001903  00000000  00000000  0000c637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  0000df40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c5  00000000  00000000  0000e830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c07  00000000  00000000  0000eef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a558  00000000  00000000  00026afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084598  00000000  00000000  00031054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b55ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d18  00000000  00000000  000b5630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000b8348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a44 	.word	0x08003a44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08003a44 	.word	0x08003a44

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000166:	4a38      	ldr	r2, [pc, #224]	@ (8000248 <HD44780_Init+0xec>)
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800016c:	4b37      	ldr	r3, [pc, #220]	@ (800024c <HD44780_Init+0xf0>)
 800016e:	2208      	movs	r2, #8
 8000170:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000172:	4b37      	ldr	r3, [pc, #220]	@ (8000250 <HD44780_Init+0xf4>)
 8000174:	2200      	movs	r2, #0
 8000176:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000178:	4b33      	ldr	r3, [pc, #204]	@ (8000248 <HD44780_Init+0xec>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d907      	bls.n	8000190 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000180:	4b33      	ldr	r3, [pc, #204]	@ (8000250 <HD44780_Init+0xf4>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2da      	uxtb	r2, r3
 800018a:	4b31      	ldr	r3, [pc, #196]	@ (8000250 <HD44780_Init+0xf4>)
 800018c:	701a      	strb	r2, [r3, #0]
 800018e:	e006      	b.n	800019e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000190:	4b2f      	ldr	r3, [pc, #188]	@ (8000250 <HD44780_Init+0xf4>)
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	f043 0304 	orr.w	r3, r3, #4
 8000198:	b2da      	uxtb	r2, r3
 800019a:	4b2d      	ldr	r3, [pc, #180]	@ (8000250 <HD44780_Init+0xf4>)
 800019c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800019e:	f000 f985 	bl	80004ac <DelayInit>
  HAL_Delay(50);
 80001a2:	2032      	movs	r0, #50	@ 0x32
 80001a4:	f001 f89a 	bl	80012dc <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80001a8:	4b28      	ldr	r3, [pc, #160]	@ (800024c <HD44780_Init+0xf0>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 f943 	bl	8000438 <ExpanderWrite>
  HAL_Delay(1000);
 80001b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001b6:	f001 f891 	bl	80012dc <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001ba:	2030      	movs	r0, #48	@ 0x30
 80001bc:	f000 f92b 	bl	8000416 <Write4Bits>
  DelayUS(4500);
 80001c0:	f241 1094 	movw	r0, #4500	@ 0x1194
 80001c4:	f000 f99a 	bl	80004fc <DelayUS>

  Write4Bits(0x03 << 4);
 80001c8:	2030      	movs	r0, #48	@ 0x30
 80001ca:	f000 f924 	bl	8000416 <Write4Bits>
  DelayUS(4500);
 80001ce:	f241 1094 	movw	r0, #4500	@ 0x1194
 80001d2:	f000 f993 	bl	80004fc <DelayUS>

  Write4Bits(0x03 << 4);
 80001d6:	2030      	movs	r0, #48	@ 0x30
 80001d8:	f000 f91d 	bl	8000416 <Write4Bits>
  DelayUS(4500);
 80001dc:	f241 1094 	movw	r0, #4500	@ 0x1194
 80001e0:	f000 f98c 	bl	80004fc <DelayUS>

  Write4Bits(0x02 << 4);
 80001e4:	2020      	movs	r0, #32
 80001e6:	f000 f916 	bl	8000416 <Write4Bits>
  DelayUS(100);
 80001ea:	2064      	movs	r0, #100	@ 0x64
 80001ec:	f000 f986 	bl	80004fc <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001f0:	4b17      	ldr	r3, [pc, #92]	@ (8000250 <HD44780_Init+0xf4>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	f043 0320 	orr.w	r3, r3, #32
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 f8ce 	bl	800039c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000200:	4b14      	ldr	r3, [pc, #80]	@ (8000254 <HD44780_Init+0xf8>)
 8000202:	2204      	movs	r2, #4
 8000204:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000206:	f000 f875 	bl	80002f4 <HD44780_Display>
  HD44780_Clear();
 800020a:	f000 f82b 	bl	8000264 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800020e:	4b12      	ldr	r3, [pc, #72]	@ (8000258 <HD44780_Init+0xfc>)
 8000210:	2202      	movs	r2, #2
 8000212:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000214:	4b10      	ldr	r3, [pc, #64]	@ (8000258 <HD44780_Init+0xfc>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	f043 0304 	orr.w	r3, r3, #4
 800021c:	b2db      	uxtb	r3, r3
 800021e:	4618      	mov	r0, r3
 8000220:	f000 f8bc 	bl	800039c <SendCommand>
  DelayUS(4500);
 8000224:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000228:	f000 f968 	bl	80004fc <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800022c:	490b      	ldr	r1, [pc, #44]	@ (800025c <HD44780_Init+0x100>)
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f876 	bl	8000320 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000234:	490a      	ldr	r1, [pc, #40]	@ (8000260 <HD44780_Init+0x104>)
 8000236:	2001      	movs	r0, #1
 8000238:	f000 f872 	bl	8000320 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800023c:	f000 f81d 	bl	800027a <HD44780_Home>
}
 8000240:	bf00      	nop
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	200000d3 	.word	0x200000d3
 800024c:	200000d4 	.word	0x200000d4
 8000250:	200000d0 	.word	0x200000d0
 8000254:	200000d1 	.word	0x200000d1
 8000258:	200000d2 	.word	0x200000d2
 800025c:	20000000 	.word	0x20000000
 8000260:	20000008 	.word	0x20000008

08000264 <HD44780_Clear>:

void HD44780_Clear()
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000268:	2001      	movs	r0, #1
 800026a:	f000 f897 	bl	800039c <SendCommand>
  DelayUS(2000);
 800026e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000272:	f000 f943 	bl	80004fc <DelayUS>
}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}

0800027a <HD44780_Home>:

void HD44780_Home()
{
 800027a:	b580      	push	{r7, lr}
 800027c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800027e:	2002      	movs	r0, #2
 8000280:	f000 f88c 	bl	800039c <SendCommand>
  DelayUS(2000);
 8000284:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000288:	f000 f938 	bl	80004fc <DelayUS>
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}

08000290 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	460a      	mov	r2, r1
 800029a:	71fb      	strb	r3, [r7, #7]
 800029c:	4613      	mov	r3, r2
 800029e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80002a0:	4b12      	ldr	r3, [pc, #72]	@ (80002ec <HD44780_SetCursor+0x5c>)
 80002a2:	f107 0408 	add.w	r4, r7, #8
 80002a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80002ac:	4b10      	ldr	r3, [pc, #64]	@ (80002f0 <HD44780_SetCursor+0x60>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	79ba      	ldrb	r2, [r7, #6]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d303      	bcc.n	80002be <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	@ (80002f0 <HD44780_SetCursor+0x60>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	3b01      	subs	r3, #1
 80002bc:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002be:	79bb      	ldrb	r3, [r7, #6]
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	3318      	adds	r3, #24
 80002c4:	443b      	add	r3, r7
 80002c6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	4413      	add	r3, r2
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	b25b      	sxtb	r3, r3
 80002d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002d8:	b25b      	sxtb	r3, r3
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 f85d 	bl	800039c <SendCommand>
}
 80002e2:	bf00      	nop
 80002e4:	371c      	adds	r7, #28
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd90      	pop	{r4, r7, pc}
 80002ea:	bf00      	nop
 80002ec:	08003a5c 	.word	0x08003a5c
 80002f0:	200000d3 	.word	0x200000d3

080002f4 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80002f8:	4b08      	ldr	r3, [pc, #32]	@ (800031c <HD44780_Display+0x28>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	b2da      	uxtb	r2, r3
 8000302:	4b06      	ldr	r3, [pc, #24]	@ (800031c <HD44780_Display+0x28>)
 8000304:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000306:	4b05      	ldr	r3, [pc, #20]	@ (800031c <HD44780_Display+0x28>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	b2db      	uxtb	r3, r3
 8000310:	4618      	mov	r0, r3
 8000312:	f000 f843 	bl	800039c <SendCommand>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	200000d1 	.word	0x200000d1

08000320 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	6039      	str	r1, [r7, #0]
 800032a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	f003 0307 	and.w	r3, r3, #7
 8000332:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	00db      	lsls	r3, r3, #3
 8000338:	b25b      	sxtb	r3, r3
 800033a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800033e:	b25b      	sxtb	r3, r3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	4618      	mov	r0, r3
 8000344:	f000 f82a 	bl	800039c <SendCommand>
  for (int i=0; i<8; i++)
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	e009      	b.n	8000362 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	683a      	ldr	r2, [r7, #0]
 8000352:	4413      	add	r3, r2
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f82e 	bl	80003b8 <SendChar>
  for (int i=0; i<8; i++)
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	3301      	adds	r3, #1
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	2b07      	cmp	r3, #7
 8000366:	ddf2      	ble.n	800034e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000368:	bf00      	nop
 800036a:	bf00      	nop
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000372:	b580      	push	{r7, lr}
 8000374:	b082      	sub	sp, #8
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800037a:	e006      	b.n	800038a <HD44780_PrintStr+0x18>
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	1c5a      	adds	r2, r3, #1
 8000380:	607a      	str	r2, [r7, #4]
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	4618      	mov	r0, r3
 8000386:	f000 f817 	bl	80003b8 <SendChar>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d1f4      	bne.n	800037c <HD44780_PrintStr+0xa>
}
 8000392:	bf00      	nop
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 f812 	bl	80003d4 <Send>
}
 80003b0:	bf00      	nop
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	2101      	movs	r1, #1
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 f804 	bl	80003d4 <Send>
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	460a      	mov	r2, r1
 80003de:	71fb      	strb	r3, [r7, #7]
 80003e0:	4613      	mov	r3, r2
 80003e2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	f023 030f 	bic.w	r3, r3, #15
 80003ea:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	011b      	lsls	r3, r3, #4
 80003f0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80003f2:	7bfa      	ldrb	r2, [r7, #15]
 80003f4:	79bb      	ldrb	r3, [r7, #6]
 80003f6:	4313      	orrs	r3, r2
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 f80b 	bl	8000416 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000400:	7bba      	ldrb	r2, [r7, #14]
 8000402:	79bb      	ldrb	r3, [r7, #6]
 8000404:	4313      	orrs	r3, r2
 8000406:	b2db      	uxtb	r3, r3
 8000408:	4618      	mov	r0, r3
 800040a:	f000 f804 	bl	8000416 <Write4Bits>
}
 800040e:	bf00      	nop
 8000410:	3710      	adds	r7, #16
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b082      	sub	sp, #8
 800041a:	af00      	add	r7, sp, #0
 800041c:	4603      	mov	r3, r0
 800041e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	4618      	mov	r0, r3
 8000424:	f000 f808 	bl	8000438 <ExpanderWrite>
  PulseEnable(value);
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	4618      	mov	r0, r3
 800042c:	f000 f820 	bl	8000470 <PulseEnable>
}
 8000430:	bf00      	nop
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af02      	add	r7, sp, #8
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000442:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <ExpanderWrite+0x30>)
 8000444:	781a      	ldrb	r2, [r3, #0]
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	4313      	orrs	r3, r2
 800044a:	b2db      	uxtb	r3, r3
 800044c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800044e:	f107 020f 	add.w	r2, r7, #15
 8000452:	230a      	movs	r3, #10
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	214e      	movs	r1, #78	@ 0x4e
 800045a:	4804      	ldr	r0, [pc, #16]	@ (800046c <ExpanderWrite+0x34>)
 800045c:	f001 fb80 	bl	8001b60 <HAL_I2C_Master_Transmit>
}
 8000460:	bf00      	nop
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	200000d4 	.word	0x200000d4
 800046c:	200000d8 	.word	0x200000d8

08000470 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	f043 0304 	orr.w	r3, r3, #4
 8000480:	b2db      	uxtb	r3, r3
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ffd8 	bl	8000438 <ExpanderWrite>
  DelayUS(20);
 8000488:	2014      	movs	r0, #20
 800048a:	f000 f837 	bl	80004fc <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	f023 0304 	bic.w	r3, r3, #4
 8000494:	b2db      	uxtb	r3, r3
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ffce 	bl	8000438 <ExpanderWrite>
  DelayUS(20);
 800049c:	2014      	movs	r0, #20
 800049e:	f000 f82d 	bl	80004fc <DelayUS>
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <DelayInit>:

static void DelayInit(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80004b0:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <DelayInit+0x48>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a0f      	ldr	r2, [pc, #60]	@ (80004f4 <DelayInit+0x48>)
 80004b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004ba:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <DelayInit+0x48>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	4a0c      	ldr	r2, [pc, #48]	@ (80004f4 <DelayInit+0x48>)
 80004c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004c6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004c8:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <DelayInit+0x4c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0a      	ldr	r2, [pc, #40]	@ (80004f8 <DelayInit+0x4c>)
 80004ce:	f023 0301 	bic.w	r3, r3, #1
 80004d2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004d4:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <DelayInit+0x4c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a07      	ldr	r2, [pc, #28]	@ (80004f8 <DelayInit+0x4c>)
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80004e0:	4b05      	ldr	r3, [pc, #20]	@ (80004f8 <DelayInit+0x4c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80004e6:	bf00      	nop
  __ASM volatile ("NOP");
 80004e8:	bf00      	nop
  __ASM volatile ("NOP");
 80004ea:	bf00      	nop
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	e000edf0 	.word	0xe000edf0
 80004f8:	e0001000 	.word	0xe0001000

080004fc <DelayUS>:

static void DelayUS(uint32_t us) {
 80004fc:	b480      	push	{r7}
 80004fe:	b087      	sub	sp, #28
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000504:	4b0d      	ldr	r3, [pc, #52]	@ (800053c <DelayUS+0x40>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a0d      	ldr	r2, [pc, #52]	@ (8000540 <DelayUS+0x44>)
 800050a:	fba2 2303 	umull	r2, r3, r2, r3
 800050e:	0c9a      	lsrs	r2, r3, #18
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	fb02 f303 	mul.w	r3, r2, r3
 8000516:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000518:	4b0a      	ldr	r3, [pc, #40]	@ (8000544 <DelayUS+0x48>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800051e:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <DelayUS+0x48>)
 8000520:	685a      	ldr	r2, [r3, #4]
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	697a      	ldr	r2, [r7, #20]
 800052c:	429a      	cmp	r2, r3
 800052e:	d8f6      	bhi.n	800051e <DelayUS+0x22>
}
 8000530:	bf00      	nop
 8000532:	bf00      	nop
 8000534:	371c      	adds	r7, #28
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	2000004c 	.word	0x2000004c
 8000540:	431bde83 	.word	0x431bde83
 8000544:	e0001000 	.word	0xe0001000

08000548 <clear_console>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void clear_console() {
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	HD44780_Clear();
 800054c:	f7ff fe8a 	bl	8000264 <HD44780_Clear>
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}

08000554 <show_text>:

void show_text(int x, int y, char *text, int clear) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
 8000560:	603b      	str	r3, [r7, #0]
	if (clear) {
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <show_text+0x18>
		clear_console();
 8000568:	f7ff ffee 	bl	8000548 <clear_console>
	}

	HD44780_SetCursor(x, y);
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	68ba      	ldr	r2, [r7, #8]
 8000572:	b2d2      	uxtb	r2, r2
 8000574:	4611      	mov	r1, r2
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fe8a 	bl	8000290 <HD44780_SetCursor>
	HD44780_PrintStr(text);
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f7ff fef8 	bl	8000372 <HD44780_PrintStr>
}
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <stack_size>:
#define ADMIN_LOGIN_STATE 6

int transition_stack[100] = {0};
int stack_ptr = 1;

int stack_size() {
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
	return stack_ptr;
 8000590:	4b02      	ldr	r3, [pc, #8]	@ (800059c <stack_size+0x10>)
 8000592:	681b      	ldr	r3, [r3, #0]
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	20000010 	.word	0x20000010

080005a0 <stack_top>:
int stack_top() {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	assert(stack_size() > 0);
 80005a4:	f7ff fff2 	bl	800058c <stack_size>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	dc05      	bgt.n	80005ba <stack_top+0x1a>
 80005ae:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <stack_top+0x2c>)
 80005b0:	4a07      	ldr	r2, [pc, #28]	@ (80005d0 <stack_top+0x30>)
 80005b2:	217e      	movs	r1, #126	@ 0x7e
 80005b4:	4807      	ldr	r0, [pc, #28]	@ (80005d4 <stack_top+0x34>)
 80005b6:	f002 fa27 	bl	8002a08 <__assert_func>
	return transition_stack[stack_ptr - 1];
 80005ba:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <stack_top+0x38>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3b01      	subs	r3, #1
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <stack_top+0x3c>)
 80005c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	08003a6c 	.word	0x08003a6c
 80005d0:	08003b50 	.word	0x08003b50
 80005d4:	08003a80 	.word	0x08003a80
 80005d8:	20000010 	.word	0x20000010
 80005dc:	2000014c 	.word	0x2000014c

080005e0 <stack_push>:

void stack_push(int value) {
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	transition_stack[stack_ptr++] = value;
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <stack_push+0x24>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	1c5a      	adds	r2, r3, #1
 80005ee:	4905      	ldr	r1, [pc, #20]	@ (8000604 <stack_push+0x24>)
 80005f0:	600a      	str	r2, [r1, #0]
 80005f2:	4905      	ldr	r1, [pc, #20]	@ (8000608 <stack_push+0x28>)
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	20000010 	.word	0x20000010
 8000608:	2000014c 	.word	0x2000014c

0800060c <stack_pop>:

void stack_pop() {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	if (stack_size() <= 1) {
 8000610:	f7ff ffbc 	bl	800058c <stack_size>
 8000614:	4603      	mov	r3, r0
 8000616:	2b01      	cmp	r3, #1
 8000618:	dd05      	ble.n	8000626 <stack_pop+0x1a>
		return;
	}
	--stack_ptr;
 800061a:	4b04      	ldr	r3, [pc, #16]	@ (800062c <stack_pop+0x20>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3b01      	subs	r3, #1
 8000620:	4a02      	ldr	r2, [pc, #8]	@ (800062c <stack_pop+0x20>)
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	e000      	b.n	8000628 <stack_pop+0x1c>
		return;
 8000626:	bf00      	nop
}
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000010 	.word	0x20000010

08000630 <stack_reset>:

void stack_reset() {
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
	stack_ptr = 1;
 8000634:	4b03      	ldr	r3, [pc, #12]	@ (8000644 <stack_reset+0x14>)
 8000636:	2201      	movs	r2, #1
 8000638:	601a      	str	r2, [r3, #0]
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000010 	.word	0x20000010

08000648 <show_heading>:
		{ "Vote Success!", "#.Exit" },
		{ "Admin Logged In", "1.Menu #.Exit" }};

int counts[4];

void show_heading() {
 8000648:	b580      	push	{r7, lr}
 800064a:	b08c      	sub	sp, #48	@ 0x30
 800064c:	af00      	add	r7, sp, #0
	if (current_state == COUNT_STATE) {
 800064e:	4b40      	ldr	r3, [pc, #256]	@ (8000750 <show_heading+0x108>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b04      	cmp	r3, #4
 8000654:	d162      	bne.n	800071c <show_heading+0xd4>
		char a_label[] = "A: ";
 8000656:	4b3f      	ldr	r3, [pc, #252]	@ (8000754 <show_heading+0x10c>)
 8000658:	62fb      	str	r3, [r7, #44]	@ 0x2c
		char a_count[5];
		itoa(counts[0], a_count, 10);
 800065a:	4b3f      	ldr	r3, [pc, #252]	@ (8000758 <show_heading+0x110>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000662:	220a      	movs	r2, #10
 8000664:	4618      	mov	r0, r3
 8000666:	f002 fa17 	bl	8002a98 <itoa>
		strcat(a_label, a_count);
 800066a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800066e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000672:	4611      	mov	r1, r2
 8000674:	4618      	mov	r0, r3
 8000676:	f002 fb72 	bl	8002d5e <strcat>
		show_text(0, 0, a_label, 0);
 800067a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800067e:	2300      	movs	r3, #0
 8000680:	2100      	movs	r1, #0
 8000682:	2000      	movs	r0, #0
 8000684:	f7ff ff66 	bl	8000554 <show_text>

		char b_label[] = "B: ";
 8000688:	4b34      	ldr	r3, [pc, #208]	@ (800075c <show_heading+0x114>)
 800068a:	623b      	str	r3, [r7, #32]
		char b_count[5];
		itoa(counts[1], b_count, 10);
 800068c:	4b32      	ldr	r3, [pc, #200]	@ (8000758 <show_heading+0x110>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	f107 0118 	add.w	r1, r7, #24
 8000694:	220a      	movs	r2, #10
 8000696:	4618      	mov	r0, r3
 8000698:	f002 f9fe 	bl	8002a98 <itoa>
		strcat(b_label, b_count);
 800069c:	f107 0218 	add.w	r2, r7, #24
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4611      	mov	r1, r2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fb59 	bl	8002d5e <strcat>
		show_text(8, 0, b_label, 0);
 80006ac:	f107 0220 	add.w	r2, r7, #32
 80006b0:	2300      	movs	r3, #0
 80006b2:	2100      	movs	r1, #0
 80006b4:	2008      	movs	r0, #8
 80006b6:	f7ff ff4d 	bl	8000554 <show_text>

		char c_label[] = "C: ";
 80006ba:	4b29      	ldr	r3, [pc, #164]	@ (8000760 <show_heading+0x118>)
 80006bc:	617b      	str	r3, [r7, #20]
		char c_count[5];
		itoa(counts[2], c_count, 10);
 80006be:	4b26      	ldr	r3, [pc, #152]	@ (8000758 <show_heading+0x110>)
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	f107 010c 	add.w	r1, r7, #12
 80006c6:	220a      	movs	r2, #10
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 f9e5 	bl	8002a98 <itoa>
		strcat(c_label, c_count);
 80006ce:	f107 020c 	add.w	r2, r7, #12
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 fb40 	bl	8002d5e <strcat>
		show_text(0, 1, c_label, 0);
 80006de:	f107 0214 	add.w	r2, r7, #20
 80006e2:	2300      	movs	r3, #0
 80006e4:	2101      	movs	r1, #1
 80006e6:	2000      	movs	r0, #0
 80006e8:	f7ff ff34 	bl	8000554 <show_text>

		char d_label[] = "D: ";
 80006ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <show_heading+0x11c>)
 80006ee:	60bb      	str	r3, [r7, #8]
		char d_count[5];
		itoa(counts[3], d_count, 10);
 80006f0:	4b19      	ldr	r3, [pc, #100]	@ (8000758 <show_heading+0x110>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	4639      	mov	r1, r7
 80006f6:	220a      	movs	r2, #10
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 f9cd 	bl	8002a98 <itoa>
		strcat(d_label, d_count);
 80006fe:	463a      	mov	r2, r7
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	4611      	mov	r1, r2
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fb29 	bl	8002d5e <strcat>
		show_text(8, 1, d_label, 0);
 800070c:	f107 0208 	add.w	r2, r7, #8
 8000710:	2300      	movs	r3, #0
 8000712:	2101      	movs	r1, #1
 8000714:	2008      	movs	r0, #8
 8000716:	f7ff ff1d 	bl	8000554 <show_text>
	} else {
		show_text(0, 0, headings[current_state][0], 0);
		show_text(0, 1, headings[current_state][1], 0);
	}

}
 800071a:	e014      	b.n	8000746 <show_heading+0xfe>
		show_text(0, 0, headings[current_state][0], 0);
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <show_heading+0x108>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a11      	ldr	r2, [pc, #68]	@ (8000768 <show_heading+0x120>)
 8000722:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000726:	2300      	movs	r3, #0
 8000728:	2100      	movs	r1, #0
 800072a:	2000      	movs	r0, #0
 800072c:	f7ff ff12 	bl	8000554 <show_text>
		show_text(0, 1, headings[current_state][1], 0);
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <show_heading+0x108>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a0c      	ldr	r2, [pc, #48]	@ (8000768 <show_heading+0x120>)
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	4413      	add	r3, r2
 800073a:	685a      	ldr	r2, [r3, #4]
 800073c:	2300      	movs	r3, #0
 800073e:	2101      	movs	r1, #1
 8000740:	2000      	movs	r0, #0
 8000742:	f7ff ff07 	bl	8000554 <show_text>
}
 8000746:	bf00      	nop
 8000748:	3730      	adds	r7, #48	@ 0x30
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200002dc 	.word	0x200002dc
 8000754:	00203a41 	.word	0x00203a41
 8000758:	200002e0 	.word	0x200002e0
 800075c:	00203a42 	.word	0x00203a42
 8000760:	00203a43 	.word	0x00203a43
 8000764:	00203a44 	.word	0x00203a44
 8000768:	20000014 	.word	0x20000014

0800076c <cast_vote>:

void cast_vote(int option) {
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	++counts[option - 1];
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	4a05      	ldr	r2, [pc, #20]	@ (8000790 <cast_vote+0x24>)
 800077a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800077e:	3201      	adds	r2, #1
 8000780:	4903      	ldr	r1, [pc, #12]	@ (8000790 <cast_vote+0x24>)
 8000782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	200002e0 	.word	0x200002e0

08000794 <go_back>:

void go_back() {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	stack_pop();
 8000798:	f7ff ff38 	bl	800060c <stack_pop>
	current_state = stack_top();
 800079c:	f7ff ff00 	bl	80005a0 <stack_top>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4a02      	ldr	r2, [pc, #8]	@ (80007ac <go_back+0x18>)
 80007a4:	6013      	str	r3, [r2, #0]
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200002dc 	.word	0x200002dc

080007b0 <scan_for_admin>:

char key_presses[1000];
int key_press_count = 0;

int scan_for_admin() {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
	char pass[] = "699";
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <scan_for_admin+0x60>)
 80007b8:	607b      	str	r3, [r7, #4]
	if (key_press_count < strlen(pass)) {
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fcc5 	bl	800014c <strlen>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4a13      	ldr	r2, [pc, #76]	@ (8000814 <scan_for_admin+0x64>)
 80007c6:	6812      	ldr	r2, [r2, #0]
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d901      	bls.n	80007d0 <scan_for_admin+0x20>
		return 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e01a      	b.n	8000806 <scan_for_admin+0x56>
	}
	if (key_presses[key_press_count - 1] == pass[2]
 80007d0:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <scan_for_admin+0x64>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3b01      	subs	r3, #1
 80007d6:	4a10      	ldr	r2, [pc, #64]	@ (8000818 <scan_for_admin+0x68>)
 80007d8:	5cd2      	ldrb	r2, [r2, r3]
 80007da:	79bb      	ldrb	r3, [r7, #6]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d111      	bne.n	8000804 <scan_for_admin+0x54>
			&& key_presses[key_press_count - 2] == pass[1]
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <scan_for_admin+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	3b02      	subs	r3, #2
 80007e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000818 <scan_for_admin+0x68>)
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	797b      	ldrb	r3, [r7, #5]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d109      	bne.n	8000804 <scan_for_admin+0x54>
			&& key_presses[key_press_count - 3] == pass[0]) {
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <scan_for_admin+0x64>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3b03      	subs	r3, #3
 80007f6:	4a08      	ldr	r2, [pc, #32]	@ (8000818 <scan_for_admin+0x68>)
 80007f8:	5cd2      	ldrb	r2, [r2, r3]
 80007fa:	793b      	ldrb	r3, [r7, #4]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d101      	bne.n	8000804 <scan_for_admin+0x54>
		return 1;
 8000800:	2301      	movs	r3, #1
 8000802:	e000      	b.n	8000806 <scan_for_admin+0x56>
	}
	return 0;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	00393936 	.word	0x00393936
 8000814:	200006d8 	.word	0x200006d8
 8000818:	200002f0 	.word	0x200002f0

0800081c <transition>:

void transition(char key_pressed) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	char pressed[2] = { key_pressed };
 8000826:	2300      	movs	r3, #0
 8000828:	81bb      	strh	r3, [r7, #12]
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	733b      	strb	r3, [r7, #12]
	show_text(15, 0, pressed, 0);
 800082e:	f107 020c 	add.w	r2, r7, #12
 8000832:	2300      	movs	r3, #0
 8000834:	2100      	movs	r1, #0
 8000836:	200f      	movs	r0, #15
 8000838:	f7ff fe8c 	bl	8000554 <show_text>
	HAL_Delay(100);
 800083c:	2064      	movs	r0, #100	@ 0x64
 800083e:	f000 fd4d 	bl	80012dc <HAL_Delay>

	char old_state = current_state;
 8000842:	4b3c      	ldr	r3, [pc, #240]	@ (8000934 <transition+0x118>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	73fb      	strb	r3, [r7, #15]


	if (scan_for_admin()) {
 8000848:	f7ff ffb2 	bl	80007b0 <scan_for_admin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d006      	beq.n	8000860 <transition+0x44>
		current_state = ADMIN_LOGIN_STATE;
 8000852:	4b38      	ldr	r3, [pc, #224]	@ (8000934 <transition+0x118>)
 8000854:	2206      	movs	r2, #6
 8000856:	601a      	str	r2, [r3, #0]
		clear_console();
 8000858:	f7ff fe76 	bl	8000548 <clear_console>
		stack_reset();
 800085c:	f7ff fee8 	bl	8000630 <stack_reset>
	}

	if (key_pressed == '?') {
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2b3f      	cmp	r3, #63	@ 0x3f
 8000864:	d102      	bne.n	800086c <transition+0x50>
		exit(0);
 8000866:	2000      	movs	r0, #0
 8000868:	f002 f8ec 	bl	8002a44 <exit>
	}
	if (key_pressed == '*') {
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000870:	d104      	bne.n	800087c <transition+0x60>
		go_back();
 8000872:	f7ff ff8f 	bl	8000794 <go_back>
		clear_console();
 8000876:	f7ff fe67 	bl	8000548 <clear_console>
		return;
 800087a:	e058      	b.n	800092e <transition+0x112>
	}

	if (key_pressed == '#') {
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	2b23      	cmp	r3, #35	@ 0x23
 8000880:	d107      	bne.n	8000892 <transition+0x76>
		current_state = HOME_STATE;
 8000882:	4b2c      	ldr	r3, [pc, #176]	@ (8000934 <transition+0x118>)
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
		clear_console();
 8000888:	f7ff fe5e 	bl	8000548 <clear_console>
		stack_reset();
 800088c:	f7ff fed0 	bl	8000630 <stack_reset>
		return;
 8000890:	e04d      	b.n	800092e <transition+0x112>
	}
	if (current_state == HOME_STATE) {
 8000892:	4b28      	ldr	r3, [pc, #160]	@ (8000934 <transition+0x118>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10d      	bne.n	80008b6 <transition+0x9a>
		if (key_pressed == '1') {
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b31      	cmp	r3, #49	@ 0x31
 800089e:	d103      	bne.n	80008a8 <transition+0x8c>
			current_state = VOTE_STATE;
 80008a0:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <transition+0x118>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	e036      	b.n	8000916 <transition+0xfa>
		} else if (key_pressed == '2') {
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b32      	cmp	r3, #50	@ 0x32
 80008ac:	d133      	bne.n	8000916 <transition+0xfa>
			current_state = MENU_STATE;
 80008ae:	4b21      	ldr	r3, [pc, #132]	@ (8000934 <transition+0x118>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	e02f      	b.n	8000916 <transition+0xfa>
		}
	} else if (current_state == MENU_STATE) {
 80008b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000934 <transition+0x118>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d10d      	bne.n	80008da <transition+0xbe>
		if (key_pressed == '1') {
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b31      	cmp	r3, #49	@ 0x31
 80008c2:	d103      	bne.n	80008cc <transition+0xb0>
			current_state = STAT_STATE;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <transition+0x118>)
 80008c6:	2203      	movs	r2, #3
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	e024      	b.n	8000916 <transition+0xfa>
		} else if (key_pressed == '#') {
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	2b23      	cmp	r3, #35	@ 0x23
 80008d0:	d121      	bne.n	8000916 <transition+0xfa>
			current_state = HOME_STATE;
 80008d2:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <transition+0x118>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	e01d      	b.n	8000916 <transition+0xfa>
		}
	} else if (current_state == VOTE_STATE) {
 80008da:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <transition+0x118>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d108      	bne.n	80008f4 <transition+0xd8>
		cast_vote(key_pressed - '0');
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	3b30      	subs	r3, #48	@ 0x30
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ff40 	bl	800076c <cast_vote>
		current_state = SUCCESS_STATE;
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <transition+0x118>)
 80008ee:	2205      	movs	r2, #5
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	e010      	b.n	8000916 <transition+0xfa>

	} else if (current_state == STAT_STATE) {
 80008f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <transition+0x118>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d10c      	bne.n	8000916 <transition+0xfa>
		if (key_pressed == '1') {
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	2b31      	cmp	r3, #49	@ 0x31
 8000900:	d103      	bne.n	800090a <transition+0xee>
			current_state = COUNT_STATE;
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <transition+0x118>)
 8000904:	2204      	movs	r2, #4
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	e005      	b.n	8000916 <transition+0xfa>
		} else if (key_pressed == '#') {
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b23      	cmp	r3, #35	@ 0x23
 800090e:	d102      	bne.n	8000916 <transition+0xfa>
			current_state = HOME_STATE;
 8000910:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <transition+0x118>)
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
		}
	}
	stack_push(current_state);
 8000916:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <transition+0x118>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fe60 	bl	80005e0 <stack_push>
	if (current_state != old_state)
 8000920:	7bfa      	ldrb	r2, [r7, #15]
 8000922:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <transition+0x118>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	429a      	cmp	r2, r3
 8000928:	d001      	beq.n	800092e <transition+0x112>
		clear_console();
 800092a:	f7ff fe0d 	bl	8000548 <clear_console>
}
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200002dc 	.word	0x200002dc

08000938 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800093e:	f000 fc6b 	bl	8001218 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000942:	f000 f84b 	bl	80009dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000946:	f000 f8b3 	bl	8000ab0 <MX_GPIO_Init>
	MX_I2C2_Init();
 800094a:	f000 f883 	bl	8000a54 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	HD44780_Init(2);
 800094e:	2002      	movs	r0, #2
 8000950:	f7ff fc04 	bl	800015c <HD44780_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000954:	2201      	movs	r2, #1
 8000956:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800095a:	4819      	ldr	r0, [pc, #100]	@ (80009c0 <main+0x88>)
 800095c:	f000 ff8b 	bl	8001876 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000960:	2201      	movs	r2, #1
 8000962:	2108      	movs	r1, #8
 8000964:	4817      	ldr	r0, [pc, #92]	@ (80009c4 <main+0x8c>)
 8000966:	f000 ff86 	bl	8001876 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800096a:	2201      	movs	r2, #1
 800096c:	2110      	movs	r1, #16
 800096e:	4815      	ldr	r0, [pc, #84]	@ (80009c4 <main+0x8c>)
 8000970:	f000 ff81 	bl	8001876 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000974:	2201      	movs	r2, #1
 8000976:	2120      	movs	r1, #32
 8000978:	4812      	ldr	r0, [pc, #72]	@ (80009c4 <main+0x8c>)
 800097a:	f000 ff7c 	bl	8001876 <HAL_GPIO_WritePin>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
//  srand(time(0));
//	HAL_Delay(600);
	while (1) {
		show_heading();
 800097e:	f7ff fe63 	bl	8000648 <show_heading>
		char c = keyPressed;
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <main+0x90>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	71fb      	strb	r3, [r7, #7]
		if (currentMillis > last_when_pressed + 500) {
 8000988:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <main+0x94>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000990:	461a      	mov	r2, r3
 8000992:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <main+0x98>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	429a      	cmp	r2, r3
 8000998:	d2f1      	bcs.n	800097e <main+0x46>
			key_presses[key_press_count++] = c;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <main+0x9c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	1c5a      	adds	r2, r3, #1
 80009a0:	490c      	ldr	r1, [pc, #48]	@ (80009d4 <main+0x9c>)
 80009a2:	600a      	str	r2, [r1, #0]
 80009a4:	490c      	ldr	r1, [pc, #48]	@ (80009d8 <main+0xa0>)
 80009a6:	79fa      	ldrb	r2, [r7, #7]
 80009a8:	54ca      	strb	r2, [r1, r3]
			transition(c);
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff35 	bl	800081c <transition>
			last_when_pressed = currentMillis;
 80009b2:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <main+0x98>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b04      	ldr	r3, [pc, #16]	@ (80009cc <main+0x94>)
 80009ba:	601a      	str	r2, [r3, #0]
	while (1) {
 80009bc:	e7df      	b.n	800097e <main+0x46>
 80009be:	bf00      	nop
 80009c0:	40010800 	.word	0x40010800
 80009c4:	40010c00 	.word	0x40010c00
 80009c8:	20000144 	.word	0x20000144
 80009cc:	20000148 	.word	0x20000148
 80009d0:	20000140 	.word	0x20000140
 80009d4:	200006d8 	.word	0x200006d8
 80009d8:	200002f0 	.word	0x200002f0

080009dc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b090      	sub	sp, #64	@ 0x40
 80009e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009e2:	f107 0318 	add.w	r3, r7, #24
 80009e6:	2228      	movs	r2, #40	@ 0x28
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 f9af 	bl	8002d4e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a02:	2301      	movs	r3, #1
 8000a04:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a06:	2310      	movs	r3, #16
 8000a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a0e:	f107 0318 	add.w	r3, r7, #24
 8000a12:	4618      	mov	r0, r3
 8000a14:	f001 fbfc 	bl	8002210 <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x46>
		Error_Handler();
 8000a1e:	f000 fa57 	bl	8000ed0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a22:	230f      	movs	r3, #15
 8000a24:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 fe6a 	bl	8002714 <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x6e>
		Error_Handler();
 8000a46:	f000 fa43 	bl	8000ed0 <Error_Handler>
	}
}
 8000a4a:	bf00      	nop
 8000a4c:	3740      	adds	r7, #64	@ 0x40
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a5a:	4a13      	ldr	r2, [pc, #76]	@ (8000aa8 <MX_I2C2_Init+0x54>)
 8000a5c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a60:	4a12      	ldr	r2, [pc, #72]	@ (8000aac <MX_I2C2_Init+0x58>)
 8000a62:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a76:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000a90:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a92:	f000 ff21 	bl	80018d8 <HAL_I2C_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8000a9c:	f000 fa18 	bl	8000ed0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000d8 	.word	0x200000d8
 8000aa8:	40005800 	.word	0x40005800
 8000aac:	000186a0 	.word	0x000186a0

08000ab0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac4:	4b2c      	ldr	r3, [pc, #176]	@ (8000b78 <MX_GPIO_Init+0xc8>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8000b78 <MX_GPIO_Init+0xc8>)
 8000aca:	f043 0308 	orr.w	r3, r3, #8
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b29      	ldr	r3, [pc, #164]	@ (8000b78 <MX_GPIO_Init+0xc8>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0308 	and.w	r3, r3, #8
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	4b26      	ldr	r3, [pc, #152]	@ (8000b78 <MX_GPIO_Init+0xc8>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a25      	ldr	r2, [pc, #148]	@ (8000b78 <MX_GPIO_Init+0xc8>)
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b23      	ldr	r3, [pc, #140]	@ (8000b78 <MX_GPIO_Init+0xc8>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000afa:	4820      	ldr	r0, [pc, #128]	@ (8000b7c <MX_GPIO_Init+0xcc>)
 8000afc:	f000 febb 	bl	8001876 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5,
 8000b00:	2200      	movs	r2, #0
 8000b02:	2138      	movs	r1, #56	@ 0x38
 8000b04:	481e      	ldr	r0, [pc, #120]	@ (8000b80 <MX_GPIO_Init+0xd0>)
 8000b06:	f000 feb6 	bl	8001876 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b0e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	4619      	mov	r1, r3
 8000b22:	4816      	ldr	r0, [pc, #88]	@ (8000b7c <MX_GPIO_Init+0xcc>)
 8000b24:	f000 fd0c 	bl	8001540 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB3 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8000b28:	2338      	movs	r3, #56	@ 0x38
 8000b2a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2302      	movs	r3, #2
 8000b36:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4810      	ldr	r0, [pc, #64]	@ (8000b80 <MX_GPIO_Init+0xd0>)
 8000b40:	f000 fcfe 	bl	8001540 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB6 PB7 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8000b44:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000b48:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <MX_GPIO_Init+0xd4>)
 8000b4c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	4619      	mov	r1, r3
 8000b58:	4809      	ldr	r0, [pc, #36]	@ (8000b80 <MX_GPIO_Init+0xd0>)
 8000b5a:	f000 fcf1 	bl	8001540 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	2017      	movs	r0, #23
 8000b64:	f000 fcb5 	bl	80014d2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b68:	2017      	movs	r0, #23
 8000b6a:	f000 fcce 	bl	800150a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010800 	.word	0x40010800
 8000b80:	40010c00 	.word	0x40010c00
 8000b84:	10110000 	.word	0x10110000

08000b88 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8000b92:	f000 fb99 	bl	80012c8 <HAL_GetTick>
 8000b96:	4603      	mov	r3, r0
 8000b98:	4aa5      	ldr	r2, [pc, #660]	@ (8000e30 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000b9a:	6013      	str	r3, [r2, #0]
	if (currentMillis - previousMillis > 10) {
 8000b9c:	4ba4      	ldr	r3, [pc, #656]	@ (8000e30 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4ba4      	ldr	r3, [pc, #656]	@ (8000e34 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	2b0a      	cmp	r3, #10
 8000ba8:	f240 8180 	bls.w	8000eac <HAL_GPIO_EXTI_Callback+0x324>
		/*Configure GPIO pins : PB6 PB7 PB8 PB9 to GPIO_INPUT*/
		GPIO_InitStructPrivate.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
 8000bac:	4ba2      	ldr	r3, [pc, #648]	@ (8000e38 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000bae:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000bb2:	601a      	str	r2, [r3, #0]
				| GPIO_PIN_9;
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000bb4:	4ba0      	ldr	r3, [pc, #640]	@ (8000e38 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000bba:	4b9f      	ldr	r3, [pc, #636]	@ (8000e38 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	4b9d      	ldr	r3, [pc, #628]	@ (8000e38 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8000bc6:	499c      	ldr	r1, [pc, #624]	@ (8000e38 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000bc8:	489c      	ldr	r0, [pc, #624]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000bca:	f000 fcb9 	bl	8001540 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bd4:	489a      	ldr	r0, [pc, #616]	@ (8000e40 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000bd6:	f000 fe4e 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2108      	movs	r1, #8
 8000bde:	4897      	ldr	r0, [pc, #604]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000be0:	f000 fe49 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2110      	movs	r1, #16
 8000be8:	4894      	ldr	r0, [pc, #592]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000bea:	f000 fe44 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2120      	movs	r1, #32
 8000bf2:	4892      	ldr	r0, [pc, #584]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000bf4:	f000 fe3f 	bl	8001876 <HAL_GPIO_WritePin>
		if (GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	2b40      	cmp	r3, #64	@ 0x40
 8000bfc:	d10a      	bne.n	8000c14 <HAL_GPIO_EXTI_Callback+0x8c>
 8000bfe:	2140      	movs	r1, #64	@ 0x40
 8000c00:	488e      	ldr	r0, [pc, #568]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000c02:	f000 fe21 	bl	8001848 <HAL_GPIO_ReadPin>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d003      	beq.n	8000c14 <HAL_GPIO_EXTI_Callback+0x8c>
			keyPressed = 68; //ASCII value of D
 8000c0c:	4b8d      	ldr	r3, [pc, #564]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000c0e:	2244      	movs	r2, #68	@ 0x44
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e02c      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0xe6>
		} else if (GPIO_Pin == GPIO_PIN_7
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	2b80      	cmp	r3, #128	@ 0x80
 8000c18:	d10a      	bne.n	8000c30 <HAL_GPIO_EXTI_Callback+0xa8>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)) {
 8000c1a:	2180      	movs	r1, #128	@ 0x80
 8000c1c:	4887      	ldr	r0, [pc, #540]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000c1e:	f000 fe13 	bl	8001848 <HAL_GPIO_ReadPin>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d003      	beq.n	8000c30 <HAL_GPIO_EXTI_Callback+0xa8>
			keyPressed = 67; //ASCII value of C
 8000c28:	4b86      	ldr	r3, [pc, #536]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000c2a:	2243      	movs	r2, #67	@ 0x43
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	e01e      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0xe6>
		} else if (GPIO_Pin == GPIO_PIN_8
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c36:	d10b      	bne.n	8000c50 <HAL_GPIO_EXTI_Callback+0xc8>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 8000c38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c3c:	487f      	ldr	r0, [pc, #508]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000c3e:	f000 fe03 	bl	8001848 <HAL_GPIO_ReadPin>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_EXTI_Callback+0xc8>
			keyPressed = 66; //ASCII value of B
 8000c48:	4b7e      	ldr	r3, [pc, #504]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000c4a:	2242      	movs	r2, #66	@ 0x42
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	e00e      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0xe6>
		} else if (GPIO_Pin == GPIO_PIN_9
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c56:	d10a      	bne.n	8000c6e <HAL_GPIO_EXTI_Callback+0xe6>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)) {
 8000c58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c5c:	4877      	ldr	r0, [pc, #476]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000c5e:	f000 fdf3 	bl	8001848 <HAL_GPIO_ReadPin>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d002      	beq.n	8000c6e <HAL_GPIO_EXTI_Callback+0xe6>
			keyPressed = 65; //ASCII value of A
 8000c68:	4b76      	ldr	r3, [pc, #472]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000c6a:	2241      	movs	r2, #65	@ 0x41
 8000c6c:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c74:	4872      	ldr	r0, [pc, #456]	@ (8000e40 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000c76:	f000 fdfe 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	486f      	ldr	r0, [pc, #444]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000c80:	f000 fdf9 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2110      	movs	r1, #16
 8000c88:	486c      	ldr	r0, [pc, #432]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000c8a:	f000 fdf4 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2120      	movs	r1, #32
 8000c92:	486a      	ldr	r0, [pc, #424]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000c94:	f000 fdef 	bl	8001876 <HAL_GPIO_WritePin>
		if (GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	2b40      	cmp	r3, #64	@ 0x40
 8000c9c:	d10a      	bne.n	8000cb4 <HAL_GPIO_EXTI_Callback+0x12c>
 8000c9e:	2140      	movs	r1, #64	@ 0x40
 8000ca0:	4866      	ldr	r0, [pc, #408]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000ca2:	f000 fdd1 	bl	8001848 <HAL_GPIO_ReadPin>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d003      	beq.n	8000cb4 <HAL_GPIO_EXTI_Callback+0x12c>
			keyPressed = 35; //ASCII value of #
 8000cac:	4b65      	ldr	r3, [pc, #404]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000cae:	2223      	movs	r2, #35	@ 0x23
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	e02c      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x186>
		} else if (GPIO_Pin == GPIO_PIN_7
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	2b80      	cmp	r3, #128	@ 0x80
 8000cb8:	d10a      	bne.n	8000cd0 <HAL_GPIO_EXTI_Callback+0x148>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)) {
 8000cba:	2180      	movs	r1, #128	@ 0x80
 8000cbc:	485f      	ldr	r0, [pc, #380]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000cbe:	f000 fdc3 	bl	8001848 <HAL_GPIO_ReadPin>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d003      	beq.n	8000cd0 <HAL_GPIO_EXTI_Callback+0x148>
			keyPressed = 57; //ASCII value of 9
 8000cc8:	4b5e      	ldr	r3, [pc, #376]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000cca:	2239      	movs	r2, #57	@ 0x39
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	e01e      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x186>
		} else if (GPIO_Pin == GPIO_PIN_8
 8000cd0:	88fb      	ldrh	r3, [r7, #6]
 8000cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cd6:	d10b      	bne.n	8000cf0 <HAL_GPIO_EXTI_Callback+0x168>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 8000cd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cdc:	4857      	ldr	r0, [pc, #348]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000cde:	f000 fdb3 	bl	8001848 <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_EXTI_Callback+0x168>
			keyPressed = 54; //ASCII value of 6
 8000ce8:	4b56      	ldr	r3, [pc, #344]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000cea:	2236      	movs	r2, #54	@ 0x36
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	e00e      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x186>
		} else if (GPIO_Pin == GPIO_PIN_9
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cf6:	d10a      	bne.n	8000d0e <HAL_GPIO_EXTI_Callback+0x186>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)) {
 8000cf8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cfc:	484f      	ldr	r0, [pc, #316]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000cfe:	f000 fda3 	bl	8001848 <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d002      	beq.n	8000d0e <HAL_GPIO_EXTI_Callback+0x186>
			keyPressed = 51; //ASCII value of 3
 8000d08:	4b4e      	ldr	r3, [pc, #312]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000d0a:	2233      	movs	r2, #51	@ 0x33
 8000d0c:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d14:	484a      	ldr	r0, [pc, #296]	@ (8000e40 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000d16:	f000 fdae 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2108      	movs	r1, #8
 8000d1e:	4847      	ldr	r0, [pc, #284]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000d20:	f000 fda9 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2110      	movs	r1, #16
 8000d28:	4844      	ldr	r0, [pc, #272]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000d2a:	f000 fda4 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2120      	movs	r1, #32
 8000d32:	4842      	ldr	r0, [pc, #264]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000d34:	f000 fd9f 	bl	8001876 <HAL_GPIO_WritePin>
		if (GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 8000d38:	88fb      	ldrh	r3, [r7, #6]
 8000d3a:	2b40      	cmp	r3, #64	@ 0x40
 8000d3c:	d10a      	bne.n	8000d54 <HAL_GPIO_EXTI_Callback+0x1cc>
 8000d3e:	2140      	movs	r1, #64	@ 0x40
 8000d40:	483e      	ldr	r0, [pc, #248]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000d42:	f000 fd81 	bl	8001848 <HAL_GPIO_ReadPin>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_EXTI_Callback+0x1cc>
			keyPressed = 48; //ASCII value of 0
 8000d4c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000d4e:	2230      	movs	r2, #48	@ 0x30
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	e02c      	b.n	8000dae <HAL_GPIO_EXTI_Callback+0x226>
		} else if (GPIO_Pin == GPIO_PIN_7
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	2b80      	cmp	r3, #128	@ 0x80
 8000d58:	d10a      	bne.n	8000d70 <HAL_GPIO_EXTI_Callback+0x1e8>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)) {
 8000d5a:	2180      	movs	r1, #128	@ 0x80
 8000d5c:	4837      	ldr	r0, [pc, #220]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000d5e:	f000 fd73 	bl	8001848 <HAL_GPIO_ReadPin>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_EXTI_Callback+0x1e8>
			keyPressed = 56; //ASCII value of 8
 8000d68:	4b36      	ldr	r3, [pc, #216]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000d6a:	2238      	movs	r2, #56	@ 0x38
 8000d6c:	701a      	strb	r2, [r3, #0]
 8000d6e:	e01e      	b.n	8000dae <HAL_GPIO_EXTI_Callback+0x226>
		} else if (GPIO_Pin == GPIO_PIN_8
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d76:	d10b      	bne.n	8000d90 <HAL_GPIO_EXTI_Callback+0x208>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 8000d78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7c:	482f      	ldr	r0, [pc, #188]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000d7e:	f000 fd63 	bl	8001848 <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <HAL_GPIO_EXTI_Callback+0x208>
			keyPressed = 53; //ASCII value of 5
 8000d88:	4b2e      	ldr	r3, [pc, #184]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000d8a:	2235      	movs	r2, #53	@ 0x35
 8000d8c:	701a      	strb	r2, [r3, #0]
 8000d8e:	e00e      	b.n	8000dae <HAL_GPIO_EXTI_Callback+0x226>
		} else if (GPIO_Pin == GPIO_PIN_9
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d96:	d10a      	bne.n	8000dae <HAL_GPIO_EXTI_Callback+0x226>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)) {
 8000d98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d9c:	4827      	ldr	r0, [pc, #156]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000d9e:	f000 fd53 	bl	8001848 <HAL_GPIO_ReadPin>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <HAL_GPIO_EXTI_Callback+0x226>
			keyPressed = 50; //ASCII value of 2
 8000da8:	4b26      	ldr	r3, [pc, #152]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000daa:	2232      	movs	r2, #50	@ 0x32
 8000dac:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000db4:	4822      	ldr	r0, [pc, #136]	@ (8000e40 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000db6:	f000 fd5e 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2108      	movs	r1, #8
 8000dbe:	481f      	ldr	r0, [pc, #124]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000dc0:	f000 fd59 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2110      	movs	r1, #16
 8000dc8:	481c      	ldr	r0, [pc, #112]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000dca:	f000 fd54 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2120      	movs	r1, #32
 8000dd2:	481a      	ldr	r0, [pc, #104]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000dd4:	f000 fd4f 	bl	8001876 <HAL_GPIO_WritePin>
		if (GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	2b40      	cmp	r3, #64	@ 0x40
 8000ddc:	d10a      	bne.n	8000df4 <HAL_GPIO_EXTI_Callback+0x26c>
 8000dde:	2140      	movs	r1, #64	@ 0x40
 8000de0:	4816      	ldr	r0, [pc, #88]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000de2:	f000 fd31 	bl	8001848 <HAL_GPIO_ReadPin>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_EXTI_Callback+0x26c>
			keyPressed = 42; //ASCII value of *
 8000dec:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000dee:	222a      	movs	r2, #42	@ 0x2a
 8000df0:	701a      	strb	r2, [r3, #0]
 8000df2:	e038      	b.n	8000e66 <HAL_GPIO_EXTI_Callback+0x2de>
		} else if (GPIO_Pin == GPIO_PIN_7
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	2b80      	cmp	r3, #128	@ 0x80
 8000df8:	d10a      	bne.n	8000e10 <HAL_GPIO_EXTI_Callback+0x288>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)) {
 8000dfa:	2180      	movs	r1, #128	@ 0x80
 8000dfc:	480f      	ldr	r0, [pc, #60]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000dfe:	f000 fd23 	bl	8001848 <HAL_GPIO_ReadPin>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_EXTI_Callback+0x288>
			keyPressed = 55; //ASCII value of 7
 8000e08:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000e0a:	2237      	movs	r2, #55	@ 0x37
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	e02a      	b.n	8000e66 <HAL_GPIO_EXTI_Callback+0x2de>
		} else if (GPIO_Pin == GPIO_PIN_8
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e16:	d117      	bne.n	8000e48 <HAL_GPIO_EXTI_Callback+0x2c0>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 8000e18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e1c:	4807      	ldr	r0, [pc, #28]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000e1e:	f000 fd13 	bl	8001848 <HAL_GPIO_ReadPin>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d00f      	beq.n	8000e48 <HAL_GPIO_EXTI_Callback+0x2c0>
			keyPressed = 52; //ASCII value of 4
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000e2a:	2234      	movs	r2, #52	@ 0x34
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e01a      	b.n	8000e66 <HAL_GPIO_EXTI_Callback+0x2de>
 8000e30:	20000140 	.word	0x20000140
 8000e34:	2000013c 	.word	0x2000013c
 8000e38:	2000012c 	.word	0x2000012c
 8000e3c:	40010c00 	.word	0x40010c00
 8000e40:	40010800 	.word	0x40010800
 8000e44:	20000144 	.word	0x20000144
		} else if (GPIO_Pin == GPIO_PIN_9
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e4e:	d10a      	bne.n	8000e66 <HAL_GPIO_EXTI_Callback+0x2de>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)) {
 8000e50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e54:	4817      	ldr	r0, [pc, #92]	@ (8000eb4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000e56:	f000 fcf7 	bl	8001848 <HAL_GPIO_ReadPin>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <HAL_GPIO_EXTI_Callback+0x2de>
			keyPressed = 49; //ASCII value of 1
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <HAL_GPIO_EXTI_Callback+0x330>)
 8000e62:	2231      	movs	r2, #49	@ 0x31
 8000e64:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e6c:	4813      	ldr	r0, [pc, #76]	@ (8000ebc <HAL_GPIO_EXTI_Callback+0x334>)
 8000e6e:	f000 fd02 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000e72:	2201      	movs	r2, #1
 8000e74:	2108      	movs	r1, #8
 8000e76:	480f      	ldr	r0, [pc, #60]	@ (8000eb4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000e78:	f000 fcfd 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2110      	movs	r1, #16
 8000e80:	480c      	ldr	r0, [pc, #48]	@ (8000eb4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000e82:	f000 fcf8 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2120      	movs	r1, #32
 8000e8a:	480a      	ldr	r0, [pc, #40]	@ (8000eb4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000e8c:	f000 fcf3 	bl	8001876 <HAL_GPIO_WritePin>
		/*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8000e90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <HAL_GPIO_EXTI_Callback+0x338>)
 8000e92:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec4 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000e94:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <HAL_GPIO_EXTI_Callback+0x338>)
 8000e98:	2202      	movs	r2, #2
 8000e9a:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8000e9c:	4908      	ldr	r1, [pc, #32]	@ (8000ec0 <HAL_GPIO_EXTI_Callback+0x338>)
 8000e9e:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000ea0:	f000 fb4e 	bl	8001540 <HAL_GPIO_Init>
		previousMillis = currentMillis;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <HAL_GPIO_EXTI_Callback+0x340>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a08      	ldr	r2, [pc, #32]	@ (8000ecc <HAL_GPIO_EXTI_Callback+0x344>)
 8000eaa:	6013      	str	r3, [r2, #0]
	}
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40010c00 	.word	0x40010c00
 8000eb8:	20000144 	.word	0x20000144
 8000ebc:	40010800 	.word	0x40010800
 8000ec0:	2000012c 	.word	0x2000012c
 8000ec4:	10110000 	.word	0x10110000
 8000ec8:	20000140 	.word	0x20000140
 8000ecc:	2000013c 	.word	0x2000013c

08000ed0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <Error_Handler+0x8>

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <HAL_MspInit+0x5c>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	4a14      	ldr	r2, [pc, #80]	@ (8000f38 <HAL_MspInit+0x5c>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6193      	str	r3, [r2, #24]
 8000eee:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <HAL_MspInit+0x5c>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <HAL_MspInit+0x5c>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	4a0e      	ldr	r2, [pc, #56]	@ (8000f38 <HAL_MspInit+0x5c>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f04:	61d3      	str	r3, [r2, #28]
 8000f06:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <HAL_MspInit+0x5c>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f12:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <HAL_MspInit+0x60>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	4a04      	ldr	r2, [pc, #16]	@ (8000f3c <HAL_MspInit+0x60>)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010000 	.word	0x40010000

08000f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a16      	ldr	r2, [pc, #88]	@ (8000fb4 <HAL_I2C_MspInit+0x74>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d124      	bne.n	8000faa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <HAL_I2C_MspInit+0x78>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a14      	ldr	r2, [pc, #80]	@ (8000fb8 <HAL_I2C_MspInit+0x78>)
 8000f66:	f043 0308 	orr.w	r3, r3, #8
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_I2C_MspInit+0x78>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f78:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7e:	2312      	movs	r3, #18
 8000f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480b      	ldr	r0, [pc, #44]	@ (8000fbc <HAL_I2C_MspInit+0x7c>)
 8000f8e:	f000 fad7 	bl	8001540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f92:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <HAL_I2C_MspInit+0x78>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	4a08      	ldr	r2, [pc, #32]	@ (8000fb8 <HAL_I2C_MspInit+0x78>)
 8000f98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f9c:	61d3      	str	r3, [r2, #28]
 8000f9e:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <HAL_I2C_MspInit+0x78>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000faa:	bf00      	nop
 8000fac:	3720      	adds	r7, #32
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40005800 	.word	0x40005800
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010c00 	.word	0x40010c00

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <BusFault_Handler+0x4>

08000fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <UsageFault_Handler+0x4>

08000fe8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f948 	bl	80012a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800101c:	2040      	movs	r0, #64	@ 0x40
 800101e:	f000 fc43 	bl	80018a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001022:	2080      	movs	r0, #128	@ 0x80
 8001024:	f000 fc40 	bl	80018a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001028:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800102c:	f000 fc3c 	bl	80018a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001030:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001034:	f000 fc38 	bl	80018a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return 1;
 8001040:	2301      	movs	r3, #1
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <_kill>:

int _kill(int pid, int sig)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001054:	f001 fed8 	bl	8002e08 <__errno>
 8001058:	4603      	mov	r3, r0
 800105a:	2216      	movs	r2, #22
 800105c:	601a      	str	r2, [r3, #0]
  return -1;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <_exit>:

void _exit (int status)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001072:	f04f 31ff 	mov.w	r1, #4294967295
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffe7 	bl	800104a <_kill>
  while (1) {}    /* Make sure we hang here */
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <_exit+0x12>

08001080 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e00a      	b.n	80010a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001092:	f3af 8000 	nop.w
 8001096:	4601      	mov	r1, r0
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	60ba      	str	r2, [r7, #8]
 800109e:	b2ca      	uxtb	r2, r1
 80010a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dbf0      	blt.n	8001092 <_read+0x12>
  }

  return len;
 80010b0:	687b      	ldr	r3, [r7, #4]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	e009      	b.n	80010e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	60ba      	str	r2, [r7, #8]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbf1      	blt.n	80010cc <_write+0x12>
  }
  return len;
 80010e8:	687b      	ldr	r3, [r7, #4]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_close>:

int _close(int file)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001118:	605a      	str	r2, [r3, #4]
  return 0;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <_isatty>:

int _isatty(int file)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr

0800113a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800113a:	b480      	push	{r7}
 800113c:	b085      	sub	sp, #20
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
	...

08001154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800115c:	4a14      	ldr	r2, [pc, #80]	@ (80011b0 <_sbrk+0x5c>)
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <_sbrk+0x60>)
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001168:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <_sbrk+0x64>)
 8001172:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <_sbrk+0x68>)
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	429a      	cmp	r2, r3
 8001182:	d207      	bcs.n	8001194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001184:	f001 fe40 	bl	8002e08 <__errno>
 8001188:	4603      	mov	r3, r0
 800118a:	220c      	movs	r2, #12
 800118c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	e009      	b.n	80011a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001194:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <_sbrk+0x64>)
 80011a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20005000 	.word	0x20005000
 80011b4:	00000400 	.word	0x00000400
 80011b8:	200006dc 	.word	0x200006dc
 80011bc:	20000830 	.word	0x20000830

080011c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011cc:	f7ff fff8 	bl	80011c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d0:	480b      	ldr	r0, [pc, #44]	@ (8001200 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011d2:	490c      	ldr	r1, [pc, #48]	@ (8001204 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001208 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a09      	ldr	r2, [pc, #36]	@ (800120c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011e8:	4c09      	ldr	r4, [pc, #36]	@ (8001210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f6:	f001 fe0d 	bl	8002e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011fa:	f7ff fb9d 	bl	8000938 <main>
  bx lr
 80011fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001208:	08003c2c 	.word	0x08003c2c
  ldr r2, =_sbss
 800120c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001210:	20000830 	.word	0x20000830

08001214 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC1_2_IRQHandler>
	...

08001218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <HAL_Init+0x28>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a07      	ldr	r2, [pc, #28]	@ (8001240 <HAL_Init+0x28>)
 8001222:	f043 0310 	orr.w	r3, r3, #16
 8001226:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 f947 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122e:	200f      	movs	r0, #15
 8001230:	f000 f808 	bl	8001244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001234:	f7ff fe52 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40022000 	.word	0x40022000

08001244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <HAL_InitTick+0x54>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <HAL_InitTick+0x58>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800125a:	fbb3 f3f1 	udiv	r3, r3, r1
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f95f 	bl	8001526 <HAL_SYSTICK_Config>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00e      	b.n	8001290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d80a      	bhi.n	800128e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f000 f927 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001284:	4a06      	ldr	r2, [pc, #24]	@ (80012a0 <HAL_InitTick+0x5c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e000      	b.n	8001290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000004c 	.word	0x2000004c
 800129c:	20000054 	.word	0x20000054
 80012a0:	20000050 	.word	0x20000050

080012a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <HAL_IncTick+0x1c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <HAL_IncTick+0x20>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a03      	ldr	r2, [pc, #12]	@ (80012c4 <HAL_IncTick+0x20>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	20000054 	.word	0x20000054
 80012c4:	200006e0 	.word	0x200006e0

080012c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;
 80012cc:	4b02      	ldr	r3, [pc, #8]	@ (80012d8 <HAL_GetTick+0x10>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	200006e0 	.word	0x200006e0

080012dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff fff0 	bl	80012c8 <HAL_GetTick>
 80012e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f4:	d005      	beq.n	8001302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <HAL_Delay+0x44>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001302:	bf00      	nop
 8001304:	f7ff ffe0 	bl	80012c8 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f7      	bhi.n	8001304 <HAL_Delay+0x28>
  {
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000054 	.word	0x20000054

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0b      	blt.n	80013b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f003 021f 	and.w	r2, r3, #31
 80013a0:	4906      	ldr	r1, [pc, #24]	@ (80013bc <__NVIC_EnableIRQ+0x34>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	2001      	movs	r0, #1
 80013aa:	fa00 f202 	lsl.w	r2, r0, r2
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	@ (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	@ (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	@ 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	@ 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff90 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff2d 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff42 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff90 	bl	8001414 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5f 	bl	80013c0 <__NVIC_SetPriority>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff35 	bl	8001388 <__NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffa2 	bl	8001478 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001540:	b480      	push	{r7}
 8001542:	b08b      	sub	sp, #44	@ 0x2c
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001552:	e169      	b.n	8001828 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001554:	2201      	movs	r2, #1
 8001556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	429a      	cmp	r2, r3
 800156e:	f040 8158 	bne.w	8001822 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4a9a      	ldr	r2, [pc, #616]	@ (80017e0 <HAL_GPIO_Init+0x2a0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d05e      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 800157c:	4a98      	ldr	r2, [pc, #608]	@ (80017e0 <HAL_GPIO_Init+0x2a0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d875      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 8001582:	4a98      	ldr	r2, [pc, #608]	@ (80017e4 <HAL_GPIO_Init+0x2a4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d058      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 8001588:	4a96      	ldr	r2, [pc, #600]	@ (80017e4 <HAL_GPIO_Init+0x2a4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d86f      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 800158e:	4a96      	ldr	r2, [pc, #600]	@ (80017e8 <HAL_GPIO_Init+0x2a8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d052      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 8001594:	4a94      	ldr	r2, [pc, #592]	@ (80017e8 <HAL_GPIO_Init+0x2a8>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d869      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 800159a:	4a94      	ldr	r2, [pc, #592]	@ (80017ec <HAL_GPIO_Init+0x2ac>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d04c      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 80015a0:	4a92      	ldr	r2, [pc, #584]	@ (80017ec <HAL_GPIO_Init+0x2ac>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d863      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 80015a6:	4a92      	ldr	r2, [pc, #584]	@ (80017f0 <HAL_GPIO_Init+0x2b0>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d046      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 80015ac:	4a90      	ldr	r2, [pc, #576]	@ (80017f0 <HAL_GPIO_Init+0x2b0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d85d      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 80015b2:	2b12      	cmp	r3, #18
 80015b4:	d82a      	bhi.n	800160c <HAL_GPIO_Init+0xcc>
 80015b6:	2b12      	cmp	r3, #18
 80015b8:	d859      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 80015ba:	a201      	add	r2, pc, #4	@ (adr r2, 80015c0 <HAL_GPIO_Init+0x80>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	0800163b 	.word	0x0800163b
 80015c4:	08001615 	.word	0x08001615
 80015c8:	08001627 	.word	0x08001627
 80015cc:	08001669 	.word	0x08001669
 80015d0:	0800166f 	.word	0x0800166f
 80015d4:	0800166f 	.word	0x0800166f
 80015d8:	0800166f 	.word	0x0800166f
 80015dc:	0800166f 	.word	0x0800166f
 80015e0:	0800166f 	.word	0x0800166f
 80015e4:	0800166f 	.word	0x0800166f
 80015e8:	0800166f 	.word	0x0800166f
 80015ec:	0800166f 	.word	0x0800166f
 80015f0:	0800166f 	.word	0x0800166f
 80015f4:	0800166f 	.word	0x0800166f
 80015f8:	0800166f 	.word	0x0800166f
 80015fc:	0800166f 	.word	0x0800166f
 8001600:	0800166f 	.word	0x0800166f
 8001604:	0800161d 	.word	0x0800161d
 8001608:	08001631 	.word	0x08001631
 800160c:	4a79      	ldr	r2, [pc, #484]	@ (80017f4 <HAL_GPIO_Init+0x2b4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d013      	beq.n	800163a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001612:	e02c      	b.n	800166e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	623b      	str	r3, [r7, #32]
          break;
 800161a:	e029      	b.n	8001670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	3304      	adds	r3, #4
 8001622:	623b      	str	r3, [r7, #32]
          break;
 8001624:	e024      	b.n	8001670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	3308      	adds	r3, #8
 800162c:	623b      	str	r3, [r7, #32]
          break;
 800162e:	e01f      	b.n	8001670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	330c      	adds	r3, #12
 8001636:	623b      	str	r3, [r7, #32]
          break;
 8001638:	e01a      	b.n	8001670 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001642:	2304      	movs	r3, #4
 8001644:	623b      	str	r3, [r7, #32]
          break;
 8001646:	e013      	b.n	8001670 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001650:	2308      	movs	r3, #8
 8001652:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	611a      	str	r2, [r3, #16]
          break;
 800165a:	e009      	b.n	8001670 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800165c:	2308      	movs	r3, #8
 800165e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	615a      	str	r2, [r3, #20]
          break;
 8001666:	e003      	b.n	8001670 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
          break;
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x130>
          break;
 800166e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2bff      	cmp	r3, #255	@ 0xff
 8001674:	d801      	bhi.n	800167a <HAL_GPIO_Init+0x13a>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	e001      	b.n	800167e <HAL_GPIO_Init+0x13e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3304      	adds	r3, #4
 800167e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2bff      	cmp	r3, #255	@ 0xff
 8001684:	d802      	bhi.n	800168c <HAL_GPIO_Init+0x14c>
 8001686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	e002      	b.n	8001692 <HAL_GPIO_Init+0x152>
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168e:	3b08      	subs	r3, #8
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	210f      	movs	r1, #15
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	401a      	ands	r2, r3
 80016a4:	6a39      	ldr	r1, [r7, #32]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	431a      	orrs	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 80b1 	beq.w	8001822 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016c0:	4b4d      	ldr	r3, [pc, #308]	@ (80017f8 <HAL_GPIO_Init+0x2b8>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a4c      	ldr	r2, [pc, #304]	@ (80017f8 <HAL_GPIO_Init+0x2b8>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b4a      	ldr	r3, [pc, #296]	@ (80017f8 <HAL_GPIO_Init+0x2b8>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016d8:	4a48      	ldr	r2, [pc, #288]	@ (80017fc <HAL_GPIO_Init+0x2bc>)
 80016da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016dc:	089b      	lsrs	r3, r3, #2
 80016de:	3302      	adds	r3, #2
 80016e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	220f      	movs	r2, #15
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a40      	ldr	r2, [pc, #256]	@ (8001800 <HAL_GPIO_Init+0x2c0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d013      	beq.n	800172c <HAL_GPIO_Init+0x1ec>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a3f      	ldr	r2, [pc, #252]	@ (8001804 <HAL_GPIO_Init+0x2c4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d00d      	beq.n	8001728 <HAL_GPIO_Init+0x1e8>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a3e      	ldr	r2, [pc, #248]	@ (8001808 <HAL_GPIO_Init+0x2c8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d007      	beq.n	8001724 <HAL_GPIO_Init+0x1e4>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a3d      	ldr	r2, [pc, #244]	@ (800180c <HAL_GPIO_Init+0x2cc>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d101      	bne.n	8001720 <HAL_GPIO_Init+0x1e0>
 800171c:	2303      	movs	r3, #3
 800171e:	e006      	b.n	800172e <HAL_GPIO_Init+0x1ee>
 8001720:	2304      	movs	r3, #4
 8001722:	e004      	b.n	800172e <HAL_GPIO_Init+0x1ee>
 8001724:	2302      	movs	r3, #2
 8001726:	e002      	b.n	800172e <HAL_GPIO_Init+0x1ee>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_GPIO_Init+0x1ee>
 800172c:	2300      	movs	r3, #0
 800172e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001730:	f002 0203 	and.w	r2, r2, #3
 8001734:	0092      	lsls	r2, r2, #2
 8001736:	4093      	lsls	r3, r2
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800173e:	492f      	ldr	r1, [pc, #188]	@ (80017fc <HAL_GPIO_Init+0x2bc>)
 8001740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	3302      	adds	r3, #2
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001758:	4b2d      	ldr	r3, [pc, #180]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	492c      	ldr	r1, [pc, #176]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	608b      	str	r3, [r1, #8]
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001766:	4b2a      	ldr	r3, [pc, #168]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	43db      	mvns	r3, r3
 800176e:	4928      	ldr	r1, [pc, #160]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 8001770:	4013      	ands	r3, r2
 8001772:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d006      	beq.n	800178e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001780:	4b23      	ldr	r3, [pc, #140]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	4922      	ldr	r1, [pc, #136]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	60cb      	str	r3, [r1, #12]
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800178e:	4b20      	ldr	r3, [pc, #128]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	43db      	mvns	r3, r3
 8001796:	491e      	ldr	r1, [pc, #120]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 8001798:	4013      	ands	r3, r2
 800179a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d006      	beq.n	80017b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017a8:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4918      	ldr	r1, [pc, #96]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017b6:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	43db      	mvns	r3, r3
 80017be:	4914      	ldr	r1, [pc, #80]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d021      	beq.n	8001814 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	490e      	ldr	r1, [pc, #56]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]
 80017dc:	e021      	b.n	8001822 <HAL_GPIO_Init+0x2e2>
 80017de:	bf00      	nop
 80017e0:	10320000 	.word	0x10320000
 80017e4:	10310000 	.word	0x10310000
 80017e8:	10220000 	.word	0x10220000
 80017ec:	10210000 	.word	0x10210000
 80017f0:	10120000 	.word	0x10120000
 80017f4:	10110000 	.word	0x10110000
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010000 	.word	0x40010000
 8001800:	40010800 	.word	0x40010800
 8001804:	40010c00 	.word	0x40010c00
 8001808:	40011000 	.word	0x40011000
 800180c:	40011400 	.word	0x40011400
 8001810:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <HAL_GPIO_Init+0x304>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	43db      	mvns	r3, r3
 800181c:	4909      	ldr	r1, [pc, #36]	@ (8001844 <HAL_GPIO_Init+0x304>)
 800181e:	4013      	ands	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	3301      	adds	r3, #1
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182e:	fa22 f303 	lsr.w	r3, r2, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	f47f ae8e 	bne.w	8001554 <HAL_GPIO_Init+0x14>
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	372c      	adds	r7, #44	@ 0x2c
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	40010400 	.word	0x40010400

08001848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	e001      	b.n	800186a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	807b      	strh	r3, [r7, #2]
 8001882:	4613      	mov	r3, r2
 8001884:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001886:	787b      	ldrb	r3, [r7, #1]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188c:	887a      	ldrh	r2, [r7, #2]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001892:	e003      	b.n	800189c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001894:	887b      	ldrh	r3, [r7, #2]
 8001896:	041a      	lsls	r2, r3, #16
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	611a      	str	r2, [r3, #16]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
	...

080018a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018b2:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018be:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f95e 	bl	8000b88 <HAL_GPIO_EXTI_Callback>
  }
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40010400 	.word	0x40010400

080018d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e12b      	b.n	8001b42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d106      	bne.n	8001904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fb1e 	bl	8000f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2224      	movs	r2, #36	@ 0x24
 8001908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0201 	bic.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800192a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800193a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800193c:	f001 f832 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 8001940:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4a81      	ldr	r2, [pc, #516]	@ (8001b4c <HAL_I2C_Init+0x274>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d807      	bhi.n	800195c <HAL_I2C_Init+0x84>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4a80      	ldr	r2, [pc, #512]	@ (8001b50 <HAL_I2C_Init+0x278>)
 8001950:	4293      	cmp	r3, r2
 8001952:	bf94      	ite	ls
 8001954:	2301      	movls	r3, #1
 8001956:	2300      	movhi	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	e006      	b.n	800196a <HAL_I2C_Init+0x92>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4a7d      	ldr	r2, [pc, #500]	@ (8001b54 <HAL_I2C_Init+0x27c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	bf94      	ite	ls
 8001964:	2301      	movls	r3, #1
 8001966:	2300      	movhi	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e0e7      	b.n	8001b42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4a78      	ldr	r2, [pc, #480]	@ (8001b58 <HAL_I2C_Init+0x280>)
 8001976:	fba2 2303 	umull	r2, r3, r2, r3
 800197a:	0c9b      	lsrs	r3, r3, #18
 800197c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	430a      	orrs	r2, r1
 8001990:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a6a      	ldr	r2, [pc, #424]	@ (8001b4c <HAL_I2C_Init+0x274>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d802      	bhi.n	80019ac <HAL_I2C_Init+0xd4>
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	3301      	adds	r3, #1
 80019aa:	e009      	b.n	80019c0 <HAL_I2C_Init+0xe8>
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	4a69      	ldr	r2, [pc, #420]	@ (8001b5c <HAL_I2C_Init+0x284>)
 80019b8:	fba2 2303 	umull	r2, r3, r2, r3
 80019bc:	099b      	lsrs	r3, r3, #6
 80019be:	3301      	adds	r3, #1
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	430b      	orrs	r3, r1
 80019c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80019d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	495c      	ldr	r1, [pc, #368]	@ (8001b4c <HAL_I2C_Init+0x274>)
 80019dc:	428b      	cmp	r3, r1
 80019de:	d819      	bhi.n	8001a14 <HAL_I2C_Init+0x13c>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1e59      	subs	r1, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ee:	1c59      	adds	r1, r3, #1
 80019f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80019f4:	400b      	ands	r3, r1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00a      	beq.n	8001a10 <HAL_I2C_Init+0x138>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1e59      	subs	r1, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a08:	3301      	adds	r3, #1
 8001a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0e:	e051      	b.n	8001ab4 <HAL_I2C_Init+0x1dc>
 8001a10:	2304      	movs	r3, #4
 8001a12:	e04f      	b.n	8001ab4 <HAL_I2C_Init+0x1dc>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d111      	bne.n	8001a40 <HAL_I2C_Init+0x168>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1e58      	subs	r0, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	440b      	add	r3, r1
 8001a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a2e:	3301      	adds	r3, #1
 8001a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	e012      	b.n	8001a66 <HAL_I2C_Init+0x18e>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1e58      	subs	r0, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6859      	ldr	r1, [r3, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	0099      	lsls	r1, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a56:	3301      	adds	r3, #1
 8001a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf0c      	ite	eq
 8001a60:	2301      	moveq	r3, #1
 8001a62:	2300      	movne	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_I2C_Init+0x196>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e022      	b.n	8001ab4 <HAL_I2C_Init+0x1dc>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10e      	bne.n	8001a94 <HAL_I2C_Init+0x1bc>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1e58      	subs	r0, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6859      	ldr	r1, [r3, #4]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	440b      	add	r3, r1
 8001a84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a88:	3301      	adds	r3, #1
 8001a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a92:	e00f      	b.n	8001ab4 <HAL_I2C_Init+0x1dc>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1e58      	subs	r0, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6859      	ldr	r1, [r3, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	0099      	lsls	r1, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aaa:	3301      	adds	r3, #1
 8001aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	6809      	ldr	r1, [r1, #0]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69da      	ldr	r2, [r3, #28]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ae2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6911      	ldr	r1, [r2, #16]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68d2      	ldr	r2, [r2, #12]
 8001aee:	4311      	orrs	r1, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	430b      	orrs	r3, r1
 8001af6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	000186a0 	.word	0x000186a0
 8001b50:	001e847f 	.word	0x001e847f
 8001b54:	003d08ff 	.word	0x003d08ff
 8001b58:	431bde83 	.word	0x431bde83
 8001b5c:	10624dd3 	.word	0x10624dd3

08001b60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	607a      	str	r2, [r7, #4]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	817b      	strh	r3, [r7, #10]
 8001b70:	4613      	mov	r3, r2
 8001b72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b74:	f7ff fba8 	bl	80012c8 <HAL_GetTick>
 8001b78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b20      	cmp	r3, #32
 8001b84:	f040 80e0 	bne.w	8001d48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2319      	movs	r3, #25
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4970      	ldr	r1, [pc, #448]	@ (8001d54 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 f964 	bl	8001e60 <I2C_WaitOnFlagUntilTimeout>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e0d3      	b.n	8001d4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_I2C_Master_Transmit+0x50>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e0cc      	b.n	8001d4a <HAL_I2C_Master_Transmit+0x1ea>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d007      	beq.n	8001bd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001be4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2221      	movs	r2, #33	@ 0x21
 8001bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	893a      	ldrh	r2, [r7, #8]
 8001c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	4a50      	ldr	r2, [pc, #320]	@ (8001d58 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c18:	8979      	ldrh	r1, [r7, #10]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	6a3a      	ldr	r2, [r7, #32]
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 f89c 	bl	8001d5c <I2C_MasterRequestWrite>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e08d      	b.n	8001d4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c44:	e066      	b.n	8001d14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	6a39      	ldr	r1, [r7, #32]
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 fa22 	bl	8002094 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00d      	beq.n	8001c72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d107      	bne.n	8001c6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e06b      	b.n	8001d4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c76:	781a      	ldrb	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d11b      	bne.n	8001ce8 <HAL_I2C_Master_Transmit+0x188>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d017      	beq.n	8001ce8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	781a      	ldrb	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	6a39      	ldr	r1, [r7, #32]
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 fa19 	bl	8002124 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00d      	beq.n	8001d14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d107      	bne.n	8001d10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e01a      	b.n	8001d4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d194      	bne.n	8001c46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	e000      	b.n	8001d4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d48:	2302      	movs	r3, #2
  }
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	00100002 	.word	0x00100002
 8001d58:	ffff0000 	.word	0xffff0000

08001d5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d006      	beq.n	8001d86 <I2C_MasterRequestWrite+0x2a>
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d003      	beq.n	8001d86 <I2C_MasterRequestWrite+0x2a>
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d84:	d108      	bne.n	8001d98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e00b      	b.n	8001db0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9c:	2b12      	cmp	r3, #18
 8001d9e:	d107      	bne.n	8001db0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 f84f 	bl	8001e60 <I2C_WaitOnFlagUntilTimeout>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00d      	beq.n	8001de4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dd6:	d103      	bne.n	8001de0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e035      	b.n	8001e50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001dec:	d108      	bne.n	8001e00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dee:	897b      	ldrh	r3, [r7, #10]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001dfc:	611a      	str	r2, [r3, #16]
 8001dfe:	e01b      	b.n	8001e38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e00:	897b      	ldrh	r3, [r7, #10]
 8001e02:	11db      	asrs	r3, r3, #7
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	f003 0306 	and.w	r3, r3, #6
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f063 030f 	orn	r3, r3, #15
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	490e      	ldr	r1, [pc, #56]	@ (8001e58 <I2C_MasterRequestWrite+0xfc>)
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f898 	bl	8001f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e010      	b.n	8001e50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e2e:	897b      	ldrh	r3, [r7, #10]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4907      	ldr	r1, [pc, #28]	@ (8001e5c <I2C_MasterRequestWrite+0x100>)
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f888 	bl	8001f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	00010008 	.word	0x00010008
 8001e5c:	00010002 	.word	0x00010002

08001e60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e70:	e048      	b.n	8001f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e78:	d044      	beq.n	8001f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e7a:	f7ff fa25 	bl	80012c8 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d302      	bcc.n	8001e90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d139      	bne.n	8001f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	0c1b      	lsrs	r3, r3, #16
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d10d      	bne.n	8001eb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	43da      	mvns	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	e00c      	b.n	8001ed0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	43da      	mvns	r2, r3
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d116      	bne.n	8001f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	f043 0220 	orr.w	r2, r3, #32
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e023      	b.n	8001f4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	0c1b      	lsrs	r3, r3, #16
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d10d      	bne.n	8001f2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	43da      	mvns	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	e00c      	b.n	8001f44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	43da      	mvns	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	4013      	ands	r3, r2
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d093      	beq.n	8001e72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f62:	e071      	b.n	8002048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f72:	d123      	bne.n	8001fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2220      	movs	r2, #32
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	f043 0204 	orr.w	r2, r3, #4
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e067      	b.n	800208c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc2:	d041      	beq.n	8002048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc4:	f7ff f980 	bl	80012c8 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d302      	bcc.n	8001fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d136      	bne.n	8002048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	0c1b      	lsrs	r3, r3, #16
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d10c      	bne.n	8001ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	bf14      	ite	ne
 8001ff6:	2301      	movne	r3, #1
 8001ff8:	2300      	moveq	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	e00b      	b.n	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	43da      	mvns	r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	4013      	ands	r3, r2
 800200a:	b29b      	uxth	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d016      	beq.n	8002048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	f043 0220 	orr.w	r2, r3, #32
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e021      	b.n	800208c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	0c1b      	lsrs	r3, r3, #16
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b01      	cmp	r3, #1
 8002050:	d10c      	bne.n	800206c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	43da      	mvns	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	4013      	ands	r3, r2
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf14      	ite	ne
 8002064:	2301      	movne	r3, #1
 8002066:	2300      	moveq	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	e00b      	b.n	8002084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	43da      	mvns	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4013      	ands	r3, r2
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf14      	ite	ne
 800207e:	2301      	movne	r3, #1
 8002080:	2300      	moveq	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	f47f af6d 	bne.w	8001f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020a0:	e034      	b.n	800210c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f886 	bl	80021b4 <I2C_IsAcknowledgeFailed>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e034      	b.n	800211c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b8:	d028      	beq.n	800210c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ba:	f7ff f905 	bl	80012c8 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d302      	bcc.n	80020d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d11d      	bne.n	800210c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020da:	2b80      	cmp	r3, #128	@ 0x80
 80020dc:	d016      	beq.n	800210c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e007      	b.n	800211c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002116:	2b80      	cmp	r3, #128	@ 0x80
 8002118:	d1c3      	bne.n	80020a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002130:	e034      	b.n	800219c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f83e 	bl	80021b4 <I2C_IsAcknowledgeFailed>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e034      	b.n	80021ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d028      	beq.n	800219c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214a:	f7ff f8bd 	bl	80012c8 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	429a      	cmp	r2, r3
 8002158:	d302      	bcc.n	8002160 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d11d      	bne.n	800219c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b04      	cmp	r3, #4
 800216c:	d016      	beq.n	800219c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	f043 0220 	orr.w	r2, r3, #32
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e007      	b.n	80021ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d1c3      	bne.n	8002132 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ca:	d11b      	bne.n	8002204 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f0:	f043 0204 	orr.w	r2, r3, #4
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e272      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8087 	beq.w	800233e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002230:	4b92      	ldr	r3, [pc, #584]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b04      	cmp	r3, #4
 800223a:	d00c      	beq.n	8002256 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800223c:	4b8f      	ldr	r3, [pc, #572]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b08      	cmp	r3, #8
 8002246:	d112      	bne.n	800226e <HAL_RCC_OscConfig+0x5e>
 8002248:	4b8c      	ldr	r3, [pc, #560]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002254:	d10b      	bne.n	800226e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002256:	4b89      	ldr	r3, [pc, #548]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d06c      	beq.n	800233c <HAL_RCC_OscConfig+0x12c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d168      	bne.n	800233c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e24c      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x76>
 8002278:	4b80      	ldr	r3, [pc, #512]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a7f      	ldr	r2, [pc, #508]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 800227e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	e02e      	b.n	80022e4 <HAL_RCC_OscConfig+0xd4>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x98>
 800228e:	4b7b      	ldr	r3, [pc, #492]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a7a      	ldr	r2, [pc, #488]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b78      	ldr	r3, [pc, #480]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a77      	ldr	r2, [pc, #476]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e01d      	b.n	80022e4 <HAL_RCC_OscConfig+0xd4>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0xbc>
 80022b2:	4b72      	ldr	r3, [pc, #456]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a71      	ldr	r2, [pc, #452]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b6f      	ldr	r3, [pc, #444]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a6e      	ldr	r2, [pc, #440]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e00b      	b.n	80022e4 <HAL_RCC_OscConfig+0xd4>
 80022cc:	4b6b      	ldr	r3, [pc, #428]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a6a      	ldr	r2, [pc, #424]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b68      	ldr	r3, [pc, #416]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a67      	ldr	r2, [pc, #412]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d013      	beq.n	8002314 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7fe ffec 	bl	80012c8 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f4:	f7fe ffe8 	bl	80012c8 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	@ 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e200      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	4b5d      	ldr	r3, [pc, #372]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0xe4>
 8002312:	e014      	b.n	800233e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7fe ffd8 	bl	80012c8 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800231c:	f7fe ffd4 	bl	80012c8 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	@ 0x64
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1ec      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	4b53      	ldr	r3, [pc, #332]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x10c>
 800233a:	e000      	b.n	800233e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d063      	beq.n	8002412 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800234a:	4b4c      	ldr	r3, [pc, #304]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002356:	4b49      	ldr	r3, [pc, #292]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b08      	cmp	r3, #8
 8002360:	d11c      	bne.n	800239c <HAL_RCC_OscConfig+0x18c>
 8002362:	4b46      	ldr	r3, [pc, #280]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d116      	bne.n	800239c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	4b43      	ldr	r3, [pc, #268]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_RCC_OscConfig+0x176>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e1c0      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002386:	4b3d      	ldr	r3, [pc, #244]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4939      	ldr	r1, [pc, #228]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239a:	e03a      	b.n	8002412 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d020      	beq.n	80023e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a4:	4b36      	ldr	r3, [pc, #216]	@ (8002480 <HAL_RCC_OscConfig+0x270>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe ff8d 	bl	80012c8 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b2:	f7fe ff89 	bl	80012c8 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e1a1      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	4b2d      	ldr	r3, [pc, #180]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d0:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4927      	ldr	r1, [pc, #156]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]
 80023e4:	e015      	b.n	8002412 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e6:	4b26      	ldr	r3, [pc, #152]	@ (8002480 <HAL_RCC_OscConfig+0x270>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe ff6c 	bl	80012c8 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f4:	f7fe ff68 	bl	80012c8 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e180      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	4b1d      	ldr	r3, [pc, #116]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d03a      	beq.n	8002494 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d019      	beq.n	800245a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002426:	4b17      	ldr	r3, [pc, #92]	@ (8002484 <HAL_RCC_OscConfig+0x274>)
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242c:	f7fe ff4c 	bl	80012c8 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002434:	f7fe ff48 	bl	80012c8 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e160      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002446:	4b0d      	ldr	r3, [pc, #52]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002452:	2001      	movs	r0, #1
 8002454:	f000 faba 	bl	80029cc <RCC_Delay>
 8002458:	e01c      	b.n	8002494 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800245a:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <HAL_RCC_OscConfig+0x274>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002460:	f7fe ff32 	bl	80012c8 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002466:	e00f      	b.n	8002488 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002468:	f7fe ff2e 	bl	80012c8 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d908      	bls.n	8002488 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e146      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
 800247a:	bf00      	nop
 800247c:	40021000 	.word	0x40021000
 8002480:	42420000 	.word	0x42420000
 8002484:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002488:	4b92      	ldr	r3, [pc, #584]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1e9      	bne.n	8002468 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80a6 	beq.w	80025ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a6:	4b8b      	ldr	r3, [pc, #556]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10d      	bne.n	80024ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	4b88      	ldr	r3, [pc, #544]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	4a87      	ldr	r2, [pc, #540]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024bc:	61d3      	str	r3, [r2, #28]
 80024be:	4b85      	ldr	r3, [pc, #532]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ca:	2301      	movs	r3, #1
 80024cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ce:	4b82      	ldr	r3, [pc, #520]	@ (80026d8 <HAL_RCC_OscConfig+0x4c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d118      	bne.n	800250c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024da:	4b7f      	ldr	r3, [pc, #508]	@ (80026d8 <HAL_RCC_OscConfig+0x4c8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a7e      	ldr	r2, [pc, #504]	@ (80026d8 <HAL_RCC_OscConfig+0x4c8>)
 80024e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e6:	f7fe feef 	bl	80012c8 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ee:	f7fe feeb 	bl	80012c8 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b64      	cmp	r3, #100	@ 0x64
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e103      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002500:	4b75      	ldr	r3, [pc, #468]	@ (80026d8 <HAL_RCC_OscConfig+0x4c8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0x312>
 8002514:	4b6f      	ldr	r3, [pc, #444]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4a6e      	ldr	r2, [pc, #440]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6213      	str	r3, [r2, #32]
 8002520:	e02d      	b.n	800257e <HAL_RCC_OscConfig+0x36e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x334>
 800252a:	4b6a      	ldr	r3, [pc, #424]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4a69      	ldr	r2, [pc, #420]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	6213      	str	r3, [r2, #32]
 8002536:	4b67      	ldr	r3, [pc, #412]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4a66      	ldr	r2, [pc, #408]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	6213      	str	r3, [r2, #32]
 8002542:	e01c      	b.n	800257e <HAL_RCC_OscConfig+0x36e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d10c      	bne.n	8002566 <HAL_RCC_OscConfig+0x356>
 800254c:	4b61      	ldr	r3, [pc, #388]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4a60      	ldr	r2, [pc, #384]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	6213      	str	r3, [r2, #32]
 8002558:	4b5e      	ldr	r3, [pc, #376]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	4a5d      	ldr	r2, [pc, #372]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6213      	str	r3, [r2, #32]
 8002564:	e00b      	b.n	800257e <HAL_RCC_OscConfig+0x36e>
 8002566:	4b5b      	ldr	r3, [pc, #364]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4a5a      	ldr	r2, [pc, #360]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6213      	str	r3, [r2, #32]
 8002572:	4b58      	ldr	r3, [pc, #352]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a57      	ldr	r2, [pc, #348]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d015      	beq.n	80025b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002586:	f7fe fe9f 	bl	80012c8 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe fe9b 	bl	80012c8 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0b1      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	4b4b      	ldr	r3, [pc, #300]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ee      	beq.n	800258e <HAL_RCC_OscConfig+0x37e>
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7fe fe89 	bl	80012c8 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe fe85 	bl	80012c8 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e09b      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	4b40      	ldr	r3, [pc, #256]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ee      	bne.n	80025ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d105      	bne.n	80025ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e2:	4b3c      	ldr	r3, [pc, #240]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4a3b      	ldr	r2, [pc, #236]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8087 	beq.w	8002706 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f8:	4b36      	ldr	r3, [pc, #216]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d061      	beq.n	80026c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d146      	bne.n	800269a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b33      	ldr	r3, [pc, #204]	@ (80026dc <HAL_RCC_OscConfig+0x4cc>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7fe fe59 	bl	80012c8 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261a:	f7fe fe55 	bl	80012c8 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e06d      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262c:	4b29      	ldr	r3, [pc, #164]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002640:	d108      	bne.n	8002654 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002642:	4b24      	ldr	r3, [pc, #144]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	4921      	ldr	r1, [pc, #132]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002654:	4b1f      	ldr	r3, [pc, #124]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a19      	ldr	r1, [r3, #32]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002664:	430b      	orrs	r3, r1
 8002666:	491b      	ldr	r1, [pc, #108]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800266c:	4b1b      	ldr	r3, [pc, #108]	@ (80026dc <HAL_RCC_OscConfig+0x4cc>)
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7fe fe29 	bl	80012c8 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267a:	f7fe fe25 	bl	80012c8 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e03d      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800268c:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x46a>
 8002698:	e035      	b.n	8002706 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269a:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <HAL_RCC_OscConfig+0x4cc>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7fe fe12 	bl	80012c8 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a8:	f7fe fe0e 	bl	80012c8 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e026      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ba:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x498>
 80026c6:	e01e      	b.n	8002706 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d107      	bne.n	80026e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e019      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40007000 	.word	0x40007000
 80026dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <HAL_RCC_OscConfig+0x500>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d001      	beq.n	8002706 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000

08002714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0d0      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b6a      	ldr	r3, [pc, #424]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d910      	bls.n	8002758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b67      	ldr	r3, [pc, #412]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 0207 	bic.w	r2, r3, #7
 800273e:	4965      	ldr	r1, [pc, #404]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b63      	ldr	r3, [pc, #396]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0b8      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d020      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002770:	4b59      	ldr	r3, [pc, #356]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a58      	ldr	r2, [pc, #352]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800277a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002788:	4b53      	ldr	r3, [pc, #332]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a52      	ldr	r2, [pc, #328]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002792:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002794:	4b50      	ldr	r3, [pc, #320]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	494d      	ldr	r1, [pc, #308]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d040      	beq.n	8002834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	4b47      	ldr	r3, [pc, #284]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d115      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e07f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d2:	4b41      	ldr	r3, [pc, #260]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e073      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e2:	4b3d      	ldr	r3, [pc, #244]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e06b      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f2:	4b39      	ldr	r3, [pc, #228]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4936      	ldr	r1, [pc, #216]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002804:	f7fe fd60 	bl	80012c8 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	e00a      	b.n	8002822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280c:	f7fe fd5c 	bl	80012c8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e053      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	4b2d      	ldr	r3, [pc, #180]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 020c 	and.w	r2, r3, #12
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	429a      	cmp	r2, r3
 8002832:	d1eb      	bne.n	800280c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002834:	4b27      	ldr	r3, [pc, #156]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d210      	bcs.n	8002864 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b24      	ldr	r3, [pc, #144]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 0207 	bic.w	r2, r3, #7
 800284a:	4922      	ldr	r1, [pc, #136]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b20      	ldr	r3, [pc, #128]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e032      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002870:	4b19      	ldr	r3, [pc, #100]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4916      	ldr	r1, [pc, #88]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800288e:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	490e      	ldr	r1, [pc, #56]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028a2:	f000 f821 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 80028a6:	4602      	mov	r2, r0
 80028a8:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	490a      	ldr	r1, [pc, #40]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80028b4:	5ccb      	ldrb	r3, [r1, r3]
 80028b6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ba:	4a09      	ldr	r2, [pc, #36]	@ (80028e0 <HAL_RCC_ClockConfig+0x1cc>)
 80028bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028be:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <HAL_RCC_ClockConfig+0x1d0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fcbe 	bl	8001244 <HAL_InitTick>

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40022000 	.word	0x40022000
 80028d8:	40021000 	.word	0x40021000
 80028dc:	08003b5c 	.word	0x08003b5c
 80028e0:	2000004c 	.word	0x2000004c
 80028e4:	20000050 	.word	0x20000050

080028e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002902:	4b1e      	ldr	r3, [pc, #120]	@ (800297c <HAL_RCC_GetSysClockFreq+0x94>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b04      	cmp	r3, #4
 8002910:	d002      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x30>
 8002912:	2b08      	cmp	r3, #8
 8002914:	d003      	beq.n	800291e <HAL_RCC_GetSysClockFreq+0x36>
 8002916:	e027      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002918:	4b19      	ldr	r3, [pc, #100]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x98>)
 800291a:	613b      	str	r3, [r7, #16]
      break;
 800291c:	e027      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	0c9b      	lsrs	r3, r3, #18
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	4a17      	ldr	r2, [pc, #92]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002928:	5cd3      	ldrb	r3, [r2, r3]
 800292a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d010      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002936:	4b11      	ldr	r3, [pc, #68]	@ (800297c <HAL_RCC_GetSysClockFreq+0x94>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	0c5b      	lsrs	r3, r3, #17
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	4a11      	ldr	r2, [pc, #68]	@ (8002988 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002942:	5cd3      	ldrb	r3, [r2, r3]
 8002944:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a0d      	ldr	r2, [pc, #52]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x98>)
 800294a:	fb03 f202 	mul.w	r2, r3, r2
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e004      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a0c      	ldr	r2, [pc, #48]	@ (800298c <HAL_RCC_GetSysClockFreq+0xa4>)
 800295c:	fb02 f303 	mul.w	r3, r2, r3
 8002960:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	613b      	str	r3, [r7, #16]
      break;
 8002966:	e002      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002968:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x98>)
 800296a:	613b      	str	r3, [r7, #16]
      break;
 800296c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296e:	693b      	ldr	r3, [r7, #16]
}
 8002970:	4618      	mov	r0, r3
 8002972:	371c      	adds	r7, #28
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000
 8002980:	007a1200 	.word	0x007a1200
 8002984:	08003b74 	.word	0x08003b74
 8002988:	08003b84 	.word	0x08003b84
 800298c:	003d0900 	.word	0x003d0900

08002990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002994:	4b02      	ldr	r3, [pc, #8]	@ (80029a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	2000004c 	.word	0x2000004c

080029a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029a8:	f7ff fff2 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 80029ac:	4602      	mov	r2, r0
 80029ae:	4b05      	ldr	r3, [pc, #20]	@ (80029c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	0a1b      	lsrs	r3, r3, #8
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	4903      	ldr	r1, [pc, #12]	@ (80029c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ba:	5ccb      	ldrb	r3, [r1, r3]
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000
 80029c8:	08003b6c 	.word	0x08003b6c

080029cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a00 <RCC_Delay+0x34>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002a04 <RCC_Delay+0x38>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	0a5b      	lsrs	r3, r3, #9
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029e8:	bf00      	nop
  }
  while (Delay --);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1e5a      	subs	r2, r3, #1
 80029ee:	60fa      	str	r2, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f9      	bne.n	80029e8 <RCC_Delay+0x1c>
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	2000004c 	.word	0x2000004c
 8002a04:	10624dd3 	.word	0x10624dd3

08002a08 <__assert_func>:
 8002a08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002a0a:	4614      	mov	r4, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b09      	ldr	r3, [pc, #36]	@ (8002a34 <__assert_func+0x2c>)
 8002a10:	4605      	mov	r5, r0
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68d8      	ldr	r0, [r3, #12]
 8002a16:	b954      	cbnz	r4, 8002a2e <__assert_func+0x26>
 8002a18:	4b07      	ldr	r3, [pc, #28]	@ (8002a38 <__assert_func+0x30>)
 8002a1a:	461c      	mov	r4, r3
 8002a1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002a20:	9100      	str	r1, [sp, #0]
 8002a22:	462b      	mov	r3, r5
 8002a24:	4905      	ldr	r1, [pc, #20]	@ (8002a3c <__assert_func+0x34>)
 8002a26:	f000 f91f 	bl	8002c68 <fiprintf>
 8002a2a:	f000 fa1a 	bl	8002e62 <abort>
 8002a2e:	4b04      	ldr	r3, [pc, #16]	@ (8002a40 <__assert_func+0x38>)
 8002a30:	e7f4      	b.n	8002a1c <__assert_func+0x14>
 8002a32:	bf00      	nop
 8002a34:	20000064 	.word	0x20000064
 8002a38:	08003bc1 	.word	0x08003bc1
 8002a3c:	08003b93 	.word	0x08003b93
 8002a40:	08003b86 	.word	0x08003b86

08002a44 <exit>:
 8002a44:	b508      	push	{r3, lr}
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <exit+0x1c>)
 8002a48:	4604      	mov	r4, r0
 8002a4a:	b113      	cbz	r3, 8002a52 <exit+0xe>
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	f3af 8000 	nop.w
 8002a52:	4b04      	ldr	r3, [pc, #16]	@ (8002a64 <exit+0x20>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	b103      	cbz	r3, 8002a5a <exit+0x16>
 8002a58:	4798      	blx	r3
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	f7fe fb05 	bl	800106a <_exit>
 8002a60:	00000000 	.word	0x00000000
 8002a64:	2000081c 	.word	0x2000081c

08002a68 <__itoa>:
 8002a68:	1e93      	subs	r3, r2, #2
 8002a6a:	2b22      	cmp	r3, #34	@ 0x22
 8002a6c:	b510      	push	{r4, lr}
 8002a6e:	460c      	mov	r4, r1
 8002a70:	d904      	bls.n	8002a7c <__itoa+0x14>
 8002a72:	2300      	movs	r3, #0
 8002a74:	461c      	mov	r4, r3
 8002a76:	700b      	strb	r3, [r1, #0]
 8002a78:	4620      	mov	r0, r4
 8002a7a:	bd10      	pop	{r4, pc}
 8002a7c:	2a0a      	cmp	r2, #10
 8002a7e:	d109      	bne.n	8002a94 <__itoa+0x2c>
 8002a80:	2800      	cmp	r0, #0
 8002a82:	da07      	bge.n	8002a94 <__itoa+0x2c>
 8002a84:	232d      	movs	r3, #45	@ 0x2d
 8002a86:	700b      	strb	r3, [r1, #0]
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4240      	negs	r0, r0
 8002a8c:	4421      	add	r1, r4
 8002a8e:	f000 f805 	bl	8002a9c <__utoa>
 8002a92:	e7f1      	b.n	8002a78 <__itoa+0x10>
 8002a94:	2100      	movs	r1, #0
 8002a96:	e7f9      	b.n	8002a8c <__itoa+0x24>

08002a98 <itoa>:
 8002a98:	f7ff bfe6 	b.w	8002a68 <__itoa>

08002a9c <__utoa>:
 8002a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a9e:	b08b      	sub	sp, #44	@ 0x2c
 8002aa0:	4605      	mov	r5, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	466e      	mov	r6, sp
 8002aa6:	4c1d      	ldr	r4, [pc, #116]	@ (8002b1c <__utoa+0x80>)
 8002aa8:	f104 0c20 	add.w	ip, r4, #32
 8002aac:	4637      	mov	r7, r6
 8002aae:	6820      	ldr	r0, [r4, #0]
 8002ab0:	6861      	ldr	r1, [r4, #4]
 8002ab2:	3408      	adds	r4, #8
 8002ab4:	c703      	stmia	r7!, {r0, r1}
 8002ab6:	4564      	cmp	r4, ip
 8002ab8:	463e      	mov	r6, r7
 8002aba:	d1f7      	bne.n	8002aac <__utoa+0x10>
 8002abc:	7921      	ldrb	r1, [r4, #4]
 8002abe:	6820      	ldr	r0, [r4, #0]
 8002ac0:	7139      	strb	r1, [r7, #4]
 8002ac2:	1e91      	subs	r1, r2, #2
 8002ac4:	2922      	cmp	r1, #34	@ 0x22
 8002ac6:	6038      	str	r0, [r7, #0]
 8002ac8:	f04f 0100 	mov.w	r1, #0
 8002acc:	d904      	bls.n	8002ad8 <__utoa+0x3c>
 8002ace:	7019      	strb	r1, [r3, #0]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	b00b      	add	sp, #44	@ 0x2c
 8002ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad8:	1e58      	subs	r0, r3, #1
 8002ada:	4684      	mov	ip, r0
 8002adc:	fbb5 f7f2 	udiv	r7, r5, r2
 8002ae0:	fb02 5617 	mls	r6, r2, r7, r5
 8002ae4:	3628      	adds	r6, #40	@ 0x28
 8002ae6:	446e      	add	r6, sp
 8002ae8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002aec:	460c      	mov	r4, r1
 8002aee:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8002af2:	462e      	mov	r6, r5
 8002af4:	42b2      	cmp	r2, r6
 8002af6:	463d      	mov	r5, r7
 8002af8:	f101 0101 	add.w	r1, r1, #1
 8002afc:	d9ee      	bls.n	8002adc <__utoa+0x40>
 8002afe:	2200      	movs	r2, #0
 8002b00:	545a      	strb	r2, [r3, r1]
 8002b02:	1919      	adds	r1, r3, r4
 8002b04:	1aa5      	subs	r5, r4, r2
 8002b06:	42aa      	cmp	r2, r5
 8002b08:	dae3      	bge.n	8002ad2 <__utoa+0x36>
 8002b0a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002b0e:	780e      	ldrb	r6, [r1, #0]
 8002b10:	3201      	adds	r2, #1
 8002b12:	7006      	strb	r6, [r0, #0]
 8002b14:	f801 5901 	strb.w	r5, [r1], #-1
 8002b18:	e7f4      	b.n	8002b04 <__utoa+0x68>
 8002b1a:	bf00      	nop
 8002b1c:	08003bc2 	.word	0x08003bc2

08002b20 <std>:
 8002b20:	2300      	movs	r3, #0
 8002b22:	b510      	push	{r4, lr}
 8002b24:	4604      	mov	r4, r0
 8002b26:	e9c0 3300 	strd	r3, r3, [r0]
 8002b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b2e:	6083      	str	r3, [r0, #8]
 8002b30:	8181      	strh	r1, [r0, #12]
 8002b32:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b34:	81c2      	strh	r2, [r0, #14]
 8002b36:	6183      	str	r3, [r0, #24]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	305c      	adds	r0, #92	@ 0x5c
 8002b3e:	f000 f906 	bl	8002d4e <memset>
 8002b42:	4b0d      	ldr	r3, [pc, #52]	@ (8002b78 <std+0x58>)
 8002b44:	6224      	str	r4, [r4, #32]
 8002b46:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b48:	4b0c      	ldr	r3, [pc, #48]	@ (8002b7c <std+0x5c>)
 8002b4a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <std+0x60>)
 8002b4e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b50:	4b0c      	ldr	r3, [pc, #48]	@ (8002b84 <std+0x64>)
 8002b52:	6323      	str	r3, [r4, #48]	@ 0x30
 8002b54:	4b0c      	ldr	r3, [pc, #48]	@ (8002b88 <std+0x68>)
 8002b56:	429c      	cmp	r4, r3
 8002b58:	d006      	beq.n	8002b68 <std+0x48>
 8002b5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002b5e:	4294      	cmp	r4, r2
 8002b60:	d002      	beq.n	8002b68 <std+0x48>
 8002b62:	33d0      	adds	r3, #208	@ 0xd0
 8002b64:	429c      	cmp	r4, r3
 8002b66:	d105      	bne.n	8002b74 <std+0x54>
 8002b68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b70:	f000 b974 	b.w	8002e5c <__retarget_lock_init_recursive>
 8002b74:	bd10      	pop	{r4, pc}
 8002b76:	bf00      	nop
 8002b78:	08002cc9 	.word	0x08002cc9
 8002b7c:	08002ceb 	.word	0x08002ceb
 8002b80:	08002d23 	.word	0x08002d23
 8002b84:	08002d47 	.word	0x08002d47
 8002b88:	200006e4 	.word	0x200006e4

08002b8c <stdio_exit_handler>:
 8002b8c:	4a02      	ldr	r2, [pc, #8]	@ (8002b98 <stdio_exit_handler+0xc>)
 8002b8e:	4903      	ldr	r1, [pc, #12]	@ (8002b9c <stdio_exit_handler+0x10>)
 8002b90:	4803      	ldr	r0, [pc, #12]	@ (8002ba0 <stdio_exit_handler+0x14>)
 8002b92:	f000 b87b 	b.w	8002c8c <_fwalk_sglue>
 8002b96:	bf00      	nop
 8002b98:	20000058 	.word	0x20000058
 8002b9c:	08003701 	.word	0x08003701
 8002ba0:	20000068 	.word	0x20000068

08002ba4 <cleanup_stdio>:
 8002ba4:	6841      	ldr	r1, [r0, #4]
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd8 <cleanup_stdio+0x34>)
 8002ba8:	b510      	push	{r4, lr}
 8002baa:	4299      	cmp	r1, r3
 8002bac:	4604      	mov	r4, r0
 8002bae:	d001      	beq.n	8002bb4 <cleanup_stdio+0x10>
 8002bb0:	f000 fda6 	bl	8003700 <_fflush_r>
 8002bb4:	68a1      	ldr	r1, [r4, #8]
 8002bb6:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <cleanup_stdio+0x38>)
 8002bb8:	4299      	cmp	r1, r3
 8002bba:	d002      	beq.n	8002bc2 <cleanup_stdio+0x1e>
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f000 fd9f 	bl	8003700 <_fflush_r>
 8002bc2:	68e1      	ldr	r1, [r4, #12]
 8002bc4:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <cleanup_stdio+0x3c>)
 8002bc6:	4299      	cmp	r1, r3
 8002bc8:	d004      	beq.n	8002bd4 <cleanup_stdio+0x30>
 8002bca:	4620      	mov	r0, r4
 8002bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bd0:	f000 bd96 	b.w	8003700 <_fflush_r>
 8002bd4:	bd10      	pop	{r4, pc}
 8002bd6:	bf00      	nop
 8002bd8:	200006e4 	.word	0x200006e4
 8002bdc:	2000074c 	.word	0x2000074c
 8002be0:	200007b4 	.word	0x200007b4

08002be4 <global_stdio_init.part.0>:
 8002be4:	b510      	push	{r4, lr}
 8002be6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <global_stdio_init.part.0+0x30>)
 8002be8:	4c0b      	ldr	r4, [pc, #44]	@ (8002c18 <global_stdio_init.part.0+0x34>)
 8002bea:	4a0c      	ldr	r2, [pc, #48]	@ (8002c1c <global_stdio_init.part.0+0x38>)
 8002bec:	4620      	mov	r0, r4
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	2104      	movs	r1, #4
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f7ff ff94 	bl	8002b20 <std>
 8002bf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	2109      	movs	r1, #9
 8002c00:	f7ff ff8e 	bl	8002b20 <std>
 8002c04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c08:	2202      	movs	r2, #2
 8002c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c0e:	2112      	movs	r1, #18
 8002c10:	f7ff bf86 	b.w	8002b20 <std>
 8002c14:	2000081c 	.word	0x2000081c
 8002c18:	200006e4 	.word	0x200006e4
 8002c1c:	08002b8d 	.word	0x08002b8d

08002c20 <__sfp_lock_acquire>:
 8002c20:	4801      	ldr	r0, [pc, #4]	@ (8002c28 <__sfp_lock_acquire+0x8>)
 8002c22:	f000 b91c 	b.w	8002e5e <__retarget_lock_acquire_recursive>
 8002c26:	bf00      	nop
 8002c28:	20000825 	.word	0x20000825

08002c2c <__sfp_lock_release>:
 8002c2c:	4801      	ldr	r0, [pc, #4]	@ (8002c34 <__sfp_lock_release+0x8>)
 8002c2e:	f000 b917 	b.w	8002e60 <__retarget_lock_release_recursive>
 8002c32:	bf00      	nop
 8002c34:	20000825 	.word	0x20000825

08002c38 <__sinit>:
 8002c38:	b510      	push	{r4, lr}
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	f7ff fff0 	bl	8002c20 <__sfp_lock_acquire>
 8002c40:	6a23      	ldr	r3, [r4, #32]
 8002c42:	b11b      	cbz	r3, 8002c4c <__sinit+0x14>
 8002c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c48:	f7ff bff0 	b.w	8002c2c <__sfp_lock_release>
 8002c4c:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <__sinit+0x28>)
 8002c4e:	6223      	str	r3, [r4, #32]
 8002c50:	4b04      	ldr	r3, [pc, #16]	@ (8002c64 <__sinit+0x2c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f5      	bne.n	8002c44 <__sinit+0xc>
 8002c58:	f7ff ffc4 	bl	8002be4 <global_stdio_init.part.0>
 8002c5c:	e7f2      	b.n	8002c44 <__sinit+0xc>
 8002c5e:	bf00      	nop
 8002c60:	08002ba5 	.word	0x08002ba5
 8002c64:	2000081c 	.word	0x2000081c

08002c68 <fiprintf>:
 8002c68:	b40e      	push	{r1, r2, r3}
 8002c6a:	b503      	push	{r0, r1, lr}
 8002c6c:	4601      	mov	r1, r0
 8002c6e:	ab03      	add	r3, sp, #12
 8002c70:	4805      	ldr	r0, [pc, #20]	@ (8002c88 <fiprintf+0x20>)
 8002c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c76:	6800      	ldr	r0, [r0, #0]
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	f000 fa17 	bl	80030ac <_vfiprintf_r>
 8002c7e:	b002      	add	sp, #8
 8002c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c84:	b003      	add	sp, #12
 8002c86:	4770      	bx	lr
 8002c88:	20000064 	.word	0x20000064

08002c8c <_fwalk_sglue>:
 8002c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c90:	4607      	mov	r7, r0
 8002c92:	4688      	mov	r8, r1
 8002c94:	4614      	mov	r4, r2
 8002c96:	2600      	movs	r6, #0
 8002c98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c9c:	f1b9 0901 	subs.w	r9, r9, #1
 8002ca0:	d505      	bpl.n	8002cae <_fwalk_sglue+0x22>
 8002ca2:	6824      	ldr	r4, [r4, #0]
 8002ca4:	2c00      	cmp	r4, #0
 8002ca6:	d1f7      	bne.n	8002c98 <_fwalk_sglue+0xc>
 8002ca8:	4630      	mov	r0, r6
 8002caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cae:	89ab      	ldrh	r3, [r5, #12]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d907      	bls.n	8002cc4 <_fwalk_sglue+0x38>
 8002cb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	d003      	beq.n	8002cc4 <_fwalk_sglue+0x38>
 8002cbc:	4629      	mov	r1, r5
 8002cbe:	4638      	mov	r0, r7
 8002cc0:	47c0      	blx	r8
 8002cc2:	4306      	orrs	r6, r0
 8002cc4:	3568      	adds	r5, #104	@ 0x68
 8002cc6:	e7e9      	b.n	8002c9c <_fwalk_sglue+0x10>

08002cc8 <__sread>:
 8002cc8:	b510      	push	{r4, lr}
 8002cca:	460c      	mov	r4, r1
 8002ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cd0:	f000 f876 	bl	8002dc0 <_read_r>
 8002cd4:	2800      	cmp	r0, #0
 8002cd6:	bfab      	itete	ge
 8002cd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002cda:	89a3      	ldrhlt	r3, [r4, #12]
 8002cdc:	181b      	addge	r3, r3, r0
 8002cde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002ce2:	bfac      	ite	ge
 8002ce4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002ce6:	81a3      	strhlt	r3, [r4, #12]
 8002ce8:	bd10      	pop	{r4, pc}

08002cea <__swrite>:
 8002cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cee:	461f      	mov	r7, r3
 8002cf0:	898b      	ldrh	r3, [r1, #12]
 8002cf2:	4605      	mov	r5, r0
 8002cf4:	05db      	lsls	r3, r3, #23
 8002cf6:	460c      	mov	r4, r1
 8002cf8:	4616      	mov	r6, r2
 8002cfa:	d505      	bpl.n	8002d08 <__swrite+0x1e>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d04:	f000 f84a 	bl	8002d9c <_lseek_r>
 8002d08:	89a3      	ldrh	r3, [r4, #12]
 8002d0a:	4632      	mov	r2, r6
 8002d0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d10:	81a3      	strh	r3, [r4, #12]
 8002d12:	4628      	mov	r0, r5
 8002d14:	463b      	mov	r3, r7
 8002d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d1e:	f000 b861 	b.w	8002de4 <_write_r>

08002d22 <__sseek>:
 8002d22:	b510      	push	{r4, lr}
 8002d24:	460c      	mov	r4, r1
 8002d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d2a:	f000 f837 	bl	8002d9c <_lseek_r>
 8002d2e:	1c43      	adds	r3, r0, #1
 8002d30:	89a3      	ldrh	r3, [r4, #12]
 8002d32:	bf15      	itete	ne
 8002d34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002d36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002d3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002d3e:	81a3      	strheq	r3, [r4, #12]
 8002d40:	bf18      	it	ne
 8002d42:	81a3      	strhne	r3, [r4, #12]
 8002d44:	bd10      	pop	{r4, pc}

08002d46 <__sclose>:
 8002d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d4a:	f000 b817 	b.w	8002d7c <_close_r>

08002d4e <memset>:
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4402      	add	r2, r0
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d100      	bne.n	8002d58 <memset+0xa>
 8002d56:	4770      	bx	lr
 8002d58:	f803 1b01 	strb.w	r1, [r3], #1
 8002d5c:	e7f9      	b.n	8002d52 <memset+0x4>

08002d5e <strcat>:
 8002d5e:	4602      	mov	r2, r0
 8002d60:	b510      	push	{r4, lr}
 8002d62:	7814      	ldrb	r4, [r2, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	3201      	adds	r2, #1
 8002d68:	2c00      	cmp	r4, #0
 8002d6a:	d1fa      	bne.n	8002d62 <strcat+0x4>
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d76:	2a00      	cmp	r2, #0
 8002d78:	d1f9      	bne.n	8002d6e <strcat+0x10>
 8002d7a:	bd10      	pop	{r4, pc}

08002d7c <_close_r>:
 8002d7c:	b538      	push	{r3, r4, r5, lr}
 8002d7e:	2300      	movs	r3, #0
 8002d80:	4d05      	ldr	r5, [pc, #20]	@ (8002d98 <_close_r+0x1c>)
 8002d82:	4604      	mov	r4, r0
 8002d84:	4608      	mov	r0, r1
 8002d86:	602b      	str	r3, [r5, #0]
 8002d88:	f7fe f9b3 	bl	80010f2 <_close>
 8002d8c:	1c43      	adds	r3, r0, #1
 8002d8e:	d102      	bne.n	8002d96 <_close_r+0x1a>
 8002d90:	682b      	ldr	r3, [r5, #0]
 8002d92:	b103      	cbz	r3, 8002d96 <_close_r+0x1a>
 8002d94:	6023      	str	r3, [r4, #0]
 8002d96:	bd38      	pop	{r3, r4, r5, pc}
 8002d98:	20000820 	.word	0x20000820

08002d9c <_lseek_r>:
 8002d9c:	b538      	push	{r3, r4, r5, lr}
 8002d9e:	4604      	mov	r4, r0
 8002da0:	4608      	mov	r0, r1
 8002da2:	4611      	mov	r1, r2
 8002da4:	2200      	movs	r2, #0
 8002da6:	4d05      	ldr	r5, [pc, #20]	@ (8002dbc <_lseek_r+0x20>)
 8002da8:	602a      	str	r2, [r5, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f7fe f9c5 	bl	800113a <_lseek>
 8002db0:	1c43      	adds	r3, r0, #1
 8002db2:	d102      	bne.n	8002dba <_lseek_r+0x1e>
 8002db4:	682b      	ldr	r3, [r5, #0]
 8002db6:	b103      	cbz	r3, 8002dba <_lseek_r+0x1e>
 8002db8:	6023      	str	r3, [r4, #0]
 8002dba:	bd38      	pop	{r3, r4, r5, pc}
 8002dbc:	20000820 	.word	0x20000820

08002dc0 <_read_r>:
 8002dc0:	b538      	push	{r3, r4, r5, lr}
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	4608      	mov	r0, r1
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	2200      	movs	r2, #0
 8002dca:	4d05      	ldr	r5, [pc, #20]	@ (8002de0 <_read_r+0x20>)
 8002dcc:	602a      	str	r2, [r5, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f7fe f956 	bl	8001080 <_read>
 8002dd4:	1c43      	adds	r3, r0, #1
 8002dd6:	d102      	bne.n	8002dde <_read_r+0x1e>
 8002dd8:	682b      	ldr	r3, [r5, #0]
 8002dda:	b103      	cbz	r3, 8002dde <_read_r+0x1e>
 8002ddc:	6023      	str	r3, [r4, #0]
 8002dde:	bd38      	pop	{r3, r4, r5, pc}
 8002de0:	20000820 	.word	0x20000820

08002de4 <_write_r>:
 8002de4:	b538      	push	{r3, r4, r5, lr}
 8002de6:	4604      	mov	r4, r0
 8002de8:	4608      	mov	r0, r1
 8002dea:	4611      	mov	r1, r2
 8002dec:	2200      	movs	r2, #0
 8002dee:	4d05      	ldr	r5, [pc, #20]	@ (8002e04 <_write_r+0x20>)
 8002df0:	602a      	str	r2, [r5, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	f7fe f961 	bl	80010ba <_write>
 8002df8:	1c43      	adds	r3, r0, #1
 8002dfa:	d102      	bne.n	8002e02 <_write_r+0x1e>
 8002dfc:	682b      	ldr	r3, [r5, #0]
 8002dfe:	b103      	cbz	r3, 8002e02 <_write_r+0x1e>
 8002e00:	6023      	str	r3, [r4, #0]
 8002e02:	bd38      	pop	{r3, r4, r5, pc}
 8002e04:	20000820 	.word	0x20000820

08002e08 <__errno>:
 8002e08:	4b01      	ldr	r3, [pc, #4]	@ (8002e10 <__errno+0x8>)
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	20000064 	.word	0x20000064

08002e14 <__libc_init_array>:
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	2600      	movs	r6, #0
 8002e18:	4d0c      	ldr	r5, [pc, #48]	@ (8002e4c <__libc_init_array+0x38>)
 8002e1a:	4c0d      	ldr	r4, [pc, #52]	@ (8002e50 <__libc_init_array+0x3c>)
 8002e1c:	1b64      	subs	r4, r4, r5
 8002e1e:	10a4      	asrs	r4, r4, #2
 8002e20:	42a6      	cmp	r6, r4
 8002e22:	d109      	bne.n	8002e38 <__libc_init_array+0x24>
 8002e24:	f000 fe0e 	bl	8003a44 <_init>
 8002e28:	2600      	movs	r6, #0
 8002e2a:	4d0a      	ldr	r5, [pc, #40]	@ (8002e54 <__libc_init_array+0x40>)
 8002e2c:	4c0a      	ldr	r4, [pc, #40]	@ (8002e58 <__libc_init_array+0x44>)
 8002e2e:	1b64      	subs	r4, r4, r5
 8002e30:	10a4      	asrs	r4, r4, #2
 8002e32:	42a6      	cmp	r6, r4
 8002e34:	d105      	bne.n	8002e42 <__libc_init_array+0x2e>
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
 8002e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e3c:	4798      	blx	r3
 8002e3e:	3601      	adds	r6, #1
 8002e40:	e7ee      	b.n	8002e20 <__libc_init_array+0xc>
 8002e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e46:	4798      	blx	r3
 8002e48:	3601      	adds	r6, #1
 8002e4a:	e7f2      	b.n	8002e32 <__libc_init_array+0x1e>
 8002e4c:	08003c24 	.word	0x08003c24
 8002e50:	08003c24 	.word	0x08003c24
 8002e54:	08003c24 	.word	0x08003c24
 8002e58:	08003c28 	.word	0x08003c28

08002e5c <__retarget_lock_init_recursive>:
 8002e5c:	4770      	bx	lr

08002e5e <__retarget_lock_acquire_recursive>:
 8002e5e:	4770      	bx	lr

08002e60 <__retarget_lock_release_recursive>:
 8002e60:	4770      	bx	lr

08002e62 <abort>:
 8002e62:	2006      	movs	r0, #6
 8002e64:	b508      	push	{r3, lr}
 8002e66:	f000 fd2f 	bl	80038c8 <raise>
 8002e6a:	2001      	movs	r0, #1
 8002e6c:	f7fe f8fd 	bl	800106a <_exit>

08002e70 <_free_r>:
 8002e70:	b538      	push	{r3, r4, r5, lr}
 8002e72:	4605      	mov	r5, r0
 8002e74:	2900      	cmp	r1, #0
 8002e76:	d040      	beq.n	8002efa <_free_r+0x8a>
 8002e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e7c:	1f0c      	subs	r4, r1, #4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bfb8      	it	lt
 8002e82:	18e4      	addlt	r4, r4, r3
 8002e84:	f000 f8de 	bl	8003044 <__malloc_lock>
 8002e88:	4a1c      	ldr	r2, [pc, #112]	@ (8002efc <_free_r+0x8c>)
 8002e8a:	6813      	ldr	r3, [r2, #0]
 8002e8c:	b933      	cbnz	r3, 8002e9c <_free_r+0x2c>
 8002e8e:	6063      	str	r3, [r4, #4]
 8002e90:	6014      	str	r4, [r2, #0]
 8002e92:	4628      	mov	r0, r5
 8002e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e98:	f000 b8da 	b.w	8003050 <__malloc_unlock>
 8002e9c:	42a3      	cmp	r3, r4
 8002e9e:	d908      	bls.n	8002eb2 <_free_r+0x42>
 8002ea0:	6820      	ldr	r0, [r4, #0]
 8002ea2:	1821      	adds	r1, r4, r0
 8002ea4:	428b      	cmp	r3, r1
 8002ea6:	bf01      	itttt	eq
 8002ea8:	6819      	ldreq	r1, [r3, #0]
 8002eaa:	685b      	ldreq	r3, [r3, #4]
 8002eac:	1809      	addeq	r1, r1, r0
 8002eae:	6021      	streq	r1, [r4, #0]
 8002eb0:	e7ed      	b.n	8002e8e <_free_r+0x1e>
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	b10b      	cbz	r3, 8002ebc <_free_r+0x4c>
 8002eb8:	42a3      	cmp	r3, r4
 8002eba:	d9fa      	bls.n	8002eb2 <_free_r+0x42>
 8002ebc:	6811      	ldr	r1, [r2, #0]
 8002ebe:	1850      	adds	r0, r2, r1
 8002ec0:	42a0      	cmp	r0, r4
 8002ec2:	d10b      	bne.n	8002edc <_free_r+0x6c>
 8002ec4:	6820      	ldr	r0, [r4, #0]
 8002ec6:	4401      	add	r1, r0
 8002ec8:	1850      	adds	r0, r2, r1
 8002eca:	4283      	cmp	r3, r0
 8002ecc:	6011      	str	r1, [r2, #0]
 8002ece:	d1e0      	bne.n	8002e92 <_free_r+0x22>
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4408      	add	r0, r1
 8002ed6:	6010      	str	r0, [r2, #0]
 8002ed8:	6053      	str	r3, [r2, #4]
 8002eda:	e7da      	b.n	8002e92 <_free_r+0x22>
 8002edc:	d902      	bls.n	8002ee4 <_free_r+0x74>
 8002ede:	230c      	movs	r3, #12
 8002ee0:	602b      	str	r3, [r5, #0]
 8002ee2:	e7d6      	b.n	8002e92 <_free_r+0x22>
 8002ee4:	6820      	ldr	r0, [r4, #0]
 8002ee6:	1821      	adds	r1, r4, r0
 8002ee8:	428b      	cmp	r3, r1
 8002eea:	bf01      	itttt	eq
 8002eec:	6819      	ldreq	r1, [r3, #0]
 8002eee:	685b      	ldreq	r3, [r3, #4]
 8002ef0:	1809      	addeq	r1, r1, r0
 8002ef2:	6021      	streq	r1, [r4, #0]
 8002ef4:	6063      	str	r3, [r4, #4]
 8002ef6:	6054      	str	r4, [r2, #4]
 8002ef8:	e7cb      	b.n	8002e92 <_free_r+0x22>
 8002efa:	bd38      	pop	{r3, r4, r5, pc}
 8002efc:	2000082c 	.word	0x2000082c

08002f00 <sbrk_aligned>:
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	4e0f      	ldr	r6, [pc, #60]	@ (8002f40 <sbrk_aligned+0x40>)
 8002f04:	460c      	mov	r4, r1
 8002f06:	6831      	ldr	r1, [r6, #0]
 8002f08:	4605      	mov	r5, r0
 8002f0a:	b911      	cbnz	r1, 8002f12 <sbrk_aligned+0x12>
 8002f0c:	f000 fcf8 	bl	8003900 <_sbrk_r>
 8002f10:	6030      	str	r0, [r6, #0]
 8002f12:	4621      	mov	r1, r4
 8002f14:	4628      	mov	r0, r5
 8002f16:	f000 fcf3 	bl	8003900 <_sbrk_r>
 8002f1a:	1c43      	adds	r3, r0, #1
 8002f1c:	d103      	bne.n	8002f26 <sbrk_aligned+0x26>
 8002f1e:	f04f 34ff 	mov.w	r4, #4294967295
 8002f22:	4620      	mov	r0, r4
 8002f24:	bd70      	pop	{r4, r5, r6, pc}
 8002f26:	1cc4      	adds	r4, r0, #3
 8002f28:	f024 0403 	bic.w	r4, r4, #3
 8002f2c:	42a0      	cmp	r0, r4
 8002f2e:	d0f8      	beq.n	8002f22 <sbrk_aligned+0x22>
 8002f30:	1a21      	subs	r1, r4, r0
 8002f32:	4628      	mov	r0, r5
 8002f34:	f000 fce4 	bl	8003900 <_sbrk_r>
 8002f38:	3001      	adds	r0, #1
 8002f3a:	d1f2      	bne.n	8002f22 <sbrk_aligned+0x22>
 8002f3c:	e7ef      	b.n	8002f1e <sbrk_aligned+0x1e>
 8002f3e:	bf00      	nop
 8002f40:	20000828 	.word	0x20000828

08002f44 <_malloc_r>:
 8002f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f48:	1ccd      	adds	r5, r1, #3
 8002f4a:	f025 0503 	bic.w	r5, r5, #3
 8002f4e:	3508      	adds	r5, #8
 8002f50:	2d0c      	cmp	r5, #12
 8002f52:	bf38      	it	cc
 8002f54:	250c      	movcc	r5, #12
 8002f56:	2d00      	cmp	r5, #0
 8002f58:	4606      	mov	r6, r0
 8002f5a:	db01      	blt.n	8002f60 <_malloc_r+0x1c>
 8002f5c:	42a9      	cmp	r1, r5
 8002f5e:	d904      	bls.n	8002f6a <_malloc_r+0x26>
 8002f60:	230c      	movs	r3, #12
 8002f62:	6033      	str	r3, [r6, #0]
 8002f64:	2000      	movs	r0, #0
 8002f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003040 <_malloc_r+0xfc>
 8002f6e:	f000 f869 	bl	8003044 <__malloc_lock>
 8002f72:	f8d8 3000 	ldr.w	r3, [r8]
 8002f76:	461c      	mov	r4, r3
 8002f78:	bb44      	cbnz	r4, 8002fcc <_malloc_r+0x88>
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	f7ff ffbf 	bl	8002f00 <sbrk_aligned>
 8002f82:	1c43      	adds	r3, r0, #1
 8002f84:	4604      	mov	r4, r0
 8002f86:	d158      	bne.n	800303a <_malloc_r+0xf6>
 8002f88:	f8d8 4000 	ldr.w	r4, [r8]
 8002f8c:	4627      	mov	r7, r4
 8002f8e:	2f00      	cmp	r7, #0
 8002f90:	d143      	bne.n	800301a <_malloc_r+0xd6>
 8002f92:	2c00      	cmp	r4, #0
 8002f94:	d04b      	beq.n	800302e <_malloc_r+0xea>
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	4639      	mov	r1, r7
 8002f9a:	4630      	mov	r0, r6
 8002f9c:	eb04 0903 	add.w	r9, r4, r3
 8002fa0:	f000 fcae 	bl	8003900 <_sbrk_r>
 8002fa4:	4581      	cmp	r9, r0
 8002fa6:	d142      	bne.n	800302e <_malloc_r+0xea>
 8002fa8:	6821      	ldr	r1, [r4, #0]
 8002faa:	4630      	mov	r0, r6
 8002fac:	1a6d      	subs	r5, r5, r1
 8002fae:	4629      	mov	r1, r5
 8002fb0:	f7ff ffa6 	bl	8002f00 <sbrk_aligned>
 8002fb4:	3001      	adds	r0, #1
 8002fb6:	d03a      	beq.n	800302e <_malloc_r+0xea>
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	442b      	add	r3, r5
 8002fbc:	6023      	str	r3, [r4, #0]
 8002fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	bb62      	cbnz	r2, 8003020 <_malloc_r+0xdc>
 8002fc6:	f8c8 7000 	str.w	r7, [r8]
 8002fca:	e00f      	b.n	8002fec <_malloc_r+0xa8>
 8002fcc:	6822      	ldr	r2, [r4, #0]
 8002fce:	1b52      	subs	r2, r2, r5
 8002fd0:	d420      	bmi.n	8003014 <_malloc_r+0xd0>
 8002fd2:	2a0b      	cmp	r2, #11
 8002fd4:	d917      	bls.n	8003006 <_malloc_r+0xc2>
 8002fd6:	1961      	adds	r1, r4, r5
 8002fd8:	42a3      	cmp	r3, r4
 8002fda:	6025      	str	r5, [r4, #0]
 8002fdc:	bf18      	it	ne
 8002fde:	6059      	strne	r1, [r3, #4]
 8002fe0:	6863      	ldr	r3, [r4, #4]
 8002fe2:	bf08      	it	eq
 8002fe4:	f8c8 1000 	streq.w	r1, [r8]
 8002fe8:	5162      	str	r2, [r4, r5]
 8002fea:	604b      	str	r3, [r1, #4]
 8002fec:	4630      	mov	r0, r6
 8002fee:	f000 f82f 	bl	8003050 <__malloc_unlock>
 8002ff2:	f104 000b 	add.w	r0, r4, #11
 8002ff6:	1d23      	adds	r3, r4, #4
 8002ff8:	f020 0007 	bic.w	r0, r0, #7
 8002ffc:	1ac2      	subs	r2, r0, r3
 8002ffe:	bf1c      	itt	ne
 8003000:	1a1b      	subne	r3, r3, r0
 8003002:	50a3      	strne	r3, [r4, r2]
 8003004:	e7af      	b.n	8002f66 <_malloc_r+0x22>
 8003006:	6862      	ldr	r2, [r4, #4]
 8003008:	42a3      	cmp	r3, r4
 800300a:	bf0c      	ite	eq
 800300c:	f8c8 2000 	streq.w	r2, [r8]
 8003010:	605a      	strne	r2, [r3, #4]
 8003012:	e7eb      	b.n	8002fec <_malloc_r+0xa8>
 8003014:	4623      	mov	r3, r4
 8003016:	6864      	ldr	r4, [r4, #4]
 8003018:	e7ae      	b.n	8002f78 <_malloc_r+0x34>
 800301a:	463c      	mov	r4, r7
 800301c:	687f      	ldr	r7, [r7, #4]
 800301e:	e7b6      	b.n	8002f8e <_malloc_r+0x4a>
 8003020:	461a      	mov	r2, r3
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	42a3      	cmp	r3, r4
 8003026:	d1fb      	bne.n	8003020 <_malloc_r+0xdc>
 8003028:	2300      	movs	r3, #0
 800302a:	6053      	str	r3, [r2, #4]
 800302c:	e7de      	b.n	8002fec <_malloc_r+0xa8>
 800302e:	230c      	movs	r3, #12
 8003030:	4630      	mov	r0, r6
 8003032:	6033      	str	r3, [r6, #0]
 8003034:	f000 f80c 	bl	8003050 <__malloc_unlock>
 8003038:	e794      	b.n	8002f64 <_malloc_r+0x20>
 800303a:	6005      	str	r5, [r0, #0]
 800303c:	e7d6      	b.n	8002fec <_malloc_r+0xa8>
 800303e:	bf00      	nop
 8003040:	2000082c 	.word	0x2000082c

08003044 <__malloc_lock>:
 8003044:	4801      	ldr	r0, [pc, #4]	@ (800304c <__malloc_lock+0x8>)
 8003046:	f7ff bf0a 	b.w	8002e5e <__retarget_lock_acquire_recursive>
 800304a:	bf00      	nop
 800304c:	20000824 	.word	0x20000824

08003050 <__malloc_unlock>:
 8003050:	4801      	ldr	r0, [pc, #4]	@ (8003058 <__malloc_unlock+0x8>)
 8003052:	f7ff bf05 	b.w	8002e60 <__retarget_lock_release_recursive>
 8003056:	bf00      	nop
 8003058:	20000824 	.word	0x20000824

0800305c <__sfputc_r>:
 800305c:	6893      	ldr	r3, [r2, #8]
 800305e:	b410      	push	{r4}
 8003060:	3b01      	subs	r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	6093      	str	r3, [r2, #8]
 8003066:	da07      	bge.n	8003078 <__sfputc_r+0x1c>
 8003068:	6994      	ldr	r4, [r2, #24]
 800306a:	42a3      	cmp	r3, r4
 800306c:	db01      	blt.n	8003072 <__sfputc_r+0x16>
 800306e:	290a      	cmp	r1, #10
 8003070:	d102      	bne.n	8003078 <__sfputc_r+0x1c>
 8003072:	bc10      	pop	{r4}
 8003074:	f000 bb6c 	b.w	8003750 <__swbuf_r>
 8003078:	6813      	ldr	r3, [r2, #0]
 800307a:	1c58      	adds	r0, r3, #1
 800307c:	6010      	str	r0, [r2, #0]
 800307e:	7019      	strb	r1, [r3, #0]
 8003080:	4608      	mov	r0, r1
 8003082:	bc10      	pop	{r4}
 8003084:	4770      	bx	lr

08003086 <__sfputs_r>:
 8003086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003088:	4606      	mov	r6, r0
 800308a:	460f      	mov	r7, r1
 800308c:	4614      	mov	r4, r2
 800308e:	18d5      	adds	r5, r2, r3
 8003090:	42ac      	cmp	r4, r5
 8003092:	d101      	bne.n	8003098 <__sfputs_r+0x12>
 8003094:	2000      	movs	r0, #0
 8003096:	e007      	b.n	80030a8 <__sfputs_r+0x22>
 8003098:	463a      	mov	r2, r7
 800309a:	4630      	mov	r0, r6
 800309c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030a0:	f7ff ffdc 	bl	800305c <__sfputc_r>
 80030a4:	1c43      	adds	r3, r0, #1
 80030a6:	d1f3      	bne.n	8003090 <__sfputs_r+0xa>
 80030a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030ac <_vfiprintf_r>:
 80030ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b0:	460d      	mov	r5, r1
 80030b2:	4614      	mov	r4, r2
 80030b4:	4698      	mov	r8, r3
 80030b6:	4606      	mov	r6, r0
 80030b8:	b09d      	sub	sp, #116	@ 0x74
 80030ba:	b118      	cbz	r0, 80030c4 <_vfiprintf_r+0x18>
 80030bc:	6a03      	ldr	r3, [r0, #32]
 80030be:	b90b      	cbnz	r3, 80030c4 <_vfiprintf_r+0x18>
 80030c0:	f7ff fdba 	bl	8002c38 <__sinit>
 80030c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80030c6:	07d9      	lsls	r1, r3, #31
 80030c8:	d405      	bmi.n	80030d6 <_vfiprintf_r+0x2a>
 80030ca:	89ab      	ldrh	r3, [r5, #12]
 80030cc:	059a      	lsls	r2, r3, #22
 80030ce:	d402      	bmi.n	80030d6 <_vfiprintf_r+0x2a>
 80030d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80030d2:	f7ff fec4 	bl	8002e5e <__retarget_lock_acquire_recursive>
 80030d6:	89ab      	ldrh	r3, [r5, #12]
 80030d8:	071b      	lsls	r3, r3, #28
 80030da:	d501      	bpl.n	80030e0 <_vfiprintf_r+0x34>
 80030dc:	692b      	ldr	r3, [r5, #16]
 80030de:	b99b      	cbnz	r3, 8003108 <_vfiprintf_r+0x5c>
 80030e0:	4629      	mov	r1, r5
 80030e2:	4630      	mov	r0, r6
 80030e4:	f000 fb72 	bl	80037cc <__swsetup_r>
 80030e8:	b170      	cbz	r0, 8003108 <_vfiprintf_r+0x5c>
 80030ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80030ec:	07dc      	lsls	r4, r3, #31
 80030ee:	d504      	bpl.n	80030fa <_vfiprintf_r+0x4e>
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	b01d      	add	sp, #116	@ 0x74
 80030f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030fa:	89ab      	ldrh	r3, [r5, #12]
 80030fc:	0598      	lsls	r0, r3, #22
 80030fe:	d4f7      	bmi.n	80030f0 <_vfiprintf_r+0x44>
 8003100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003102:	f7ff fead 	bl	8002e60 <__retarget_lock_release_recursive>
 8003106:	e7f3      	b.n	80030f0 <_vfiprintf_r+0x44>
 8003108:	2300      	movs	r3, #0
 800310a:	9309      	str	r3, [sp, #36]	@ 0x24
 800310c:	2320      	movs	r3, #32
 800310e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003112:	2330      	movs	r3, #48	@ 0x30
 8003114:	f04f 0901 	mov.w	r9, #1
 8003118:	f8cd 800c 	str.w	r8, [sp, #12]
 800311c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80032c8 <_vfiprintf_r+0x21c>
 8003120:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003124:	4623      	mov	r3, r4
 8003126:	469a      	mov	sl, r3
 8003128:	f813 2b01 	ldrb.w	r2, [r3], #1
 800312c:	b10a      	cbz	r2, 8003132 <_vfiprintf_r+0x86>
 800312e:	2a25      	cmp	r2, #37	@ 0x25
 8003130:	d1f9      	bne.n	8003126 <_vfiprintf_r+0x7a>
 8003132:	ebba 0b04 	subs.w	fp, sl, r4
 8003136:	d00b      	beq.n	8003150 <_vfiprintf_r+0xa4>
 8003138:	465b      	mov	r3, fp
 800313a:	4622      	mov	r2, r4
 800313c:	4629      	mov	r1, r5
 800313e:	4630      	mov	r0, r6
 8003140:	f7ff ffa1 	bl	8003086 <__sfputs_r>
 8003144:	3001      	adds	r0, #1
 8003146:	f000 80a7 	beq.w	8003298 <_vfiprintf_r+0x1ec>
 800314a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800314c:	445a      	add	r2, fp
 800314e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003150:	f89a 3000 	ldrb.w	r3, [sl]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 809f 	beq.w	8003298 <_vfiprintf_r+0x1ec>
 800315a:	2300      	movs	r3, #0
 800315c:	f04f 32ff 	mov.w	r2, #4294967295
 8003160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003164:	f10a 0a01 	add.w	sl, sl, #1
 8003168:	9304      	str	r3, [sp, #16]
 800316a:	9307      	str	r3, [sp, #28]
 800316c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003170:	931a      	str	r3, [sp, #104]	@ 0x68
 8003172:	4654      	mov	r4, sl
 8003174:	2205      	movs	r2, #5
 8003176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800317a:	4853      	ldr	r0, [pc, #332]	@ (80032c8 <_vfiprintf_r+0x21c>)
 800317c:	f000 fbd0 	bl	8003920 <memchr>
 8003180:	9a04      	ldr	r2, [sp, #16]
 8003182:	b9d8      	cbnz	r0, 80031bc <_vfiprintf_r+0x110>
 8003184:	06d1      	lsls	r1, r2, #27
 8003186:	bf44      	itt	mi
 8003188:	2320      	movmi	r3, #32
 800318a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800318e:	0713      	lsls	r3, r2, #28
 8003190:	bf44      	itt	mi
 8003192:	232b      	movmi	r3, #43	@ 0x2b
 8003194:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003198:	f89a 3000 	ldrb.w	r3, [sl]
 800319c:	2b2a      	cmp	r3, #42	@ 0x2a
 800319e:	d015      	beq.n	80031cc <_vfiprintf_r+0x120>
 80031a0:	4654      	mov	r4, sl
 80031a2:	2000      	movs	r0, #0
 80031a4:	f04f 0c0a 	mov.w	ip, #10
 80031a8:	9a07      	ldr	r2, [sp, #28]
 80031aa:	4621      	mov	r1, r4
 80031ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031b0:	3b30      	subs	r3, #48	@ 0x30
 80031b2:	2b09      	cmp	r3, #9
 80031b4:	d94b      	bls.n	800324e <_vfiprintf_r+0x1a2>
 80031b6:	b1b0      	cbz	r0, 80031e6 <_vfiprintf_r+0x13a>
 80031b8:	9207      	str	r2, [sp, #28]
 80031ba:	e014      	b.n	80031e6 <_vfiprintf_r+0x13a>
 80031bc:	eba0 0308 	sub.w	r3, r0, r8
 80031c0:	fa09 f303 	lsl.w	r3, r9, r3
 80031c4:	4313      	orrs	r3, r2
 80031c6:	46a2      	mov	sl, r4
 80031c8:	9304      	str	r3, [sp, #16]
 80031ca:	e7d2      	b.n	8003172 <_vfiprintf_r+0xc6>
 80031cc:	9b03      	ldr	r3, [sp, #12]
 80031ce:	1d19      	adds	r1, r3, #4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	9103      	str	r1, [sp, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bfbb      	ittet	lt
 80031d8:	425b      	neglt	r3, r3
 80031da:	f042 0202 	orrlt.w	r2, r2, #2
 80031de:	9307      	strge	r3, [sp, #28]
 80031e0:	9307      	strlt	r3, [sp, #28]
 80031e2:	bfb8      	it	lt
 80031e4:	9204      	strlt	r2, [sp, #16]
 80031e6:	7823      	ldrb	r3, [r4, #0]
 80031e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80031ea:	d10a      	bne.n	8003202 <_vfiprintf_r+0x156>
 80031ec:	7863      	ldrb	r3, [r4, #1]
 80031ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80031f0:	d132      	bne.n	8003258 <_vfiprintf_r+0x1ac>
 80031f2:	9b03      	ldr	r3, [sp, #12]
 80031f4:	3402      	adds	r4, #2
 80031f6:	1d1a      	adds	r2, r3, #4
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	9203      	str	r2, [sp, #12]
 80031fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003200:	9305      	str	r3, [sp, #20]
 8003202:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80032cc <_vfiprintf_r+0x220>
 8003206:	2203      	movs	r2, #3
 8003208:	4650      	mov	r0, sl
 800320a:	7821      	ldrb	r1, [r4, #0]
 800320c:	f000 fb88 	bl	8003920 <memchr>
 8003210:	b138      	cbz	r0, 8003222 <_vfiprintf_r+0x176>
 8003212:	2240      	movs	r2, #64	@ 0x40
 8003214:	9b04      	ldr	r3, [sp, #16]
 8003216:	eba0 000a 	sub.w	r0, r0, sl
 800321a:	4082      	lsls	r2, r0
 800321c:	4313      	orrs	r3, r2
 800321e:	3401      	adds	r4, #1
 8003220:	9304      	str	r3, [sp, #16]
 8003222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003226:	2206      	movs	r2, #6
 8003228:	4829      	ldr	r0, [pc, #164]	@ (80032d0 <_vfiprintf_r+0x224>)
 800322a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800322e:	f000 fb77 	bl	8003920 <memchr>
 8003232:	2800      	cmp	r0, #0
 8003234:	d03f      	beq.n	80032b6 <_vfiprintf_r+0x20a>
 8003236:	4b27      	ldr	r3, [pc, #156]	@ (80032d4 <_vfiprintf_r+0x228>)
 8003238:	bb1b      	cbnz	r3, 8003282 <_vfiprintf_r+0x1d6>
 800323a:	9b03      	ldr	r3, [sp, #12]
 800323c:	3307      	adds	r3, #7
 800323e:	f023 0307 	bic.w	r3, r3, #7
 8003242:	3308      	adds	r3, #8
 8003244:	9303      	str	r3, [sp, #12]
 8003246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003248:	443b      	add	r3, r7
 800324a:	9309      	str	r3, [sp, #36]	@ 0x24
 800324c:	e76a      	b.n	8003124 <_vfiprintf_r+0x78>
 800324e:	460c      	mov	r4, r1
 8003250:	2001      	movs	r0, #1
 8003252:	fb0c 3202 	mla	r2, ip, r2, r3
 8003256:	e7a8      	b.n	80031aa <_vfiprintf_r+0xfe>
 8003258:	2300      	movs	r3, #0
 800325a:	f04f 0c0a 	mov.w	ip, #10
 800325e:	4619      	mov	r1, r3
 8003260:	3401      	adds	r4, #1
 8003262:	9305      	str	r3, [sp, #20]
 8003264:	4620      	mov	r0, r4
 8003266:	f810 2b01 	ldrb.w	r2, [r0], #1
 800326a:	3a30      	subs	r2, #48	@ 0x30
 800326c:	2a09      	cmp	r2, #9
 800326e:	d903      	bls.n	8003278 <_vfiprintf_r+0x1cc>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0c6      	beq.n	8003202 <_vfiprintf_r+0x156>
 8003274:	9105      	str	r1, [sp, #20]
 8003276:	e7c4      	b.n	8003202 <_vfiprintf_r+0x156>
 8003278:	4604      	mov	r4, r0
 800327a:	2301      	movs	r3, #1
 800327c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003280:	e7f0      	b.n	8003264 <_vfiprintf_r+0x1b8>
 8003282:	ab03      	add	r3, sp, #12
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	462a      	mov	r2, r5
 8003288:	4630      	mov	r0, r6
 800328a:	4b13      	ldr	r3, [pc, #76]	@ (80032d8 <_vfiprintf_r+0x22c>)
 800328c:	a904      	add	r1, sp, #16
 800328e:	f3af 8000 	nop.w
 8003292:	4607      	mov	r7, r0
 8003294:	1c78      	adds	r0, r7, #1
 8003296:	d1d6      	bne.n	8003246 <_vfiprintf_r+0x19a>
 8003298:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800329a:	07d9      	lsls	r1, r3, #31
 800329c:	d405      	bmi.n	80032aa <_vfiprintf_r+0x1fe>
 800329e:	89ab      	ldrh	r3, [r5, #12]
 80032a0:	059a      	lsls	r2, r3, #22
 80032a2:	d402      	bmi.n	80032aa <_vfiprintf_r+0x1fe>
 80032a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032a6:	f7ff fddb 	bl	8002e60 <__retarget_lock_release_recursive>
 80032aa:	89ab      	ldrh	r3, [r5, #12]
 80032ac:	065b      	lsls	r3, r3, #25
 80032ae:	f53f af1f 	bmi.w	80030f0 <_vfiprintf_r+0x44>
 80032b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80032b4:	e71e      	b.n	80030f4 <_vfiprintf_r+0x48>
 80032b6:	ab03      	add	r3, sp, #12
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	462a      	mov	r2, r5
 80032bc:	4630      	mov	r0, r6
 80032be:	4b06      	ldr	r3, [pc, #24]	@ (80032d8 <_vfiprintf_r+0x22c>)
 80032c0:	a904      	add	r1, sp, #16
 80032c2:	f000 f87d 	bl	80033c0 <_printf_i>
 80032c6:	e7e4      	b.n	8003292 <_vfiprintf_r+0x1e6>
 80032c8:	08003be7 	.word	0x08003be7
 80032cc:	08003bed 	.word	0x08003bed
 80032d0:	08003bf1 	.word	0x08003bf1
 80032d4:	00000000 	.word	0x00000000
 80032d8:	08003087 	.word	0x08003087

080032dc <_printf_common>:
 80032dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032e0:	4616      	mov	r6, r2
 80032e2:	4698      	mov	r8, r3
 80032e4:	688a      	ldr	r2, [r1, #8]
 80032e6:	690b      	ldr	r3, [r1, #16]
 80032e8:	4607      	mov	r7, r0
 80032ea:	4293      	cmp	r3, r2
 80032ec:	bfb8      	it	lt
 80032ee:	4613      	movlt	r3, r2
 80032f0:	6033      	str	r3, [r6, #0]
 80032f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80032f6:	460c      	mov	r4, r1
 80032f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80032fc:	b10a      	cbz	r2, 8003302 <_printf_common+0x26>
 80032fe:	3301      	adds	r3, #1
 8003300:	6033      	str	r3, [r6, #0]
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	0699      	lsls	r1, r3, #26
 8003306:	bf42      	ittt	mi
 8003308:	6833      	ldrmi	r3, [r6, #0]
 800330a:	3302      	addmi	r3, #2
 800330c:	6033      	strmi	r3, [r6, #0]
 800330e:	6825      	ldr	r5, [r4, #0]
 8003310:	f015 0506 	ands.w	r5, r5, #6
 8003314:	d106      	bne.n	8003324 <_printf_common+0x48>
 8003316:	f104 0a19 	add.w	sl, r4, #25
 800331a:	68e3      	ldr	r3, [r4, #12]
 800331c:	6832      	ldr	r2, [r6, #0]
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	42ab      	cmp	r3, r5
 8003322:	dc2b      	bgt.n	800337c <_printf_common+0xa0>
 8003324:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003328:	6822      	ldr	r2, [r4, #0]
 800332a:	3b00      	subs	r3, #0
 800332c:	bf18      	it	ne
 800332e:	2301      	movne	r3, #1
 8003330:	0692      	lsls	r2, r2, #26
 8003332:	d430      	bmi.n	8003396 <_printf_common+0xba>
 8003334:	4641      	mov	r1, r8
 8003336:	4638      	mov	r0, r7
 8003338:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800333c:	47c8      	blx	r9
 800333e:	3001      	adds	r0, #1
 8003340:	d023      	beq.n	800338a <_printf_common+0xae>
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	6922      	ldr	r2, [r4, #16]
 8003346:	f003 0306 	and.w	r3, r3, #6
 800334a:	2b04      	cmp	r3, #4
 800334c:	bf14      	ite	ne
 800334e:	2500      	movne	r5, #0
 8003350:	6833      	ldreq	r3, [r6, #0]
 8003352:	f04f 0600 	mov.w	r6, #0
 8003356:	bf08      	it	eq
 8003358:	68e5      	ldreq	r5, [r4, #12]
 800335a:	f104 041a 	add.w	r4, r4, #26
 800335e:	bf08      	it	eq
 8003360:	1aed      	subeq	r5, r5, r3
 8003362:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003366:	bf08      	it	eq
 8003368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800336c:	4293      	cmp	r3, r2
 800336e:	bfc4      	itt	gt
 8003370:	1a9b      	subgt	r3, r3, r2
 8003372:	18ed      	addgt	r5, r5, r3
 8003374:	42b5      	cmp	r5, r6
 8003376:	d11a      	bne.n	80033ae <_printf_common+0xd2>
 8003378:	2000      	movs	r0, #0
 800337a:	e008      	b.n	800338e <_printf_common+0xb2>
 800337c:	2301      	movs	r3, #1
 800337e:	4652      	mov	r2, sl
 8003380:	4641      	mov	r1, r8
 8003382:	4638      	mov	r0, r7
 8003384:	47c8      	blx	r9
 8003386:	3001      	adds	r0, #1
 8003388:	d103      	bne.n	8003392 <_printf_common+0xb6>
 800338a:	f04f 30ff 	mov.w	r0, #4294967295
 800338e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003392:	3501      	adds	r5, #1
 8003394:	e7c1      	b.n	800331a <_printf_common+0x3e>
 8003396:	2030      	movs	r0, #48	@ 0x30
 8003398:	18e1      	adds	r1, r4, r3
 800339a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80033a4:	4422      	add	r2, r4
 80033a6:	3302      	adds	r3, #2
 80033a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80033ac:	e7c2      	b.n	8003334 <_printf_common+0x58>
 80033ae:	2301      	movs	r3, #1
 80033b0:	4622      	mov	r2, r4
 80033b2:	4641      	mov	r1, r8
 80033b4:	4638      	mov	r0, r7
 80033b6:	47c8      	blx	r9
 80033b8:	3001      	adds	r0, #1
 80033ba:	d0e6      	beq.n	800338a <_printf_common+0xae>
 80033bc:	3601      	adds	r6, #1
 80033be:	e7d9      	b.n	8003374 <_printf_common+0x98>

080033c0 <_printf_i>:
 80033c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033c4:	7e0f      	ldrb	r7, [r1, #24]
 80033c6:	4691      	mov	r9, r2
 80033c8:	2f78      	cmp	r7, #120	@ 0x78
 80033ca:	4680      	mov	r8, r0
 80033cc:	460c      	mov	r4, r1
 80033ce:	469a      	mov	sl, r3
 80033d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80033d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80033d6:	d807      	bhi.n	80033e8 <_printf_i+0x28>
 80033d8:	2f62      	cmp	r7, #98	@ 0x62
 80033da:	d80a      	bhi.n	80033f2 <_printf_i+0x32>
 80033dc:	2f00      	cmp	r7, #0
 80033de:	f000 80d3 	beq.w	8003588 <_printf_i+0x1c8>
 80033e2:	2f58      	cmp	r7, #88	@ 0x58
 80033e4:	f000 80ba 	beq.w	800355c <_printf_i+0x19c>
 80033e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80033f0:	e03a      	b.n	8003468 <_printf_i+0xa8>
 80033f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80033f6:	2b15      	cmp	r3, #21
 80033f8:	d8f6      	bhi.n	80033e8 <_printf_i+0x28>
 80033fa:	a101      	add	r1, pc, #4	@ (adr r1, 8003400 <_printf_i+0x40>)
 80033fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003400:	08003459 	.word	0x08003459
 8003404:	0800346d 	.word	0x0800346d
 8003408:	080033e9 	.word	0x080033e9
 800340c:	080033e9 	.word	0x080033e9
 8003410:	080033e9 	.word	0x080033e9
 8003414:	080033e9 	.word	0x080033e9
 8003418:	0800346d 	.word	0x0800346d
 800341c:	080033e9 	.word	0x080033e9
 8003420:	080033e9 	.word	0x080033e9
 8003424:	080033e9 	.word	0x080033e9
 8003428:	080033e9 	.word	0x080033e9
 800342c:	0800356f 	.word	0x0800356f
 8003430:	08003497 	.word	0x08003497
 8003434:	08003529 	.word	0x08003529
 8003438:	080033e9 	.word	0x080033e9
 800343c:	080033e9 	.word	0x080033e9
 8003440:	08003591 	.word	0x08003591
 8003444:	080033e9 	.word	0x080033e9
 8003448:	08003497 	.word	0x08003497
 800344c:	080033e9 	.word	0x080033e9
 8003450:	080033e9 	.word	0x080033e9
 8003454:	08003531 	.word	0x08003531
 8003458:	6833      	ldr	r3, [r6, #0]
 800345a:	1d1a      	adds	r2, r3, #4
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6032      	str	r2, [r6, #0]
 8003460:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003464:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003468:	2301      	movs	r3, #1
 800346a:	e09e      	b.n	80035aa <_printf_i+0x1ea>
 800346c:	6833      	ldr	r3, [r6, #0]
 800346e:	6820      	ldr	r0, [r4, #0]
 8003470:	1d19      	adds	r1, r3, #4
 8003472:	6031      	str	r1, [r6, #0]
 8003474:	0606      	lsls	r6, r0, #24
 8003476:	d501      	bpl.n	800347c <_printf_i+0xbc>
 8003478:	681d      	ldr	r5, [r3, #0]
 800347a:	e003      	b.n	8003484 <_printf_i+0xc4>
 800347c:	0645      	lsls	r5, r0, #25
 800347e:	d5fb      	bpl.n	8003478 <_printf_i+0xb8>
 8003480:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003484:	2d00      	cmp	r5, #0
 8003486:	da03      	bge.n	8003490 <_printf_i+0xd0>
 8003488:	232d      	movs	r3, #45	@ 0x2d
 800348a:	426d      	negs	r5, r5
 800348c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003490:	230a      	movs	r3, #10
 8003492:	4859      	ldr	r0, [pc, #356]	@ (80035f8 <_printf_i+0x238>)
 8003494:	e011      	b.n	80034ba <_printf_i+0xfa>
 8003496:	6821      	ldr	r1, [r4, #0]
 8003498:	6833      	ldr	r3, [r6, #0]
 800349a:	0608      	lsls	r0, r1, #24
 800349c:	f853 5b04 	ldr.w	r5, [r3], #4
 80034a0:	d402      	bmi.n	80034a8 <_printf_i+0xe8>
 80034a2:	0649      	lsls	r1, r1, #25
 80034a4:	bf48      	it	mi
 80034a6:	b2ad      	uxthmi	r5, r5
 80034a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80034aa:	6033      	str	r3, [r6, #0]
 80034ac:	bf14      	ite	ne
 80034ae:	230a      	movne	r3, #10
 80034b0:	2308      	moveq	r3, #8
 80034b2:	4851      	ldr	r0, [pc, #324]	@ (80035f8 <_printf_i+0x238>)
 80034b4:	2100      	movs	r1, #0
 80034b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80034ba:	6866      	ldr	r6, [r4, #4]
 80034bc:	2e00      	cmp	r6, #0
 80034be:	bfa8      	it	ge
 80034c0:	6821      	ldrge	r1, [r4, #0]
 80034c2:	60a6      	str	r6, [r4, #8]
 80034c4:	bfa4      	itt	ge
 80034c6:	f021 0104 	bicge.w	r1, r1, #4
 80034ca:	6021      	strge	r1, [r4, #0]
 80034cc:	b90d      	cbnz	r5, 80034d2 <_printf_i+0x112>
 80034ce:	2e00      	cmp	r6, #0
 80034d0:	d04b      	beq.n	800356a <_printf_i+0x1aa>
 80034d2:	4616      	mov	r6, r2
 80034d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80034d8:	fb03 5711 	mls	r7, r3, r1, r5
 80034dc:	5dc7      	ldrb	r7, [r0, r7]
 80034de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034e2:	462f      	mov	r7, r5
 80034e4:	42bb      	cmp	r3, r7
 80034e6:	460d      	mov	r5, r1
 80034e8:	d9f4      	bls.n	80034d4 <_printf_i+0x114>
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d10b      	bne.n	8003506 <_printf_i+0x146>
 80034ee:	6823      	ldr	r3, [r4, #0]
 80034f0:	07df      	lsls	r7, r3, #31
 80034f2:	d508      	bpl.n	8003506 <_printf_i+0x146>
 80034f4:	6923      	ldr	r3, [r4, #16]
 80034f6:	6861      	ldr	r1, [r4, #4]
 80034f8:	4299      	cmp	r1, r3
 80034fa:	bfde      	ittt	le
 80034fc:	2330      	movle	r3, #48	@ 0x30
 80034fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003502:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003506:	1b92      	subs	r2, r2, r6
 8003508:	6122      	str	r2, [r4, #16]
 800350a:	464b      	mov	r3, r9
 800350c:	4621      	mov	r1, r4
 800350e:	4640      	mov	r0, r8
 8003510:	f8cd a000 	str.w	sl, [sp]
 8003514:	aa03      	add	r2, sp, #12
 8003516:	f7ff fee1 	bl	80032dc <_printf_common>
 800351a:	3001      	adds	r0, #1
 800351c:	d14a      	bne.n	80035b4 <_printf_i+0x1f4>
 800351e:	f04f 30ff 	mov.w	r0, #4294967295
 8003522:	b004      	add	sp, #16
 8003524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	f043 0320 	orr.w	r3, r3, #32
 800352e:	6023      	str	r3, [r4, #0]
 8003530:	2778      	movs	r7, #120	@ 0x78
 8003532:	4832      	ldr	r0, [pc, #200]	@ (80035fc <_printf_i+0x23c>)
 8003534:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	6831      	ldr	r1, [r6, #0]
 800353c:	061f      	lsls	r7, r3, #24
 800353e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003542:	d402      	bmi.n	800354a <_printf_i+0x18a>
 8003544:	065f      	lsls	r7, r3, #25
 8003546:	bf48      	it	mi
 8003548:	b2ad      	uxthmi	r5, r5
 800354a:	6031      	str	r1, [r6, #0]
 800354c:	07d9      	lsls	r1, r3, #31
 800354e:	bf44      	itt	mi
 8003550:	f043 0320 	orrmi.w	r3, r3, #32
 8003554:	6023      	strmi	r3, [r4, #0]
 8003556:	b11d      	cbz	r5, 8003560 <_printf_i+0x1a0>
 8003558:	2310      	movs	r3, #16
 800355a:	e7ab      	b.n	80034b4 <_printf_i+0xf4>
 800355c:	4826      	ldr	r0, [pc, #152]	@ (80035f8 <_printf_i+0x238>)
 800355e:	e7e9      	b.n	8003534 <_printf_i+0x174>
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	f023 0320 	bic.w	r3, r3, #32
 8003566:	6023      	str	r3, [r4, #0]
 8003568:	e7f6      	b.n	8003558 <_printf_i+0x198>
 800356a:	4616      	mov	r6, r2
 800356c:	e7bd      	b.n	80034ea <_printf_i+0x12a>
 800356e:	6833      	ldr	r3, [r6, #0]
 8003570:	6825      	ldr	r5, [r4, #0]
 8003572:	1d18      	adds	r0, r3, #4
 8003574:	6961      	ldr	r1, [r4, #20]
 8003576:	6030      	str	r0, [r6, #0]
 8003578:	062e      	lsls	r6, r5, #24
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	d501      	bpl.n	8003582 <_printf_i+0x1c2>
 800357e:	6019      	str	r1, [r3, #0]
 8003580:	e002      	b.n	8003588 <_printf_i+0x1c8>
 8003582:	0668      	lsls	r0, r5, #25
 8003584:	d5fb      	bpl.n	800357e <_printf_i+0x1be>
 8003586:	8019      	strh	r1, [r3, #0]
 8003588:	2300      	movs	r3, #0
 800358a:	4616      	mov	r6, r2
 800358c:	6123      	str	r3, [r4, #16]
 800358e:	e7bc      	b.n	800350a <_printf_i+0x14a>
 8003590:	6833      	ldr	r3, [r6, #0]
 8003592:	2100      	movs	r1, #0
 8003594:	1d1a      	adds	r2, r3, #4
 8003596:	6032      	str	r2, [r6, #0]
 8003598:	681e      	ldr	r6, [r3, #0]
 800359a:	6862      	ldr	r2, [r4, #4]
 800359c:	4630      	mov	r0, r6
 800359e:	f000 f9bf 	bl	8003920 <memchr>
 80035a2:	b108      	cbz	r0, 80035a8 <_printf_i+0x1e8>
 80035a4:	1b80      	subs	r0, r0, r6
 80035a6:	6060      	str	r0, [r4, #4]
 80035a8:	6863      	ldr	r3, [r4, #4]
 80035aa:	6123      	str	r3, [r4, #16]
 80035ac:	2300      	movs	r3, #0
 80035ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035b2:	e7aa      	b.n	800350a <_printf_i+0x14a>
 80035b4:	4632      	mov	r2, r6
 80035b6:	4649      	mov	r1, r9
 80035b8:	4640      	mov	r0, r8
 80035ba:	6923      	ldr	r3, [r4, #16]
 80035bc:	47d0      	blx	sl
 80035be:	3001      	adds	r0, #1
 80035c0:	d0ad      	beq.n	800351e <_printf_i+0x15e>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	079b      	lsls	r3, r3, #30
 80035c6:	d413      	bmi.n	80035f0 <_printf_i+0x230>
 80035c8:	68e0      	ldr	r0, [r4, #12]
 80035ca:	9b03      	ldr	r3, [sp, #12]
 80035cc:	4298      	cmp	r0, r3
 80035ce:	bfb8      	it	lt
 80035d0:	4618      	movlt	r0, r3
 80035d2:	e7a6      	b.n	8003522 <_printf_i+0x162>
 80035d4:	2301      	movs	r3, #1
 80035d6:	4632      	mov	r2, r6
 80035d8:	4649      	mov	r1, r9
 80035da:	4640      	mov	r0, r8
 80035dc:	47d0      	blx	sl
 80035de:	3001      	adds	r0, #1
 80035e0:	d09d      	beq.n	800351e <_printf_i+0x15e>
 80035e2:	3501      	adds	r5, #1
 80035e4:	68e3      	ldr	r3, [r4, #12]
 80035e6:	9903      	ldr	r1, [sp, #12]
 80035e8:	1a5b      	subs	r3, r3, r1
 80035ea:	42ab      	cmp	r3, r5
 80035ec:	dcf2      	bgt.n	80035d4 <_printf_i+0x214>
 80035ee:	e7eb      	b.n	80035c8 <_printf_i+0x208>
 80035f0:	2500      	movs	r5, #0
 80035f2:	f104 0619 	add.w	r6, r4, #25
 80035f6:	e7f5      	b.n	80035e4 <_printf_i+0x224>
 80035f8:	08003bf8 	.word	0x08003bf8
 80035fc:	08003c09 	.word	0x08003c09

08003600 <__sflush_r>:
 8003600:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003606:	0716      	lsls	r6, r2, #28
 8003608:	4605      	mov	r5, r0
 800360a:	460c      	mov	r4, r1
 800360c:	d454      	bmi.n	80036b8 <__sflush_r+0xb8>
 800360e:	684b      	ldr	r3, [r1, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	dc02      	bgt.n	800361a <__sflush_r+0x1a>
 8003614:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	dd48      	ble.n	80036ac <__sflush_r+0xac>
 800361a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800361c:	2e00      	cmp	r6, #0
 800361e:	d045      	beq.n	80036ac <__sflush_r+0xac>
 8003620:	2300      	movs	r3, #0
 8003622:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003626:	682f      	ldr	r7, [r5, #0]
 8003628:	6a21      	ldr	r1, [r4, #32]
 800362a:	602b      	str	r3, [r5, #0]
 800362c:	d030      	beq.n	8003690 <__sflush_r+0x90>
 800362e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	0759      	lsls	r1, r3, #29
 8003634:	d505      	bpl.n	8003642 <__sflush_r+0x42>
 8003636:	6863      	ldr	r3, [r4, #4]
 8003638:	1ad2      	subs	r2, r2, r3
 800363a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800363c:	b10b      	cbz	r3, 8003642 <__sflush_r+0x42>
 800363e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003640:	1ad2      	subs	r2, r2, r3
 8003642:	2300      	movs	r3, #0
 8003644:	4628      	mov	r0, r5
 8003646:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003648:	6a21      	ldr	r1, [r4, #32]
 800364a:	47b0      	blx	r6
 800364c:	1c43      	adds	r3, r0, #1
 800364e:	89a3      	ldrh	r3, [r4, #12]
 8003650:	d106      	bne.n	8003660 <__sflush_r+0x60>
 8003652:	6829      	ldr	r1, [r5, #0]
 8003654:	291d      	cmp	r1, #29
 8003656:	d82b      	bhi.n	80036b0 <__sflush_r+0xb0>
 8003658:	4a28      	ldr	r2, [pc, #160]	@ (80036fc <__sflush_r+0xfc>)
 800365a:	410a      	asrs	r2, r1
 800365c:	07d6      	lsls	r6, r2, #31
 800365e:	d427      	bmi.n	80036b0 <__sflush_r+0xb0>
 8003660:	2200      	movs	r2, #0
 8003662:	6062      	str	r2, [r4, #4]
 8003664:	6922      	ldr	r2, [r4, #16]
 8003666:	04d9      	lsls	r1, r3, #19
 8003668:	6022      	str	r2, [r4, #0]
 800366a:	d504      	bpl.n	8003676 <__sflush_r+0x76>
 800366c:	1c42      	adds	r2, r0, #1
 800366e:	d101      	bne.n	8003674 <__sflush_r+0x74>
 8003670:	682b      	ldr	r3, [r5, #0]
 8003672:	b903      	cbnz	r3, 8003676 <__sflush_r+0x76>
 8003674:	6560      	str	r0, [r4, #84]	@ 0x54
 8003676:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003678:	602f      	str	r7, [r5, #0]
 800367a:	b1b9      	cbz	r1, 80036ac <__sflush_r+0xac>
 800367c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003680:	4299      	cmp	r1, r3
 8003682:	d002      	beq.n	800368a <__sflush_r+0x8a>
 8003684:	4628      	mov	r0, r5
 8003686:	f7ff fbf3 	bl	8002e70 <_free_r>
 800368a:	2300      	movs	r3, #0
 800368c:	6363      	str	r3, [r4, #52]	@ 0x34
 800368e:	e00d      	b.n	80036ac <__sflush_r+0xac>
 8003690:	2301      	movs	r3, #1
 8003692:	4628      	mov	r0, r5
 8003694:	47b0      	blx	r6
 8003696:	4602      	mov	r2, r0
 8003698:	1c50      	adds	r0, r2, #1
 800369a:	d1c9      	bne.n	8003630 <__sflush_r+0x30>
 800369c:	682b      	ldr	r3, [r5, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0c6      	beq.n	8003630 <__sflush_r+0x30>
 80036a2:	2b1d      	cmp	r3, #29
 80036a4:	d001      	beq.n	80036aa <__sflush_r+0xaa>
 80036a6:	2b16      	cmp	r3, #22
 80036a8:	d11d      	bne.n	80036e6 <__sflush_r+0xe6>
 80036aa:	602f      	str	r7, [r5, #0]
 80036ac:	2000      	movs	r0, #0
 80036ae:	e021      	b.n	80036f4 <__sflush_r+0xf4>
 80036b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036b4:	b21b      	sxth	r3, r3
 80036b6:	e01a      	b.n	80036ee <__sflush_r+0xee>
 80036b8:	690f      	ldr	r7, [r1, #16]
 80036ba:	2f00      	cmp	r7, #0
 80036bc:	d0f6      	beq.n	80036ac <__sflush_r+0xac>
 80036be:	0793      	lsls	r3, r2, #30
 80036c0:	bf18      	it	ne
 80036c2:	2300      	movne	r3, #0
 80036c4:	680e      	ldr	r6, [r1, #0]
 80036c6:	bf08      	it	eq
 80036c8:	694b      	ldreq	r3, [r1, #20]
 80036ca:	1bf6      	subs	r6, r6, r7
 80036cc:	600f      	str	r7, [r1, #0]
 80036ce:	608b      	str	r3, [r1, #8]
 80036d0:	2e00      	cmp	r6, #0
 80036d2:	ddeb      	ble.n	80036ac <__sflush_r+0xac>
 80036d4:	4633      	mov	r3, r6
 80036d6:	463a      	mov	r2, r7
 80036d8:	4628      	mov	r0, r5
 80036da:	6a21      	ldr	r1, [r4, #32]
 80036dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80036e0:	47e0      	blx	ip
 80036e2:	2800      	cmp	r0, #0
 80036e4:	dc07      	bgt.n	80036f6 <__sflush_r+0xf6>
 80036e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036ee:	f04f 30ff 	mov.w	r0, #4294967295
 80036f2:	81a3      	strh	r3, [r4, #12]
 80036f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036f6:	4407      	add	r7, r0
 80036f8:	1a36      	subs	r6, r6, r0
 80036fa:	e7e9      	b.n	80036d0 <__sflush_r+0xd0>
 80036fc:	dfbffffe 	.word	0xdfbffffe

08003700 <_fflush_r>:
 8003700:	b538      	push	{r3, r4, r5, lr}
 8003702:	690b      	ldr	r3, [r1, #16]
 8003704:	4605      	mov	r5, r0
 8003706:	460c      	mov	r4, r1
 8003708:	b913      	cbnz	r3, 8003710 <_fflush_r+0x10>
 800370a:	2500      	movs	r5, #0
 800370c:	4628      	mov	r0, r5
 800370e:	bd38      	pop	{r3, r4, r5, pc}
 8003710:	b118      	cbz	r0, 800371a <_fflush_r+0x1a>
 8003712:	6a03      	ldr	r3, [r0, #32]
 8003714:	b90b      	cbnz	r3, 800371a <_fflush_r+0x1a>
 8003716:	f7ff fa8f 	bl	8002c38 <__sinit>
 800371a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f3      	beq.n	800370a <_fflush_r+0xa>
 8003722:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003724:	07d0      	lsls	r0, r2, #31
 8003726:	d404      	bmi.n	8003732 <_fflush_r+0x32>
 8003728:	0599      	lsls	r1, r3, #22
 800372a:	d402      	bmi.n	8003732 <_fflush_r+0x32>
 800372c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800372e:	f7ff fb96 	bl	8002e5e <__retarget_lock_acquire_recursive>
 8003732:	4628      	mov	r0, r5
 8003734:	4621      	mov	r1, r4
 8003736:	f7ff ff63 	bl	8003600 <__sflush_r>
 800373a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800373c:	4605      	mov	r5, r0
 800373e:	07da      	lsls	r2, r3, #31
 8003740:	d4e4      	bmi.n	800370c <_fflush_r+0xc>
 8003742:	89a3      	ldrh	r3, [r4, #12]
 8003744:	059b      	lsls	r3, r3, #22
 8003746:	d4e1      	bmi.n	800370c <_fflush_r+0xc>
 8003748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800374a:	f7ff fb89 	bl	8002e60 <__retarget_lock_release_recursive>
 800374e:	e7dd      	b.n	800370c <_fflush_r+0xc>

08003750 <__swbuf_r>:
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	460e      	mov	r6, r1
 8003754:	4614      	mov	r4, r2
 8003756:	4605      	mov	r5, r0
 8003758:	b118      	cbz	r0, 8003762 <__swbuf_r+0x12>
 800375a:	6a03      	ldr	r3, [r0, #32]
 800375c:	b90b      	cbnz	r3, 8003762 <__swbuf_r+0x12>
 800375e:	f7ff fa6b 	bl	8002c38 <__sinit>
 8003762:	69a3      	ldr	r3, [r4, #24]
 8003764:	60a3      	str	r3, [r4, #8]
 8003766:	89a3      	ldrh	r3, [r4, #12]
 8003768:	071a      	lsls	r2, r3, #28
 800376a:	d501      	bpl.n	8003770 <__swbuf_r+0x20>
 800376c:	6923      	ldr	r3, [r4, #16]
 800376e:	b943      	cbnz	r3, 8003782 <__swbuf_r+0x32>
 8003770:	4621      	mov	r1, r4
 8003772:	4628      	mov	r0, r5
 8003774:	f000 f82a 	bl	80037cc <__swsetup_r>
 8003778:	b118      	cbz	r0, 8003782 <__swbuf_r+0x32>
 800377a:	f04f 37ff 	mov.w	r7, #4294967295
 800377e:	4638      	mov	r0, r7
 8003780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	6922      	ldr	r2, [r4, #16]
 8003786:	b2f6      	uxtb	r6, r6
 8003788:	1a98      	subs	r0, r3, r2
 800378a:	6963      	ldr	r3, [r4, #20]
 800378c:	4637      	mov	r7, r6
 800378e:	4283      	cmp	r3, r0
 8003790:	dc05      	bgt.n	800379e <__swbuf_r+0x4e>
 8003792:	4621      	mov	r1, r4
 8003794:	4628      	mov	r0, r5
 8003796:	f7ff ffb3 	bl	8003700 <_fflush_r>
 800379a:	2800      	cmp	r0, #0
 800379c:	d1ed      	bne.n	800377a <__swbuf_r+0x2a>
 800379e:	68a3      	ldr	r3, [r4, #8]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	60a3      	str	r3, [r4, #8]
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	6022      	str	r2, [r4, #0]
 80037aa:	701e      	strb	r6, [r3, #0]
 80037ac:	6962      	ldr	r2, [r4, #20]
 80037ae:	1c43      	adds	r3, r0, #1
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d004      	beq.n	80037be <__swbuf_r+0x6e>
 80037b4:	89a3      	ldrh	r3, [r4, #12]
 80037b6:	07db      	lsls	r3, r3, #31
 80037b8:	d5e1      	bpl.n	800377e <__swbuf_r+0x2e>
 80037ba:	2e0a      	cmp	r6, #10
 80037bc:	d1df      	bne.n	800377e <__swbuf_r+0x2e>
 80037be:	4621      	mov	r1, r4
 80037c0:	4628      	mov	r0, r5
 80037c2:	f7ff ff9d 	bl	8003700 <_fflush_r>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d0d9      	beq.n	800377e <__swbuf_r+0x2e>
 80037ca:	e7d6      	b.n	800377a <__swbuf_r+0x2a>

080037cc <__swsetup_r>:
 80037cc:	b538      	push	{r3, r4, r5, lr}
 80037ce:	4b29      	ldr	r3, [pc, #164]	@ (8003874 <__swsetup_r+0xa8>)
 80037d0:	4605      	mov	r5, r0
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	460c      	mov	r4, r1
 80037d6:	b118      	cbz	r0, 80037e0 <__swsetup_r+0x14>
 80037d8:	6a03      	ldr	r3, [r0, #32]
 80037da:	b90b      	cbnz	r3, 80037e0 <__swsetup_r+0x14>
 80037dc:	f7ff fa2c 	bl	8002c38 <__sinit>
 80037e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037e4:	0719      	lsls	r1, r3, #28
 80037e6:	d422      	bmi.n	800382e <__swsetup_r+0x62>
 80037e8:	06da      	lsls	r2, r3, #27
 80037ea:	d407      	bmi.n	80037fc <__swsetup_r+0x30>
 80037ec:	2209      	movs	r2, #9
 80037ee:	602a      	str	r2, [r5, #0]
 80037f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037f4:	f04f 30ff 	mov.w	r0, #4294967295
 80037f8:	81a3      	strh	r3, [r4, #12]
 80037fa:	e033      	b.n	8003864 <__swsetup_r+0x98>
 80037fc:	0758      	lsls	r0, r3, #29
 80037fe:	d512      	bpl.n	8003826 <__swsetup_r+0x5a>
 8003800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003802:	b141      	cbz	r1, 8003816 <__swsetup_r+0x4a>
 8003804:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003808:	4299      	cmp	r1, r3
 800380a:	d002      	beq.n	8003812 <__swsetup_r+0x46>
 800380c:	4628      	mov	r0, r5
 800380e:	f7ff fb2f 	bl	8002e70 <_free_r>
 8003812:	2300      	movs	r3, #0
 8003814:	6363      	str	r3, [r4, #52]	@ 0x34
 8003816:	89a3      	ldrh	r3, [r4, #12]
 8003818:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800381c:	81a3      	strh	r3, [r4, #12]
 800381e:	2300      	movs	r3, #0
 8003820:	6063      	str	r3, [r4, #4]
 8003822:	6923      	ldr	r3, [r4, #16]
 8003824:	6023      	str	r3, [r4, #0]
 8003826:	89a3      	ldrh	r3, [r4, #12]
 8003828:	f043 0308 	orr.w	r3, r3, #8
 800382c:	81a3      	strh	r3, [r4, #12]
 800382e:	6923      	ldr	r3, [r4, #16]
 8003830:	b94b      	cbnz	r3, 8003846 <__swsetup_r+0x7a>
 8003832:	89a3      	ldrh	r3, [r4, #12]
 8003834:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800383c:	d003      	beq.n	8003846 <__swsetup_r+0x7a>
 800383e:	4621      	mov	r1, r4
 8003840:	4628      	mov	r0, r5
 8003842:	f000 f8a0 	bl	8003986 <__smakebuf_r>
 8003846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800384a:	f013 0201 	ands.w	r2, r3, #1
 800384e:	d00a      	beq.n	8003866 <__swsetup_r+0x9a>
 8003850:	2200      	movs	r2, #0
 8003852:	60a2      	str	r2, [r4, #8]
 8003854:	6962      	ldr	r2, [r4, #20]
 8003856:	4252      	negs	r2, r2
 8003858:	61a2      	str	r2, [r4, #24]
 800385a:	6922      	ldr	r2, [r4, #16]
 800385c:	b942      	cbnz	r2, 8003870 <__swsetup_r+0xa4>
 800385e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003862:	d1c5      	bne.n	80037f0 <__swsetup_r+0x24>
 8003864:	bd38      	pop	{r3, r4, r5, pc}
 8003866:	0799      	lsls	r1, r3, #30
 8003868:	bf58      	it	pl
 800386a:	6962      	ldrpl	r2, [r4, #20]
 800386c:	60a2      	str	r2, [r4, #8]
 800386e:	e7f4      	b.n	800385a <__swsetup_r+0x8e>
 8003870:	2000      	movs	r0, #0
 8003872:	e7f7      	b.n	8003864 <__swsetup_r+0x98>
 8003874:	20000064 	.word	0x20000064

08003878 <_raise_r>:
 8003878:	291f      	cmp	r1, #31
 800387a:	b538      	push	{r3, r4, r5, lr}
 800387c:	4605      	mov	r5, r0
 800387e:	460c      	mov	r4, r1
 8003880:	d904      	bls.n	800388c <_raise_r+0x14>
 8003882:	2316      	movs	r3, #22
 8003884:	6003      	str	r3, [r0, #0]
 8003886:	f04f 30ff 	mov.w	r0, #4294967295
 800388a:	bd38      	pop	{r3, r4, r5, pc}
 800388c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800388e:	b112      	cbz	r2, 8003896 <_raise_r+0x1e>
 8003890:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003894:	b94b      	cbnz	r3, 80038aa <_raise_r+0x32>
 8003896:	4628      	mov	r0, r5
 8003898:	f000 f830 	bl	80038fc <_getpid_r>
 800389c:	4622      	mov	r2, r4
 800389e:	4601      	mov	r1, r0
 80038a0:	4628      	mov	r0, r5
 80038a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038a6:	f000 b817 	b.w	80038d8 <_kill_r>
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d00a      	beq.n	80038c4 <_raise_r+0x4c>
 80038ae:	1c59      	adds	r1, r3, #1
 80038b0:	d103      	bne.n	80038ba <_raise_r+0x42>
 80038b2:	2316      	movs	r3, #22
 80038b4:	6003      	str	r3, [r0, #0]
 80038b6:	2001      	movs	r0, #1
 80038b8:	e7e7      	b.n	800388a <_raise_r+0x12>
 80038ba:	2100      	movs	r1, #0
 80038bc:	4620      	mov	r0, r4
 80038be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80038c2:	4798      	blx	r3
 80038c4:	2000      	movs	r0, #0
 80038c6:	e7e0      	b.n	800388a <_raise_r+0x12>

080038c8 <raise>:
 80038c8:	4b02      	ldr	r3, [pc, #8]	@ (80038d4 <raise+0xc>)
 80038ca:	4601      	mov	r1, r0
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	f7ff bfd3 	b.w	8003878 <_raise_r>
 80038d2:	bf00      	nop
 80038d4:	20000064 	.word	0x20000064

080038d8 <_kill_r>:
 80038d8:	b538      	push	{r3, r4, r5, lr}
 80038da:	2300      	movs	r3, #0
 80038dc:	4d06      	ldr	r5, [pc, #24]	@ (80038f8 <_kill_r+0x20>)
 80038de:	4604      	mov	r4, r0
 80038e0:	4608      	mov	r0, r1
 80038e2:	4611      	mov	r1, r2
 80038e4:	602b      	str	r3, [r5, #0]
 80038e6:	f7fd fbb0 	bl	800104a <_kill>
 80038ea:	1c43      	adds	r3, r0, #1
 80038ec:	d102      	bne.n	80038f4 <_kill_r+0x1c>
 80038ee:	682b      	ldr	r3, [r5, #0]
 80038f0:	b103      	cbz	r3, 80038f4 <_kill_r+0x1c>
 80038f2:	6023      	str	r3, [r4, #0]
 80038f4:	bd38      	pop	{r3, r4, r5, pc}
 80038f6:	bf00      	nop
 80038f8:	20000820 	.word	0x20000820

080038fc <_getpid_r>:
 80038fc:	f7fd bb9e 	b.w	800103c <_getpid>

08003900 <_sbrk_r>:
 8003900:	b538      	push	{r3, r4, r5, lr}
 8003902:	2300      	movs	r3, #0
 8003904:	4d05      	ldr	r5, [pc, #20]	@ (800391c <_sbrk_r+0x1c>)
 8003906:	4604      	mov	r4, r0
 8003908:	4608      	mov	r0, r1
 800390a:	602b      	str	r3, [r5, #0]
 800390c:	f7fd fc22 	bl	8001154 <_sbrk>
 8003910:	1c43      	adds	r3, r0, #1
 8003912:	d102      	bne.n	800391a <_sbrk_r+0x1a>
 8003914:	682b      	ldr	r3, [r5, #0]
 8003916:	b103      	cbz	r3, 800391a <_sbrk_r+0x1a>
 8003918:	6023      	str	r3, [r4, #0]
 800391a:	bd38      	pop	{r3, r4, r5, pc}
 800391c:	20000820 	.word	0x20000820

08003920 <memchr>:
 8003920:	4603      	mov	r3, r0
 8003922:	b510      	push	{r4, lr}
 8003924:	b2c9      	uxtb	r1, r1
 8003926:	4402      	add	r2, r0
 8003928:	4293      	cmp	r3, r2
 800392a:	4618      	mov	r0, r3
 800392c:	d101      	bne.n	8003932 <memchr+0x12>
 800392e:	2000      	movs	r0, #0
 8003930:	e003      	b.n	800393a <memchr+0x1a>
 8003932:	7804      	ldrb	r4, [r0, #0]
 8003934:	3301      	adds	r3, #1
 8003936:	428c      	cmp	r4, r1
 8003938:	d1f6      	bne.n	8003928 <memchr+0x8>
 800393a:	bd10      	pop	{r4, pc}

0800393c <__swhatbuf_r>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	460c      	mov	r4, r1
 8003940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003944:	4615      	mov	r5, r2
 8003946:	2900      	cmp	r1, #0
 8003948:	461e      	mov	r6, r3
 800394a:	b096      	sub	sp, #88	@ 0x58
 800394c:	da0c      	bge.n	8003968 <__swhatbuf_r+0x2c>
 800394e:	89a3      	ldrh	r3, [r4, #12]
 8003950:	2100      	movs	r1, #0
 8003952:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003956:	bf14      	ite	ne
 8003958:	2340      	movne	r3, #64	@ 0x40
 800395a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800395e:	2000      	movs	r0, #0
 8003960:	6031      	str	r1, [r6, #0]
 8003962:	602b      	str	r3, [r5, #0]
 8003964:	b016      	add	sp, #88	@ 0x58
 8003966:	bd70      	pop	{r4, r5, r6, pc}
 8003968:	466a      	mov	r2, sp
 800396a:	f000 f849 	bl	8003a00 <_fstat_r>
 800396e:	2800      	cmp	r0, #0
 8003970:	dbed      	blt.n	800394e <__swhatbuf_r+0x12>
 8003972:	9901      	ldr	r1, [sp, #4]
 8003974:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003978:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800397c:	4259      	negs	r1, r3
 800397e:	4159      	adcs	r1, r3
 8003980:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003984:	e7eb      	b.n	800395e <__swhatbuf_r+0x22>

08003986 <__smakebuf_r>:
 8003986:	898b      	ldrh	r3, [r1, #12]
 8003988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800398a:	079d      	lsls	r5, r3, #30
 800398c:	4606      	mov	r6, r0
 800398e:	460c      	mov	r4, r1
 8003990:	d507      	bpl.n	80039a2 <__smakebuf_r+0x1c>
 8003992:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003996:	6023      	str	r3, [r4, #0]
 8003998:	6123      	str	r3, [r4, #16]
 800399a:	2301      	movs	r3, #1
 800399c:	6163      	str	r3, [r4, #20]
 800399e:	b003      	add	sp, #12
 80039a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039a2:	466a      	mov	r2, sp
 80039a4:	ab01      	add	r3, sp, #4
 80039a6:	f7ff ffc9 	bl	800393c <__swhatbuf_r>
 80039aa:	9f00      	ldr	r7, [sp, #0]
 80039ac:	4605      	mov	r5, r0
 80039ae:	4639      	mov	r1, r7
 80039b0:	4630      	mov	r0, r6
 80039b2:	f7ff fac7 	bl	8002f44 <_malloc_r>
 80039b6:	b948      	cbnz	r0, 80039cc <__smakebuf_r+0x46>
 80039b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039bc:	059a      	lsls	r2, r3, #22
 80039be:	d4ee      	bmi.n	800399e <__smakebuf_r+0x18>
 80039c0:	f023 0303 	bic.w	r3, r3, #3
 80039c4:	f043 0302 	orr.w	r3, r3, #2
 80039c8:	81a3      	strh	r3, [r4, #12]
 80039ca:	e7e2      	b.n	8003992 <__smakebuf_r+0xc>
 80039cc:	89a3      	ldrh	r3, [r4, #12]
 80039ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80039d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039d6:	81a3      	strh	r3, [r4, #12]
 80039d8:	9b01      	ldr	r3, [sp, #4]
 80039da:	6020      	str	r0, [r4, #0]
 80039dc:	b15b      	cbz	r3, 80039f6 <__smakebuf_r+0x70>
 80039de:	4630      	mov	r0, r6
 80039e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039e4:	f000 f81e 	bl	8003a24 <_isatty_r>
 80039e8:	b128      	cbz	r0, 80039f6 <__smakebuf_r+0x70>
 80039ea:	89a3      	ldrh	r3, [r4, #12]
 80039ec:	f023 0303 	bic.w	r3, r3, #3
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	81a3      	strh	r3, [r4, #12]
 80039f6:	89a3      	ldrh	r3, [r4, #12]
 80039f8:	431d      	orrs	r5, r3
 80039fa:	81a5      	strh	r5, [r4, #12]
 80039fc:	e7cf      	b.n	800399e <__smakebuf_r+0x18>
	...

08003a00 <_fstat_r>:
 8003a00:	b538      	push	{r3, r4, r5, lr}
 8003a02:	2300      	movs	r3, #0
 8003a04:	4d06      	ldr	r5, [pc, #24]	@ (8003a20 <_fstat_r+0x20>)
 8003a06:	4604      	mov	r4, r0
 8003a08:	4608      	mov	r0, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	602b      	str	r3, [r5, #0]
 8003a0e:	f7fd fb7b 	bl	8001108 <_fstat>
 8003a12:	1c43      	adds	r3, r0, #1
 8003a14:	d102      	bne.n	8003a1c <_fstat_r+0x1c>
 8003a16:	682b      	ldr	r3, [r5, #0]
 8003a18:	b103      	cbz	r3, 8003a1c <_fstat_r+0x1c>
 8003a1a:	6023      	str	r3, [r4, #0]
 8003a1c:	bd38      	pop	{r3, r4, r5, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000820 	.word	0x20000820

08003a24 <_isatty_r>:
 8003a24:	b538      	push	{r3, r4, r5, lr}
 8003a26:	2300      	movs	r3, #0
 8003a28:	4d05      	ldr	r5, [pc, #20]	@ (8003a40 <_isatty_r+0x1c>)
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	4608      	mov	r0, r1
 8003a2e:	602b      	str	r3, [r5, #0]
 8003a30:	f7fd fb79 	bl	8001126 <_isatty>
 8003a34:	1c43      	adds	r3, r0, #1
 8003a36:	d102      	bne.n	8003a3e <_isatty_r+0x1a>
 8003a38:	682b      	ldr	r3, [r5, #0]
 8003a3a:	b103      	cbz	r3, 8003a3e <_isatty_r+0x1a>
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	bd38      	pop	{r3, r4, r5, pc}
 8003a40:	20000820 	.word	0x20000820

08003a44 <_init>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr

08003a50 <_fini>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	bf00      	nop
 8003a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a56:	bc08      	pop	{r3}
 8003a58:	469e      	mov	lr, r3
 8003a5a:	4770      	bx	lr

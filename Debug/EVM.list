
EVM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000271c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08002828  08002828  00003828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002924  08002924  0000409c  2**0
                  CONTENTS
  4 .ARM          00000000  08002924  08002924  0000409c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002924  08002924  0000409c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002924  08002924  00003924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002928  08002928  00003928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  0800292c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000009c  080029c8  0000409c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  080029c8  00004288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000409c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000725a  00000000  00000000  000040c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000181a  00000000  00000000  0000b31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0000cb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000688  00000000  00000000  0000d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176c7  00000000  00000000  0000da60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d71  00000000  00000000  00025127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000843f2  00000000  00000000  0002ee98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b328a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002450  00000000  00000000  000b32d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000b5720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002810 	.word	0x08002810

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08002810 	.word	0x08002810

0800014c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000156:	4a38      	ldr	r2, [pc, #224]	@ (8000238 <HD44780_Init+0xec>)
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800015c:	4b37      	ldr	r3, [pc, #220]	@ (800023c <HD44780_Init+0xf0>)
 800015e:	2208      	movs	r2, #8
 8000160:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000162:	4b37      	ldr	r3, [pc, #220]	@ (8000240 <HD44780_Init+0xf4>)
 8000164:	2200      	movs	r2, #0
 8000166:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000168:	4b33      	ldr	r3, [pc, #204]	@ (8000238 <HD44780_Init+0xec>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d907      	bls.n	8000180 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000170:	4b33      	ldr	r3, [pc, #204]	@ (8000240 <HD44780_Init+0xf4>)
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	f043 0308 	orr.w	r3, r3, #8
 8000178:	b2da      	uxtb	r2, r3
 800017a:	4b31      	ldr	r3, [pc, #196]	@ (8000240 <HD44780_Init+0xf4>)
 800017c:	701a      	strb	r2, [r3, #0]
 800017e:	e006      	b.n	800018e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000180:	4b2f      	ldr	r3, [pc, #188]	@ (8000240 <HD44780_Init+0xf4>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	f043 0304 	orr.w	r3, r3, #4
 8000188:	b2da      	uxtb	r2, r3
 800018a:	4b2d      	ldr	r3, [pc, #180]	@ (8000240 <HD44780_Init+0xf4>)
 800018c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800018e:	f000 f985 	bl	800049c <DelayInit>
  HAL_Delay(50);
 8000192:	2032      	movs	r0, #50	@ 0x32
 8000194:	f000 fef6 	bl	8000f84 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000198:	4b28      	ldr	r3, [pc, #160]	@ (800023c <HD44780_Init+0xf0>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	4618      	mov	r0, r3
 800019e:	f000 f943 	bl	8000428 <ExpanderWrite>
  HAL_Delay(1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001a6:	f000 feed 	bl	8000f84 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001aa:	2030      	movs	r0, #48	@ 0x30
 80001ac:	f000 f92b 	bl	8000406 <Write4Bits>
  DelayUS(4500);
 80001b0:	f241 1094 	movw	r0, #4500	@ 0x1194
 80001b4:	f000 f99a 	bl	80004ec <DelayUS>

  Write4Bits(0x03 << 4);
 80001b8:	2030      	movs	r0, #48	@ 0x30
 80001ba:	f000 f924 	bl	8000406 <Write4Bits>
  DelayUS(4500);
 80001be:	f241 1094 	movw	r0, #4500	@ 0x1194
 80001c2:	f000 f993 	bl	80004ec <DelayUS>

  Write4Bits(0x03 << 4);
 80001c6:	2030      	movs	r0, #48	@ 0x30
 80001c8:	f000 f91d 	bl	8000406 <Write4Bits>
  DelayUS(4500);
 80001cc:	f241 1094 	movw	r0, #4500	@ 0x1194
 80001d0:	f000 f98c 	bl	80004ec <DelayUS>

  Write4Bits(0x02 << 4);
 80001d4:	2020      	movs	r0, #32
 80001d6:	f000 f916 	bl	8000406 <Write4Bits>
  DelayUS(100);
 80001da:	2064      	movs	r0, #100	@ 0x64
 80001dc:	f000 f986 	bl	80004ec <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e0:	4b17      	ldr	r3, [pc, #92]	@ (8000240 <HD44780_Init+0xf4>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	f043 0320 	orr.w	r3, r3, #32
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f8ce 	bl	800038c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f0:	4b14      	ldr	r3, [pc, #80]	@ (8000244 <HD44780_Init+0xf8>)
 80001f2:	2204      	movs	r2, #4
 80001f4:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80001f6:	f000 f875 	bl	80002e4 <HD44780_Display>
  HD44780_Clear();
 80001fa:	f000 f82b 	bl	8000254 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80001fe:	4b12      	ldr	r3, [pc, #72]	@ (8000248 <HD44780_Init+0xfc>)
 8000200:	2202      	movs	r2, #2
 8000202:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000204:	4b10      	ldr	r3, [pc, #64]	@ (8000248 <HD44780_Init+0xfc>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	f043 0304 	orr.w	r3, r3, #4
 800020c:	b2db      	uxtb	r3, r3
 800020e:	4618      	mov	r0, r3
 8000210:	f000 f8bc 	bl	800038c <SendCommand>
  DelayUS(4500);
 8000214:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000218:	f000 f968 	bl	80004ec <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800021c:	490b      	ldr	r1, [pc, #44]	@ (800024c <HD44780_Init+0x100>)
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f876 	bl	8000310 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000224:	490a      	ldr	r1, [pc, #40]	@ (8000250 <HD44780_Init+0x104>)
 8000226:	2001      	movs	r0, #1
 8000228:	f000 f872 	bl	8000310 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800022c:	f000 f81d 	bl	800026a <HD44780_Home>
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	200000bb 	.word	0x200000bb
 800023c:	200000bc 	.word	0x200000bc
 8000240:	200000b8 	.word	0x200000b8
 8000244:	200000b9 	.word	0x200000b9
 8000248:	200000ba 	.word	0x200000ba
 800024c:	20000000 	.word	0x20000000
 8000250:	20000008 	.word	0x20000008

08000254 <HD44780_Clear>:

void HD44780_Clear()
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000258:	2001      	movs	r0, #1
 800025a:	f000 f897 	bl	800038c <SendCommand>
  DelayUS(2000);
 800025e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000262:	f000 f943 	bl	80004ec <DelayUS>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}

0800026a <HD44780_Home>:

void HD44780_Home()
{
 800026a:	b580      	push	{r7, lr}
 800026c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800026e:	2002      	movs	r0, #2
 8000270:	f000 f88c 	bl	800038c <SendCommand>
  DelayUS(2000);
 8000274:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000278:	f000 f938 	bl	80004ec <DelayUS>
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}

08000280 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b087      	sub	sp, #28
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	460a      	mov	r2, r1
 800028a:	71fb      	strb	r3, [r7, #7]
 800028c:	4613      	mov	r3, r2
 800028e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000290:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <HD44780_SetCursor+0x5c>)
 8000292:	f107 0408 	add.w	r4, r7, #8
 8000296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800029c:	4b10      	ldr	r3, [pc, #64]	@ (80002e0 <HD44780_SetCursor+0x60>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	79ba      	ldrb	r2, [r7, #6]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d303      	bcc.n	80002ae <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <HD44780_SetCursor+0x60>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	3b01      	subs	r3, #1
 80002ac:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	3318      	adds	r3, #24
 80002b4:	443b      	add	r3, r7
 80002b6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	4413      	add	r3, r2
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	b25b      	sxtb	r3, r3
 80002c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002c8:	b25b      	sxtb	r3, r3
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f85d 	bl	800038c <SendCommand>
}
 80002d2:	bf00      	nop
 80002d4:	371c      	adds	r7, #28
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd90      	pop	{r4, r7, pc}
 80002da:	bf00      	nop
 80002dc:	08002828 	.word	0x08002828
 80002e0:	200000bb 	.word	0x200000bb

080002e4 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80002e8:	4b08      	ldr	r3, [pc, #32]	@ (800030c <HD44780_Display+0x28>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	4b06      	ldr	r3, [pc, #24]	@ (800030c <HD44780_Display+0x28>)
 80002f4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80002f6:	4b05      	ldr	r3, [pc, #20]	@ (800030c <HD44780_Display+0x28>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f843 	bl	800038c <SendCommand>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	200000b9 	.word	0x200000b9

08000310 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	6039      	str	r1, [r7, #0]
 800031a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f003 0307 	and.w	r3, r3, #7
 8000322:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	00db      	lsls	r3, r3, #3
 8000328:	b25b      	sxtb	r3, r3
 800032a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800032e:	b25b      	sxtb	r3, r3
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f82a 	bl	800038c <SendCommand>
  for (int i=0; i<8; i++)
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	e009      	b.n	8000352 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	683a      	ldr	r2, [r7, #0]
 8000342:	4413      	add	r3, r2
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	4618      	mov	r0, r3
 8000348:	f000 f82e 	bl	80003a8 <SendChar>
  for (int i=0; i<8; i++)
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	3301      	adds	r3, #1
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2b07      	cmp	r3, #7
 8000356:	ddf2      	ble.n	800033e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000358:	bf00      	nop
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b082      	sub	sp, #8
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800036a:	e006      	b.n	800037a <HD44780_PrintStr+0x18>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	1c5a      	adds	r2, r3, #1
 8000370:	607a      	str	r2, [r7, #4]
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f817 	bl	80003a8 <SendChar>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d1f4      	bne.n	800036c <HD44780_PrintStr+0xa>
}
 8000382:	bf00      	nop
 8000384:	bf00      	nop
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f000 f812 	bl	80003c4 <Send>
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2101      	movs	r1, #1
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 f804 	bl	80003c4 <Send>
}
 80003bc:	bf00      	nop
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	460a      	mov	r2, r1
 80003ce:	71fb      	strb	r3, [r7, #7]
 80003d0:	4613      	mov	r3, r2
 80003d2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	f023 030f 	bic.w	r3, r3, #15
 80003da:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	011b      	lsls	r3, r3, #4
 80003e0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80003e2:	7bfa      	ldrb	r2, [r7, #15]
 80003e4:	79bb      	ldrb	r3, [r7, #6]
 80003e6:	4313      	orrs	r3, r2
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f80b 	bl	8000406 <Write4Bits>
  Write4Bits((lownib)|mode);
 80003f0:	7bba      	ldrb	r2, [r7, #14]
 80003f2:	79bb      	ldrb	r3, [r7, #6]
 80003f4:	4313      	orrs	r3, r2
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 f804 	bl	8000406 <Write4Bits>
}
 80003fe:	bf00      	nop
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b082      	sub	sp, #8
 800040a:	af00      	add	r7, sp, #0
 800040c:	4603      	mov	r3, r0
 800040e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	4618      	mov	r0, r3
 8000414:	f000 f808 	bl	8000428 <ExpanderWrite>
  PulseEnable(value);
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	4618      	mov	r0, r3
 800041c:	f000 f820 	bl	8000460 <PulseEnable>
}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af02      	add	r7, sp, #8
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000432:	4b09      	ldr	r3, [pc, #36]	@ (8000458 <ExpanderWrite+0x30>)
 8000434:	781a      	ldrb	r2, [r3, #0]
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	4313      	orrs	r3, r2
 800043a:	b2db      	uxtb	r3, r3
 800043c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800043e:	f107 020f 	add.w	r2, r7, #15
 8000442:	230a      	movs	r3, #10
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	2301      	movs	r3, #1
 8000448:	214e      	movs	r1, #78	@ 0x4e
 800044a:	4804      	ldr	r0, [pc, #16]	@ (800045c <ExpanderWrite+0x34>)
 800044c:	f001 f9dc 	bl	8001808 <HAL_I2C_Master_Transmit>
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	200000bc 	.word	0x200000bc
 800045c:	200000c0 	.word	0x200000c0

08000460 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	f043 0304 	orr.w	r3, r3, #4
 8000470:	b2db      	uxtb	r3, r3
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff ffd8 	bl	8000428 <ExpanderWrite>
  DelayUS(20);
 8000478:	2014      	movs	r0, #20
 800047a:	f000 f837 	bl	80004ec <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	f023 0304 	bic.w	r3, r3, #4
 8000484:	b2db      	uxtb	r3, r3
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ffce 	bl	8000428 <ExpanderWrite>
  DelayUS(20);
 800048c:	2014      	movs	r0, #20
 800048e:	f000 f82d 	bl	80004ec <DelayUS>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <DelayInit>:

static void DelayInit(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80004a0:	4b10      	ldr	r3, [pc, #64]	@ (80004e4 <DelayInit+0x48>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	4a0f      	ldr	r2, [pc, #60]	@ (80004e4 <DelayInit+0x48>)
 80004a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004aa:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80004ac:	4b0d      	ldr	r3, [pc, #52]	@ (80004e4 <DelayInit+0x48>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	4a0c      	ldr	r2, [pc, #48]	@ (80004e4 <DelayInit+0x48>)
 80004b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004b6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004b8:	4b0b      	ldr	r3, [pc, #44]	@ (80004e8 <DelayInit+0x4c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a0a      	ldr	r2, [pc, #40]	@ (80004e8 <DelayInit+0x4c>)
 80004be:	f023 0301 	bic.w	r3, r3, #1
 80004c2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004c4:	4b08      	ldr	r3, [pc, #32]	@ (80004e8 <DelayInit+0x4c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a07      	ldr	r2, [pc, #28]	@ (80004e8 <DelayInit+0x4c>)
 80004ca:	f043 0301 	orr.w	r3, r3, #1
 80004ce:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80004d0:	4b05      	ldr	r3, [pc, #20]	@ (80004e8 <DelayInit+0x4c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80004d6:	bf00      	nop
  __ASM volatile ("NOP");
 80004d8:	bf00      	nop
  __ASM volatile ("NOP");
 80004da:	bf00      	nop
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	e000edf0 	.word	0xe000edf0
 80004e8:	e0001000 	.word	0xe0001000

080004ec <DelayUS>:

static void DelayUS(uint32_t us) {
 80004ec:	b480      	push	{r7}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80004f4:	4b0d      	ldr	r3, [pc, #52]	@ (800052c <DelayUS+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000530 <DelayUS+0x44>)
 80004fa:	fba2 2303 	umull	r2, r3, r2, r3
 80004fe:	0c9a      	lsrs	r2, r3, #18
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	fb02 f303 	mul.w	r3, r2, r3
 8000506:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000508:	4b0a      	ldr	r3, [pc, #40]	@ (8000534 <DelayUS+0x48>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800050e:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <DelayUS+0x48>)
 8000510:	685a      	ldr	r2, [r3, #4]
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	697a      	ldr	r2, [r7, #20]
 800051c:	429a      	cmp	r2, r3
 800051e:	d8f6      	bhi.n	800050e <DelayUS+0x22>
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	371c      	adds	r7, #28
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	20000040 	.word	0x20000040
 8000530:	431bde83 	.word	0x431bde83
 8000534:	e0001000 	.word	0xe0001000

08000538 <clear_console>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void clear_console() {
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	HD44780_Clear();
 800053c:	f7ff fe8a 	bl	8000254 <HD44780_Clear>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <show_text>:

void show_text(int x, int y, char* text, int clear) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
 8000550:	603b      	str	r3, [r7, #0]
	if (clear) {
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <show_text+0x18>
		clear_console();
 8000558:	f7ff ffee 	bl	8000538 <clear_console>
	}

	HD44780_SetCursor(x, y);
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	68ba      	ldr	r2, [r7, #8]
 8000562:	b2d2      	uxtb	r2, r2
 8000564:	4611      	mov	r1, r2
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff fe8a 	bl	8000280 <HD44780_SetCursor>
	HD44780_PrintStr(text);
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f7ff fef8 	bl	8000362 <HD44780_PrintStr>
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <show_heading>:
		   {"Vote Success!", "#.Exit"}
          };

int counts[4];

void show_heading() {
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
	if (current_state == COUNT_STATE) {
 8000582:	4b27      	ldr	r3, [pc, #156]	@ (8000620 <show_heading+0xa4>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b04      	cmp	r3, #4
 8000588:	d130      	bne.n	80005ec <show_heading+0x70>
		char a_label[] = "A: ";
 800058a:	4b26      	ldr	r3, [pc, #152]	@ (8000624 <show_heading+0xa8>)
 800058c:	617b      	str	r3, [r7, #20]
		char a_count[5];
		itoa(counts[0], a_count, 10);
 800058e:	4b26      	ldr	r3, [pc, #152]	@ (8000628 <show_heading+0xac>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f107 010c 	add.w	r1, r7, #12
 8000596:	220a      	movs	r2, #10
 8000598:	4618      	mov	r0, r3
 800059a:	f002 f8b3 	bl	8002704 <itoa>
		strcat(a_label, a_count);
 800059e:	f107 020c 	add.w	r2, r7, #12
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4611      	mov	r1, r2
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 f8f7 	bl	800279c <strcat>
		show_text(0, 0, a_label, 0);
 80005ae:	f107 0214 	add.w	r2, r7, #20
 80005b2:	2300      	movs	r3, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff ffc4 	bl	8000544 <show_text>

		char b_label[] = "B: ";
 80005bc:	4b1b      	ldr	r3, [pc, #108]	@ (800062c <show_heading+0xb0>)
 80005be:	60bb      	str	r3, [r7, #8]
		char b_count[5];
		itoa(counts[1], b_count, 10);
 80005c0:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <show_heading+0xac>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	4639      	mov	r1, r7
 80005c6:	220a      	movs	r2, #10
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 f89b 	bl	8002704 <itoa>
		strcat(b_label, b_count);
 80005ce:	463a      	mov	r2, r7
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	4611      	mov	r1, r2
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 f8e0 	bl	800279c <strcat>
		show_text(8, 0, b_label, 0);
 80005dc:	f107 0208 	add.w	r2, r7, #8
 80005e0:	2300      	movs	r3, #0
 80005e2:	2100      	movs	r1, #0
 80005e4:	2008      	movs	r0, #8
 80005e6:	f7ff ffad 	bl	8000544 <show_text>
	} else {
		show_text(0, 0, headings[current_state][0], 0);
		show_text(0, 1, headings[current_state][1], 0);
	}

}
 80005ea:	e014      	b.n	8000616 <show_heading+0x9a>
		show_text(0, 0, headings[current_state][0], 0);
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <show_heading+0xa4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000630 <show_heading+0xb4>)
 80005f2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80005f6:	2300      	movs	r3, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ffa2 	bl	8000544 <show_text>
		show_text(0, 1, headings[current_state][1], 0);
 8000600:	4b07      	ldr	r3, [pc, #28]	@ (8000620 <show_heading+0xa4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a0a      	ldr	r2, [pc, #40]	@ (8000630 <show_heading+0xb4>)
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	4413      	add	r3, r2
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	2300      	movs	r3, #0
 800060e:	2101      	movs	r1, #1
 8000610:	2000      	movs	r0, #0
 8000612:	f7ff ff97 	bl	8000544 <show_text>
}
 8000616:	bf00      	nop
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000134 	.word	0x20000134
 8000624:	00203a41 	.word	0x00203a41
 8000628:	20000138 	.word	0x20000138
 800062c:	00203a42 	.word	0x00203a42
 8000630:	20000010 	.word	0x20000010

08000634 <cast_vote>:

void cast_vote(int option) {
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	++counts[option];
 800063c:	4a06      	ldr	r2, [pc, #24]	@ (8000658 <cast_vote+0x24>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000644:	1c5a      	adds	r2, r3, #1
 8000646:	4904      	ldr	r1, [pc, #16]	@ (8000658 <cast_vote+0x24>)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	20000138 	.word	0x20000138

0800065c <transition>:

void transition(char key_pressed) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
	char pressed[2] = {key_pressed};
 8000666:	2300      	movs	r3, #0
 8000668:	81bb      	strh	r3, [r7, #12]
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	733b      	strb	r3, [r7, #12]
	show_text(15, 0, pressed, 0);
 800066e:	f107 020c 	add.w	r2, r7, #12
 8000672:	2300      	movs	r3, #0
 8000674:	2100      	movs	r1, #0
 8000676:	200f      	movs	r0, #15
 8000678:	f7ff ff64 	bl	8000544 <show_text>
	HAL_Delay(100);
 800067c:	2064      	movs	r0, #100	@ 0x64
 800067e:	f000 fc81 	bl	8000f84 <HAL_Delay>

	char old_state = current_state;
 8000682:	4b2f      	ldr	r3, [pc, #188]	@ (8000740 <transition+0xe4>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	73fb      	strb	r3, [r7, #15]
  if (key_pressed == '?') {
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	2b3f      	cmp	r3, #63	@ 0x3f
 800068c:	d102      	bne.n	8000694 <transition+0x38>
    exit(0);
 800068e:	2000      	movs	r0, #0
 8000690:	f002 f80e 	bl	80026b0 <exit>
  }
  if (key_pressed == '#') {
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	2b23      	cmp	r3, #35	@ 0x23
 8000698:	d105      	bne.n	80006a6 <transition+0x4a>
    current_state = HOME_STATE;
 800069a:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <transition+0xe4>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
    clear_console();
 80006a0:	f7ff ff4a 	bl	8000538 <clear_console>
 80006a4:	e048      	b.n	8000738 <transition+0xdc>
    return;
  }
  if (current_state == HOME_STATE) {
 80006a6:	4b26      	ldr	r3, [pc, #152]	@ (8000740 <transition+0xe4>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d10d      	bne.n	80006ca <transition+0x6e>
    if (key_pressed == '1') {
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	2b31      	cmp	r3, #49	@ 0x31
 80006b2:	d103      	bne.n	80006bc <transition+0x60>
      current_state = VOTE_STATE;
 80006b4:	4b22      	ldr	r3, [pc, #136]	@ (8000740 <transition+0xe4>)
 80006b6:	2202      	movs	r2, #2
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	e036      	b.n	800072a <transition+0xce>
      // printf("Pressed: %d\n", key_pressed);
      // printf("Now state: %d\n", current_state);
    } else if (key_pressed == '2') {
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2b32      	cmp	r3, #50	@ 0x32
 80006c0:	d133      	bne.n	800072a <transition+0xce>
      current_state = MENU_STATE;
 80006c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <transition+0xe4>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	e02f      	b.n	800072a <transition+0xce>
    }
  } else if (current_state == MENU_STATE) {
 80006ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <transition+0xe4>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d10d      	bne.n	80006ee <transition+0x92>
    if (key_pressed == '1') {
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b31      	cmp	r3, #49	@ 0x31
 80006d6:	d103      	bne.n	80006e0 <transition+0x84>
      current_state = STAT_STATE;
 80006d8:	4b19      	ldr	r3, [pc, #100]	@ (8000740 <transition+0xe4>)
 80006da:	2203      	movs	r2, #3
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	e024      	b.n	800072a <transition+0xce>
    } else if (key_pressed == '#') {
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b23      	cmp	r3, #35	@ 0x23
 80006e4:	d121      	bne.n	800072a <transition+0xce>
      current_state = HOME_STATE;
 80006e6:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <transition+0xe4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	e01d      	b.n	800072a <transition+0xce>
    }
  } else if (current_state == VOTE_STATE) {
 80006ee:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <transition+0xe4>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d108      	bne.n	8000708 <transition+0xac>
	  cast_vote(key_pressed - 'A');
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	3b41      	subs	r3, #65	@ 0x41
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ff9a 	bl	8000634 <cast_vote>
	  current_state = SUCCESS_STATE;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <transition+0xe4>)
 8000702:	2205      	movs	r2, #5
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	e010      	b.n	800072a <transition+0xce>

  } else if (current_state == STAT_STATE) {
 8000708:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <transition+0xe4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b03      	cmp	r3, #3
 800070e:	d10c      	bne.n	800072a <transition+0xce>
	  if (key_pressed == '1') {
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	2b31      	cmp	r3, #49	@ 0x31
 8000714:	d103      	bne.n	800071e <transition+0xc2>
		  current_state = COUNT_STATE;
 8000716:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <transition+0xe4>)
 8000718:	2204      	movs	r2, #4
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	e005      	b.n	800072a <transition+0xce>
	  } else if (key_pressed == '#') {
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b23      	cmp	r3, #35	@ 0x23
 8000722:	d102      	bne.n	800072a <transition+0xce>
		  current_state = HOME_STATE;
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <transition+0xe4>)
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
	  }
  }
  if (current_state != old_state)
 800072a:	7bfa      	ldrb	r2, [r7, #15]
 800072c:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <transition+0xe4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	429a      	cmp	r2, r3
 8000732:	d001      	beq.n	8000738 <transition+0xdc>
	  clear_console();
 8000734:	f7ff ff00 	bl	8000538 <clear_console>
}
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000134 	.word	0x20000134

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074a:	f000 fbb9 	bl	8000ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074e:	f000 f83f 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000752:	f000 f8a7 	bl	80008a4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000756:	f000 f877 	bl	8000848 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 800075a:	2002      	movs	r0, #2
 800075c:	f7ff fcf6 	bl	800014c <HD44780_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000766:	4815      	ldr	r0, [pc, #84]	@ (80007bc <main+0x78>)
 8000768:	f000 fed9 	bl	800151e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800076c:	2201      	movs	r2, #1
 800076e:	2108      	movs	r1, #8
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <main+0x7c>)
 8000772:	f000 fed4 	bl	800151e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000776:	2201      	movs	r2, #1
 8000778:	2110      	movs	r1, #16
 800077a:	4811      	ldr	r0, [pc, #68]	@ (80007c0 <main+0x7c>)
 800077c:	f000 fecf 	bl	800151e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000780:	2201      	movs	r2, #1
 8000782:	2120      	movs	r1, #32
 8000784:	480e      	ldr	r0, [pc, #56]	@ (80007c0 <main+0x7c>)
 8000786:	f000 feca 	bl	800151e <HAL_GPIO_WritePin>





  HAL_Delay(100);
 800078a:	2064      	movs	r0, #100	@ 0x64
 800078c:	f000 fbfa 	bl	8000f84 <HAL_Delay>

  while (1)
  {
	  show_heading();
 8000790:	f7ff fef4 	bl	800057c <show_heading>
	  char c = keyPressed;
 8000794:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <main+0x80>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	71fb      	strb	r3, [r7, #7]
	  if (currentMillis > last_when_pressed) {
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <main+0x84>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a0b      	ldr	r2, [pc, #44]	@ (80007cc <main+0x88>)
 80007a0:	6812      	ldr	r2, [r2, #0]
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d9f4      	bls.n	8000790 <main+0x4c>
		  transition(c);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff57 	bl	800065c <transition>
		  last_when_pressed = currentMillis;
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <main+0x84>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	461a      	mov	r2, r3
 80007b4:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <main+0x88>)
 80007b6:	601a      	str	r2, [r3, #0]
  {
 80007b8:	e7ea      	b.n	8000790 <main+0x4c>
 80007ba:	bf00      	nop
 80007bc:	40010800 	.word	0x40010800
 80007c0:	40010c00 	.word	0x40010c00
 80007c4:	2000012c 	.word	0x2000012c
 80007c8:	20000128 	.word	0x20000128
 80007cc:	20000130 	.word	0x20000130

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b090      	sub	sp, #64	@ 0x40
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0318 	add.w	r3, r7, #24
 80007da:	2228      	movs	r2, #40	@ 0x28
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 ffd4 	bl	800278c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f2:	2302      	movs	r3, #2
 80007f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f6:	2301      	movs	r3, #1
 80007f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fa:	2310      	movs	r3, #16
 80007fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007fe:	2300      	movs	r3, #0
 8000800:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0318 	add.w	r3, r7, #24
 8000806:	4618      	mov	r0, r3
 8000808:	f001 fb56 	bl	8001eb8 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000812:	f000 fa57 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f001 fdc4 	bl	80023bc <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800083a:	f000 fa43 	bl	8000cc4 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3740      	adds	r7, #64	@ 0x40
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_I2C2_Init+0x50>)
 800084e:	4a13      	ldr	r2, [pc, #76]	@ (800089c <MX_I2C2_Init+0x54>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_I2C2_Init+0x50>)
 8000854:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <MX_I2C2_Init+0x58>)
 8000856:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_I2C2_Init+0x50>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_I2C2_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_I2C2_Init+0x50>)
 8000866:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800086a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <MX_I2C2_Init+0x50>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_I2C2_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000878:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <MX_I2C2_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_I2C2_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	@ (8000898 <MX_I2C2_Init+0x50>)
 8000886:	f000 fe7b 	bl	8001580 <HAL_I2C_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000890:	f000 fa18 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000c0 	.word	0x200000c0
 800089c:	40005800 	.word	0x40005800
 80008a0:	000186a0 	.word	0x000186a0

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b8:	4b2c      	ldr	r3, [pc, #176]	@ (800096c <MX_GPIO_Init+0xc8>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a2b      	ldr	r2, [pc, #172]	@ (800096c <MX_GPIO_Init+0xc8>)
 80008be:	f043 0308 	orr.w	r3, r3, #8
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b29      	ldr	r3, [pc, #164]	@ (800096c <MX_GPIO_Init+0xc8>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0308 	and.w	r3, r3, #8
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	4b26      	ldr	r3, [pc, #152]	@ (800096c <MX_GPIO_Init+0xc8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a25      	ldr	r2, [pc, #148]	@ (800096c <MX_GPIO_Init+0xc8>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b23      	ldr	r3, [pc, #140]	@ (800096c <MX_GPIO_Init+0xc8>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0304 	and.w	r3, r3, #4
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008ee:	4820      	ldr	r0, [pc, #128]	@ (8000970 <MX_GPIO_Init+0xcc>)
 80008f0:	f000 fe15 	bl	800151e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2138      	movs	r1, #56	@ 0x38
 80008f8:	481e      	ldr	r0, [pc, #120]	@ (8000974 <MX_GPIO_Init+0xd0>)
 80008fa:	f000 fe10 	bl	800151e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000902:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2302      	movs	r3, #2
 800090e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	4619      	mov	r1, r3
 8000916:	4816      	ldr	r0, [pc, #88]	@ (8000970 <MX_GPIO_Init+0xcc>)
 8000918:	f000 fc66 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800091c:	2338      	movs	r3, #56	@ 0x38
 800091e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2302      	movs	r3, #2
 800092a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092c:	f107 0308 	add.w	r3, r7, #8
 8000930:	4619      	mov	r1, r3
 8000932:	4810      	ldr	r0, [pc, #64]	@ (8000974 <MX_GPIO_Init+0xd0>)
 8000934:	f000 fc58 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000938:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800093c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_GPIO_Init+0xd4>)
 8000940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	4619      	mov	r1, r3
 800094c:	4809      	ldr	r0, [pc, #36]	@ (8000974 <MX_GPIO_Init+0xd0>)
 800094e:	f000 fc4b 	bl	80011e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2017      	movs	r0, #23
 8000958:	f000 fc0f 	bl	800117a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800095c:	2017      	movs	r0, #23
 800095e:	f000 fc28 	bl	80011b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	40010800 	.word	0x40010800
 8000974:	40010c00 	.word	0x40010c00
 8000978:	10110000 	.word	0x10110000

0800097c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	80fb      	strh	r3, [r7, #6]
  currentMillis = HAL_GetTick();
 8000986:	f000 faf3 	bl	8000f70 <HAL_GetTick>
 800098a:	4603      	mov	r3, r0
 800098c:	4aa5      	ldr	r2, [pc, #660]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800098e:	6013      	str	r3, [r2, #0]
  if (currentMillis - previousMillis > 10) {
 8000990:	4ba4      	ldr	r3, [pc, #656]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4ba4      	ldr	r3, [pc, #656]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	2b0a      	cmp	r3, #10
 800099c:	f240 8180 	bls.w	8000ca0 <HAL_GPIO_EXTI_Callback+0x324>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80009a0:	4ba2      	ldr	r3, [pc, #648]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80009a2:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 80009a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80009a8:	4ba0      	ldr	r3, [pc, #640]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80009ae:	4b9f      	ldr	r3, [pc, #636]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	4b9d      	ldr	r3, [pc, #628]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80009b6:	2202      	movs	r2, #2
 80009b8:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 80009ba:	499c      	ldr	r1, [pc, #624]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80009bc:	489c      	ldr	r0, [pc, #624]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80009be:	f000 fc13 	bl	80011e8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009c8:	489a      	ldr	r0, [pc, #616]	@ (8000c34 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80009ca:	f000 fda8 	bl	800151e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2108      	movs	r1, #8
 80009d2:	4897      	ldr	r0, [pc, #604]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80009d4:	f000 fda3 	bl	800151e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2110      	movs	r1, #16
 80009dc:	4894      	ldr	r0, [pc, #592]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80009de:	f000 fd9e 	bl	800151e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2120      	movs	r1, #32
 80009e6:	4892      	ldr	r0, [pc, #584]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80009e8:	f000 fd99 	bl	800151e <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	2b40      	cmp	r3, #64	@ 0x40
 80009f0:	d10a      	bne.n	8000a08 <HAL_GPIO_EXTI_Callback+0x8c>
 80009f2:	2140      	movs	r1, #64	@ 0x40
 80009f4:	488e      	ldr	r0, [pc, #568]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80009f6:	f000 fd7b 	bl	80014f0 <HAL_GPIO_ReadPin>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d003      	beq.n	8000a08 <HAL_GPIO_EXTI_Callback+0x8c>
    {
      keyPressed = 68; //ASCII value of D
 8000a00:	4b8d      	ldr	r3, [pc, #564]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000a02:	2244      	movs	r2, #68	@ 0x44
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	e02c      	b.n	8000a62 <HAL_GPIO_EXTI_Callback+0xe6>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8000a08:	88fb      	ldrh	r3, [r7, #6]
 8000a0a:	2b80      	cmp	r3, #128	@ 0x80
 8000a0c:	d10a      	bne.n	8000a24 <HAL_GPIO_EXTI_Callback+0xa8>
 8000a0e:	2180      	movs	r1, #128	@ 0x80
 8000a10:	4887      	ldr	r0, [pc, #540]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000a12:	f000 fd6d 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d003      	beq.n	8000a24 <HAL_GPIO_EXTI_Callback+0xa8>
    {
      keyPressed = 67; //ASCII value of C
 8000a1c:	4b86      	ldr	r3, [pc, #536]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000a1e:	2243      	movs	r2, #67	@ 0x43
 8000a20:	701a      	strb	r2, [r3, #0]
 8000a22:	e01e      	b.n	8000a62 <HAL_GPIO_EXTI_Callback+0xe6>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8000a24:	88fb      	ldrh	r3, [r7, #6]
 8000a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a2a:	d10b      	bne.n	8000a44 <HAL_GPIO_EXTI_Callback+0xc8>
 8000a2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a30:	487f      	ldr	r0, [pc, #508]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000a32:	f000 fd5d 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d003      	beq.n	8000a44 <HAL_GPIO_EXTI_Callback+0xc8>
    {
      keyPressed = 66; //ASCII value of B
 8000a3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000a3e:	2242      	movs	r2, #66	@ 0x42
 8000a40:	701a      	strb	r2, [r3, #0]
 8000a42:	e00e      	b.n	8000a62 <HAL_GPIO_EXTI_Callback+0xe6>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a4a:	d10a      	bne.n	8000a62 <HAL_GPIO_EXTI_Callback+0xe6>
 8000a4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a50:	4877      	ldr	r0, [pc, #476]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000a52:	f000 fd4d 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d002      	beq.n	8000a62 <HAL_GPIO_EXTI_Callback+0xe6>
    {
      keyPressed = 65; //ASCII value of A
 8000a5c:	4b76      	ldr	r3, [pc, #472]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000a5e:	2241      	movs	r2, #65	@ 0x41
 8000a60:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a68:	4872      	ldr	r0, [pc, #456]	@ (8000c34 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000a6a:	f000 fd58 	bl	800151e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2108      	movs	r1, #8
 8000a72:	486f      	ldr	r0, [pc, #444]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000a74:	f000 fd53 	bl	800151e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	486c      	ldr	r0, [pc, #432]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000a7e:	f000 fd4e 	bl	800151e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2120      	movs	r1, #32
 8000a86:	486a      	ldr	r0, [pc, #424]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000a88:	f000 fd49 	bl	800151e <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	2b40      	cmp	r3, #64	@ 0x40
 8000a90:	d10a      	bne.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x12c>
 8000a92:	2140      	movs	r1, #64	@ 0x40
 8000a94:	4866      	ldr	r0, [pc, #408]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000a96:	f000 fd2b 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x12c>
    {
      keyPressed = 35; //ASCII value of #
 8000aa0:	4b65      	ldr	r3, [pc, #404]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000aa2:	2223      	movs	r2, #35	@ 0x23
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	e02c      	b.n	8000b02 <HAL_GPIO_EXTI_Callback+0x186>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8000aa8:	88fb      	ldrh	r3, [r7, #6]
 8000aaa:	2b80      	cmp	r3, #128	@ 0x80
 8000aac:	d10a      	bne.n	8000ac4 <HAL_GPIO_EXTI_Callback+0x148>
 8000aae:	2180      	movs	r1, #128	@ 0x80
 8000ab0:	485f      	ldr	r0, [pc, #380]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000ab2:	f000 fd1d 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_EXTI_Callback+0x148>
    {
      keyPressed = 57; //ASCII value of 9
 8000abc:	4b5e      	ldr	r3, [pc, #376]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000abe:	2239      	movs	r2, #57	@ 0x39
 8000ac0:	701a      	strb	r2, [r3, #0]
 8000ac2:	e01e      	b.n	8000b02 <HAL_GPIO_EXTI_Callback+0x186>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000aca:	d10b      	bne.n	8000ae4 <HAL_GPIO_EXTI_Callback+0x168>
 8000acc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ad0:	4857      	ldr	r0, [pc, #348]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000ad2:	f000 fd0d 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <HAL_GPIO_EXTI_Callback+0x168>
    {
      keyPressed = 54; //ASCII value of 6
 8000adc:	4b56      	ldr	r3, [pc, #344]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000ade:	2236      	movs	r2, #54	@ 0x36
 8000ae0:	701a      	strb	r2, [r3, #0]
 8000ae2:	e00e      	b.n	8000b02 <HAL_GPIO_EXTI_Callback+0x186>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000aea:	d10a      	bne.n	8000b02 <HAL_GPIO_EXTI_Callback+0x186>
 8000aec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000af0:	484f      	ldr	r0, [pc, #316]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000af2:	f000 fcfd 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d002      	beq.n	8000b02 <HAL_GPIO_EXTI_Callback+0x186>
    {
      keyPressed = 51; //ASCII value of 3
 8000afc:	4b4e      	ldr	r3, [pc, #312]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000afe:	2233      	movs	r2, #51	@ 0x33
 8000b00:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b08:	484a      	ldr	r0, [pc, #296]	@ (8000c34 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000b0a:	f000 fd08 	bl	800151e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2108      	movs	r1, #8
 8000b12:	4847      	ldr	r0, [pc, #284]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000b14:	f000 fd03 	bl	800151e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2110      	movs	r1, #16
 8000b1c:	4844      	ldr	r0, [pc, #272]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000b1e:	f000 fcfe 	bl	800151e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2120      	movs	r1, #32
 8000b26:	4842      	ldr	r0, [pc, #264]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000b28:	f000 fcf9 	bl	800151e <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 8000b2c:	88fb      	ldrh	r3, [r7, #6]
 8000b2e:	2b40      	cmp	r3, #64	@ 0x40
 8000b30:	d10a      	bne.n	8000b48 <HAL_GPIO_EXTI_Callback+0x1cc>
 8000b32:	2140      	movs	r1, #64	@ 0x40
 8000b34:	483e      	ldr	r0, [pc, #248]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000b36:	f000 fcdb 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d003      	beq.n	8000b48 <HAL_GPIO_EXTI_Callback+0x1cc>
    {
      keyPressed = 48; //ASCII value of 0
 8000b40:	4b3d      	ldr	r3, [pc, #244]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000b42:	2230      	movs	r2, #48	@ 0x30
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	e02c      	b.n	8000ba2 <HAL_GPIO_EXTI_Callback+0x226>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	2b80      	cmp	r3, #128	@ 0x80
 8000b4c:	d10a      	bne.n	8000b64 <HAL_GPIO_EXTI_Callback+0x1e8>
 8000b4e:	2180      	movs	r1, #128	@ 0x80
 8000b50:	4837      	ldr	r0, [pc, #220]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000b52:	f000 fccd 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d003      	beq.n	8000b64 <HAL_GPIO_EXTI_Callback+0x1e8>
    {
      keyPressed = 56; //ASCII value of 8
 8000b5c:	4b36      	ldr	r3, [pc, #216]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000b5e:	2238      	movs	r2, #56	@ 0x38
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	e01e      	b.n	8000ba2 <HAL_GPIO_EXTI_Callback+0x226>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b6a:	d10b      	bne.n	8000b84 <HAL_GPIO_EXTI_Callback+0x208>
 8000b6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b70:	482f      	ldr	r0, [pc, #188]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000b72:	f000 fcbd 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_EXTI_Callback+0x208>
    {
      keyPressed = 53; //ASCII value of 5
 8000b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000b7e:	2235      	movs	r2, #53	@ 0x35
 8000b80:	701a      	strb	r2, [r3, #0]
 8000b82:	e00e      	b.n	8000ba2 <HAL_GPIO_EXTI_Callback+0x226>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b8a:	d10a      	bne.n	8000ba2 <HAL_GPIO_EXTI_Callback+0x226>
 8000b8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b90:	4827      	ldr	r0, [pc, #156]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000b92:	f000 fcad 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <HAL_GPIO_EXTI_Callback+0x226>
    {
      keyPressed = 50; //ASCII value of 2
 8000b9c:	4b26      	ldr	r3, [pc, #152]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000b9e:	2232      	movs	r2, #50	@ 0x32
 8000ba0:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ba8:	4822      	ldr	r0, [pc, #136]	@ (8000c34 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000baa:	f000 fcb8 	bl	800151e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2108      	movs	r1, #8
 8000bb2:	481f      	ldr	r0, [pc, #124]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000bb4:	f000 fcb3 	bl	800151e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2110      	movs	r1, #16
 8000bbc:	481c      	ldr	r0, [pc, #112]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000bbe:	f000 fcae 	bl	800151e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	481a      	ldr	r0, [pc, #104]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000bc8:	f000 fca9 	bl	800151e <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	2b40      	cmp	r3, #64	@ 0x40
 8000bd0:	d10a      	bne.n	8000be8 <HAL_GPIO_EXTI_Callback+0x26c>
 8000bd2:	2140      	movs	r1, #64	@ 0x40
 8000bd4:	4816      	ldr	r0, [pc, #88]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000bd6:	f000 fc8b 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <HAL_GPIO_EXTI_Callback+0x26c>
    {
      keyPressed = 42; //ASCII value of *
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000be2:	222a      	movs	r2, #42	@ 0x2a
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	e038      	b.n	8000c5a <HAL_GPIO_EXTI_Callback+0x2de>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	2b80      	cmp	r3, #128	@ 0x80
 8000bec:	d10a      	bne.n	8000c04 <HAL_GPIO_EXTI_Callback+0x288>
 8000bee:	2180      	movs	r1, #128	@ 0x80
 8000bf0:	480f      	ldr	r0, [pc, #60]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000bf2:	f000 fc7d 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <HAL_GPIO_EXTI_Callback+0x288>
    {
      keyPressed = 55; //ASCII value of 7
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000bfe:	2237      	movs	r2, #55	@ 0x37
 8000c00:	701a      	strb	r2, [r3, #0]
 8000c02:	e02a      	b.n	8000c5a <HAL_GPIO_EXTI_Callback+0x2de>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c0a:	d117      	bne.n	8000c3c <HAL_GPIO_EXTI_Callback+0x2c0>
 8000c0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c10:	4807      	ldr	r0, [pc, #28]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000c12:	f000 fc6d 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d00f      	beq.n	8000c3c <HAL_GPIO_EXTI_Callback+0x2c0>
    {
      keyPressed = 52; //ASCII value of 4
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000c1e:	2234      	movs	r2, #52	@ 0x34
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	e01a      	b.n	8000c5a <HAL_GPIO_EXTI_Callback+0x2de>
 8000c24:	20000128 	.word	0x20000128
 8000c28:	20000124 	.word	0x20000124
 8000c2c:	20000114 	.word	0x20000114
 8000c30:	40010c00 	.word	0x40010c00
 8000c34:	40010800 	.word	0x40010800
 8000c38:	2000012c 	.word	0x2000012c
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c42:	d10a      	bne.n	8000c5a <HAL_GPIO_EXTI_Callback+0x2de>
 8000c44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c48:	4817      	ldr	r0, [pc, #92]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000c4a:	f000 fc51 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d002      	beq.n	8000c5a <HAL_GPIO_EXTI_Callback+0x2de>
    {
      keyPressed = 49; //ASCII value of 1
 8000c54:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <HAL_GPIO_EXTI_Callback+0x330>)
 8000c56:	2231      	movs	r2, #49	@ 0x31
 8000c58:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c60:	4813      	ldr	r0, [pc, #76]	@ (8000cb0 <HAL_GPIO_EXTI_Callback+0x334>)
 8000c62:	f000 fc5c 	bl	800151e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2108      	movs	r1, #8
 8000c6a:	480f      	ldr	r0, [pc, #60]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000c6c:	f000 fc57 	bl	800151e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000c70:	2201      	movs	r2, #1
 8000c72:	2110      	movs	r1, #16
 8000c74:	480c      	ldr	r0, [pc, #48]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000c76:	f000 fc52 	bl	800151e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	480a      	ldr	r0, [pc, #40]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000c80:	f000 fc4d 	bl	800151e <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8000c84:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <HAL_GPIO_EXTI_Callback+0x338>)
 8000c86:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb8 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000c88:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <HAL_GPIO_EXTI_Callback+0x338>)
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8000c90:	4908      	ldr	r1, [pc, #32]	@ (8000cb4 <HAL_GPIO_EXTI_Callback+0x338>)
 8000c92:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000c94:	f000 faa8 	bl	80011e8 <HAL_GPIO_Init>
    previousMillis = currentMillis;
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <HAL_GPIO_EXTI_Callback+0x340>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a08      	ldr	r2, [pc, #32]	@ (8000cc0 <HAL_GPIO_EXTI_Callback+0x344>)
 8000c9e:	6013      	str	r3, [r2, #0]
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40010c00 	.word	0x40010c00
 8000cac:	2000012c 	.word	0x2000012c
 8000cb0:	40010800 	.word	0x40010800
 8000cb4:	20000114 	.word	0x20000114
 8000cb8:	10110000 	.word	0x10110000
 8000cbc:	20000128 	.word	0x20000128
 8000cc0:	20000124 	.word	0x20000124

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <Error_Handler+0x8>

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6193      	str	r3, [r2, #24]
 8000ce2:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf8:	61d3      	str	r3, [r2, #28]
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <HAL_MspInit+0x5c>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d06:	4b0a      	ldr	r3, [pc, #40]	@ (8000d30 <HAL_MspInit+0x60>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	@ (8000d30 <HAL_MspInit+0x60>)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010000 	.word	0x40010000

08000d34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a16      	ldr	r2, [pc, #88]	@ (8000da8 <HAL_I2C_MspInit+0x74>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d124      	bne.n	8000d9e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d54:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <HAL_I2C_MspInit+0x78>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a14      	ldr	r2, [pc, #80]	@ (8000dac <HAL_I2C_MspInit+0x78>)
 8000d5a:	f043 0308 	orr.w	r3, r3, #8
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_I2C_MspInit+0x78>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0308 	and.w	r3, r3, #8
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d6c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d72:	2312      	movs	r3, #18
 8000d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480b      	ldr	r0, [pc, #44]	@ (8000db0 <HAL_I2C_MspInit+0x7c>)
 8000d82:	f000 fa31 	bl	80011e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <HAL_I2C_MspInit+0x78>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	4a08      	ldr	r2, [pc, #32]	@ (8000dac <HAL_I2C_MspInit+0x78>)
 8000d8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d90:	61d3      	str	r3, [r2, #28]
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <HAL_I2C_MspInit+0x78>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000d9e:	bf00      	nop
 8000da0:	3720      	adds	r7, #32
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40005800 	.word	0x40005800
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010c00 	.word	0x40010c00

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <NMI_Handler+0x4>

08000dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e04:	f000 f8a2 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000e10:	2040      	movs	r0, #64	@ 0x40
 8000e12:	f000 fb9d 	bl	8001550 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000e16:	2080      	movs	r0, #128	@ 0x80
 8000e18:	f000 fb9a 	bl	8001550 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000e1c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000e20:	f000 fb96 	bl	8001550 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000e24:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e28:	f000 fb92 	bl	8001550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e3a:	f001 fcbf 	bl	80027bc <__errno>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2216      	movs	r2, #22
 8000e42:	601a      	str	r2, [r3, #0]
  return -1;
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_exit>:

void _exit (int status)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ffe7 	bl	8000e30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e62:	bf00      	nop
 8000e64:	e7fd      	b.n	8000e62 <_exit+0x12>

08000e66 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
	...

08000e74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e74:	f7ff fff7 	bl	8000e66 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e78:	480b      	ldr	r0, [pc, #44]	@ (8000ea8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e7a:	490c      	ldr	r1, [pc, #48]	@ (8000eac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a09      	ldr	r2, [pc, #36]	@ (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e90:	4c09      	ldr	r4, [pc, #36]	@ (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f001 fc93 	bl	80027c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ea2:	f7ff fc4f 	bl	8000744 <main>
  bx lr
 8000ea6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000eb0:	0800292c 	.word	0x0800292c
  ldr r2, =_sbss
 8000eb4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000eb8:	20000288 	.word	0x20000288

08000ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC1_2_IRQHandler>
	...

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <HAL_Init+0x28>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <HAL_Init+0x28>)
 8000eca:	f043 0310 	orr.w	r3, r3, #16
 8000ece:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f947 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fef8 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40022000 	.word	0x40022000

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f95f 	bl	80011ce <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 f927 	bl	800117a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000040 	.word	0x20000040
 8000f44:	20000048 	.word	0x20000048
 8000f48:	20000044 	.word	0x20000044

08000f4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <HAL_IncTick+0x1c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a03      	ldr	r2, [pc, #12]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	20000048 	.word	0x20000048
 8000f6c:	20000148 	.word	0x20000148

08000f70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b02      	ldr	r3, [pc, #8]	@ (8000f80 <HAL_GetTick+0x10>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20000148 	.word	0x20000148

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff fff0 	bl	8000f70 <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f9c:	d005      	beq.n	8000faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <HAL_Delay+0x44>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000faa:	bf00      	nop
 8000fac:	f7ff ffe0 	bl	8000f70 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8f7      	bhi.n	8000fac <HAL_Delay+0x28>
  {
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000048 	.word	0x20000048

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4906      	ldr	r1, [pc, #24]	@ (8001064 <__NVIC_EnableIRQ+0x34>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	@ (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	@ (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	@ 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	@ 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001130:	d301      	bcc.n	8001136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001132:	2301      	movs	r3, #1
 8001134:	e00f      	b.n	8001156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <SysTick_Config+0x40>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113e:	210f      	movs	r1, #15
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f7ff ff90 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001148:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <SysTick_Config+0x40>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114e:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <SysTick_Config+0x40>)
 8001150:	2207      	movs	r2, #7
 8001152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	e000e010 	.word	0xe000e010

08001164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff2d 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff42 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff90 	bl	80010bc <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff5f 	bl	8001068 <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff35 	bl	8001030 <__NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffa2 	bl	8001120 <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b08b      	sub	sp, #44	@ 0x2c
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fa:	e169      	b.n	80014d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011fc:	2201      	movs	r2, #1
 80011fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	69fa      	ldr	r2, [r7, #28]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	429a      	cmp	r2, r3
 8001216:	f040 8158 	bne.w	80014ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4a9a      	ldr	r2, [pc, #616]	@ (8001488 <HAL_GPIO_Init+0x2a0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d05e      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001224:	4a98      	ldr	r2, [pc, #608]	@ (8001488 <HAL_GPIO_Init+0x2a0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d875      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800122a:	4a98      	ldr	r2, [pc, #608]	@ (800148c <HAL_GPIO_Init+0x2a4>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d058      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001230:	4a96      	ldr	r2, [pc, #600]	@ (800148c <HAL_GPIO_Init+0x2a4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d86f      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001236:	4a96      	ldr	r2, [pc, #600]	@ (8001490 <HAL_GPIO_Init+0x2a8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d052      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 800123c:	4a94      	ldr	r2, [pc, #592]	@ (8001490 <HAL_GPIO_Init+0x2a8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d869      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001242:	4a94      	ldr	r2, [pc, #592]	@ (8001494 <HAL_GPIO_Init+0x2ac>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d04c      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001248:	4a92      	ldr	r2, [pc, #584]	@ (8001494 <HAL_GPIO_Init+0x2ac>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d863      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800124e:	4a92      	ldr	r2, [pc, #584]	@ (8001498 <HAL_GPIO_Init+0x2b0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d046      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001254:	4a90      	ldr	r2, [pc, #576]	@ (8001498 <HAL_GPIO_Init+0x2b0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d85d      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800125a:	2b12      	cmp	r3, #18
 800125c:	d82a      	bhi.n	80012b4 <HAL_GPIO_Init+0xcc>
 800125e:	2b12      	cmp	r3, #18
 8001260:	d859      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001262:	a201      	add	r2, pc, #4	@ (adr r2, 8001268 <HAL_GPIO_Init+0x80>)
 8001264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001268:	080012e3 	.word	0x080012e3
 800126c:	080012bd 	.word	0x080012bd
 8001270:	080012cf 	.word	0x080012cf
 8001274:	08001311 	.word	0x08001311
 8001278:	08001317 	.word	0x08001317
 800127c:	08001317 	.word	0x08001317
 8001280:	08001317 	.word	0x08001317
 8001284:	08001317 	.word	0x08001317
 8001288:	08001317 	.word	0x08001317
 800128c:	08001317 	.word	0x08001317
 8001290:	08001317 	.word	0x08001317
 8001294:	08001317 	.word	0x08001317
 8001298:	08001317 	.word	0x08001317
 800129c:	08001317 	.word	0x08001317
 80012a0:	08001317 	.word	0x08001317
 80012a4:	08001317 	.word	0x08001317
 80012a8:	08001317 	.word	0x08001317
 80012ac:	080012c5 	.word	0x080012c5
 80012b0:	080012d9 	.word	0x080012d9
 80012b4:	4a79      	ldr	r2, [pc, #484]	@ (800149c <HAL_GPIO_Init+0x2b4>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ba:	e02c      	b.n	8001316 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e029      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	3304      	adds	r3, #4
 80012ca:	623b      	str	r3, [r7, #32]
          break;
 80012cc:	e024      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	3308      	adds	r3, #8
 80012d4:	623b      	str	r3, [r7, #32]
          break;
 80012d6:	e01f      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	330c      	adds	r3, #12
 80012de:	623b      	str	r3, [r7, #32]
          break;
 80012e0:	e01a      	b.n	8001318 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ea:	2304      	movs	r3, #4
 80012ec:	623b      	str	r3, [r7, #32]
          break;
 80012ee:	e013      	b.n	8001318 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f8:	2308      	movs	r3, #8
 80012fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	611a      	str	r2, [r3, #16]
          break;
 8001302:	e009      	b.n	8001318 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001304:	2308      	movs	r3, #8
 8001306:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	615a      	str	r2, [r3, #20]
          break;
 800130e:	e003      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
          break;
 8001314:	e000      	b.n	8001318 <HAL_GPIO_Init+0x130>
          break;
 8001316:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2bff      	cmp	r3, #255	@ 0xff
 800131c:	d801      	bhi.n	8001322 <HAL_GPIO_Init+0x13a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	e001      	b.n	8001326 <HAL_GPIO_Init+0x13e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3304      	adds	r3, #4
 8001326:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2bff      	cmp	r3, #255	@ 0xff
 800132c:	d802      	bhi.n	8001334 <HAL_GPIO_Init+0x14c>
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	e002      	b.n	800133a <HAL_GPIO_Init+0x152>
 8001334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001336:	3b08      	subs	r3, #8
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	210f      	movs	r1, #15
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	401a      	ands	r2, r3
 800134c:	6a39      	ldr	r1, [r7, #32]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	431a      	orrs	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 80b1 	beq.w	80014ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001368:	4b4d      	ldr	r3, [pc, #308]	@ (80014a0 <HAL_GPIO_Init+0x2b8>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a4c      	ldr	r2, [pc, #304]	@ (80014a0 <HAL_GPIO_Init+0x2b8>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b4a      	ldr	r3, [pc, #296]	@ (80014a0 <HAL_GPIO_Init+0x2b8>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001380:	4a48      	ldr	r2, [pc, #288]	@ (80014a4 <HAL_GPIO_Init+0x2bc>)
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	4013      	ands	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a40      	ldr	r2, [pc, #256]	@ (80014a8 <HAL_GPIO_Init+0x2c0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d013      	beq.n	80013d4 <HAL_GPIO_Init+0x1ec>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a3f      	ldr	r2, [pc, #252]	@ (80014ac <HAL_GPIO_Init+0x2c4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d00d      	beq.n	80013d0 <HAL_GPIO_Init+0x1e8>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a3e      	ldr	r2, [pc, #248]	@ (80014b0 <HAL_GPIO_Init+0x2c8>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d007      	beq.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a3d      	ldr	r2, [pc, #244]	@ (80014b4 <HAL_GPIO_Init+0x2cc>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d101      	bne.n	80013c8 <HAL_GPIO_Init+0x1e0>
 80013c4:	2303      	movs	r3, #3
 80013c6:	e006      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013c8:	2304      	movs	r3, #4
 80013ca:	e004      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e002      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013d4:	2300      	movs	r3, #0
 80013d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013d8:	f002 0203 	and.w	r2, r2, #3
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	4093      	lsls	r3, r2
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013e6:	492f      	ldr	r1, [pc, #188]	@ (80014a4 <HAL_GPIO_Init+0x2bc>)
 80013e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001400:	4b2d      	ldr	r3, [pc, #180]	@ (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	492c      	ldr	r1, [pc, #176]	@ (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	608b      	str	r3, [r1, #8]
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800140e:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	43db      	mvns	r3, r3
 8001416:	4928      	ldr	r1, [pc, #160]	@ (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001418:	4013      	ands	r3, r2
 800141a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001428:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <HAL_GPIO_Init+0x2d0>)
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	4922      	ldr	r1, [pc, #136]	@ (80014b8 <HAL_GPIO_Init+0x2d0>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	60cb      	str	r3, [r1, #12]
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	43db      	mvns	r3, r3
 800143e:	491e      	ldr	r1, [pc, #120]	@ (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001440:	4013      	ands	r3, r2
 8001442:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d006      	beq.n	800145e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001450:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4918      	ldr	r1, [pc, #96]	@ (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	43db      	mvns	r3, r3
 8001466:	4914      	ldr	r1, [pc, #80]	@ (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001468:	4013      	ands	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d021      	beq.n	80014bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001478:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <HAL_GPIO_Init+0x2d0>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	490e      	ldr	r1, [pc, #56]	@ (80014b8 <HAL_GPIO_Init+0x2d0>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
 8001484:	e021      	b.n	80014ca <HAL_GPIO_Init+0x2e2>
 8001486:	bf00      	nop
 8001488:	10320000 	.word	0x10320000
 800148c:	10310000 	.word	0x10310000
 8001490:	10220000 	.word	0x10220000
 8001494:	10210000 	.word	0x10210000
 8001498:	10120000 	.word	0x10120000
 800149c:	10110000 	.word	0x10110000
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010000 	.word	0x40010000
 80014a8:	40010800 	.word	0x40010800
 80014ac:	40010c00 	.word	0x40010c00
 80014b0:	40011000 	.word	0x40011000
 80014b4:	40011400 	.word	0x40011400
 80014b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014bc:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <HAL_GPIO_Init+0x304>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	4909      	ldr	r1, [pc, #36]	@ (80014ec <HAL_GPIO_Init+0x304>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	3301      	adds	r3, #1
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d6:	fa22 f303 	lsr.w	r3, r2, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f47f ae8e 	bne.w	80011fc <HAL_GPIO_Init+0x14>
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	372c      	adds	r7, #44	@ 0x2c
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	40010400 	.word	0x40010400

080014f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
 800150c:	e001      	b.n	8001512 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	807b      	strh	r3, [r7, #2]
 800152a:	4613      	mov	r3, r2
 800152c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800152e:	787b      	ldrb	r3, [r7, #1]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001534:	887a      	ldrh	r2, [r7, #2]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800153a:	e003      	b.n	8001544 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800153c:	887b      	ldrh	r3, [r7, #2]
 800153e:	041a      	lsls	r2, r3, #16
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	611a      	str	r2, [r3, #16]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
	...

08001550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800155a:	4b08      	ldr	r3, [pc, #32]	@ (800157c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001566:	4a05      	ldr	r2, [pc, #20]	@ (800157c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fa04 	bl	800097c <HAL_GPIO_EXTI_Callback>
  }
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e12b      	b.n	80017ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d106      	bne.n	80015ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fbc4 	bl	8000d34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2224      	movs	r2, #36	@ 0x24
 80015b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0201 	bic.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015e4:	f001 f832 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 80015e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4a81      	ldr	r2, [pc, #516]	@ (80017f4 <HAL_I2C_Init+0x274>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d807      	bhi.n	8001604 <HAL_I2C_Init+0x84>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4a80      	ldr	r2, [pc, #512]	@ (80017f8 <HAL_I2C_Init+0x278>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	bf94      	ite	ls
 80015fc:	2301      	movls	r3, #1
 80015fe:	2300      	movhi	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	e006      	b.n	8001612 <HAL_I2C_Init+0x92>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4a7d      	ldr	r2, [pc, #500]	@ (80017fc <HAL_I2C_Init+0x27c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	bf94      	ite	ls
 800160c:	2301      	movls	r3, #1
 800160e:	2300      	movhi	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e0e7      	b.n	80017ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4a78      	ldr	r2, [pc, #480]	@ (8001800 <HAL_I2C_Init+0x280>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	0c9b      	lsrs	r3, r3, #18
 8001624:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	430a      	orrs	r2, r1
 8001638:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4a6a      	ldr	r2, [pc, #424]	@ (80017f4 <HAL_I2C_Init+0x274>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d802      	bhi.n	8001654 <HAL_I2C_Init+0xd4>
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	3301      	adds	r3, #1
 8001652:	e009      	b.n	8001668 <HAL_I2C_Init+0xe8>
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800165a:	fb02 f303 	mul.w	r3, r2, r3
 800165e:	4a69      	ldr	r2, [pc, #420]	@ (8001804 <HAL_I2C_Init+0x284>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	099b      	lsrs	r3, r3, #6
 8001666:	3301      	adds	r3, #1
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	430b      	orrs	r3, r1
 800166e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800167a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	495c      	ldr	r1, [pc, #368]	@ (80017f4 <HAL_I2C_Init+0x274>)
 8001684:	428b      	cmp	r3, r1
 8001686:	d819      	bhi.n	80016bc <HAL_I2C_Init+0x13c>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1e59      	subs	r1, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	fbb1 f3f3 	udiv	r3, r1, r3
 8001696:	1c59      	adds	r1, r3, #1
 8001698:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800169c:	400b      	ands	r3, r1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00a      	beq.n	80016b8 <HAL_I2C_Init+0x138>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1e59      	subs	r1, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b6:	e051      	b.n	800175c <HAL_I2C_Init+0x1dc>
 80016b8:	2304      	movs	r3, #4
 80016ba:	e04f      	b.n	800175c <HAL_I2C_Init+0x1dc>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d111      	bne.n	80016e8 <HAL_I2C_Init+0x168>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1e58      	subs	r0, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	440b      	add	r3, r1
 80016d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d6:	3301      	adds	r3, #1
 80016d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf0c      	ite	eq
 80016e0:	2301      	moveq	r3, #1
 80016e2:	2300      	movne	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	e012      	b.n	800170e <HAL_I2C_Init+0x18e>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	1e58      	subs	r0, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6859      	ldr	r1, [r3, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	0099      	lsls	r1, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf0c      	ite	eq
 8001708:	2301      	moveq	r3, #1
 800170a:	2300      	movne	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_I2C_Init+0x196>
 8001712:	2301      	movs	r3, #1
 8001714:	e022      	b.n	800175c <HAL_I2C_Init+0x1dc>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10e      	bne.n	800173c <HAL_I2C_Init+0x1bc>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1e58      	subs	r0, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6859      	ldr	r1, [r3, #4]
 8001726:	460b      	mov	r3, r1
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	440b      	add	r3, r1
 800172c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001730:	3301      	adds	r3, #1
 8001732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800173a:	e00f      	b.n	800175c <HAL_I2C_Init+0x1dc>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1e58      	subs	r0, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	0099      	lsls	r1, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001752:	3301      	adds	r3, #1
 8001754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001758:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	6809      	ldr	r1, [r1, #0]
 8001760:	4313      	orrs	r3, r2
 8001762:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69da      	ldr	r2, [r3, #28]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800178a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6911      	ldr	r1, [r2, #16]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68d2      	ldr	r2, [r2, #12]
 8001796:	4311      	orrs	r1, r2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	430b      	orrs	r3, r1
 800179e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695a      	ldr	r2, [r3, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0201 	orr.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2220      	movs	r2, #32
 80017d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	000186a0 	.word	0x000186a0
 80017f8:	001e847f 	.word	0x001e847f
 80017fc:	003d08ff 	.word	0x003d08ff
 8001800:	431bde83 	.word	0x431bde83
 8001804:	10624dd3 	.word	0x10624dd3

08001808 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af02      	add	r7, sp, #8
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	461a      	mov	r2, r3
 8001814:	460b      	mov	r3, r1
 8001816:	817b      	strh	r3, [r7, #10]
 8001818:	4613      	mov	r3, r2
 800181a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800181c:	f7ff fba8 	bl	8000f70 <HAL_GetTick>
 8001820:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b20      	cmp	r3, #32
 800182c:	f040 80e0 	bne.w	80019f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2319      	movs	r3, #25
 8001836:	2201      	movs	r2, #1
 8001838:	4970      	ldr	r1, [pc, #448]	@ (80019fc <HAL_I2C_Master_Transmit+0x1f4>)
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f964 	bl	8001b08 <I2C_WaitOnFlagUntilTimeout>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001846:	2302      	movs	r3, #2
 8001848:	e0d3      	b.n	80019f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_I2C_Master_Transmit+0x50>
 8001854:	2302      	movs	r3, #2
 8001856:	e0cc      	b.n	80019f2 <HAL_I2C_Master_Transmit+0x1ea>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b01      	cmp	r3, #1
 800186c:	d007      	beq.n	800187e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 0201 	orr.w	r2, r2, #1
 800187c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800188c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2221      	movs	r2, #33	@ 0x21
 8001892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2210      	movs	r2, #16
 800189a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	893a      	ldrh	r2, [r7, #8]
 80018ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4a50      	ldr	r2, [pc, #320]	@ (8001a00 <HAL_I2C_Master_Transmit+0x1f8>)
 80018be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018c0:	8979      	ldrh	r1, [r7, #10]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	6a3a      	ldr	r2, [r7, #32]
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 f89c 	bl	8001a04 <I2C_MasterRequestWrite>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e08d      	b.n	80019f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018ec:	e066      	b.n	80019bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	6a39      	ldr	r1, [r7, #32]
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 fa22 	bl	8001d3c <I2C_WaitOnTXEFlagUntilTimeout>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00d      	beq.n	800191a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	2b04      	cmp	r3, #4
 8001904:	d107      	bne.n	8001916 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001914:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e06b      	b.n	80019f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192a:	1c5a      	adds	r2, r3, #1
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001934:	b29b      	uxth	r3, r3
 8001936:	3b01      	subs	r3, #1
 8001938:	b29a      	uxth	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001942:	3b01      	subs	r3, #1
 8001944:	b29a      	uxth	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b04      	cmp	r3, #4
 8001956:	d11b      	bne.n	8001990 <HAL_I2C_Master_Transmit+0x188>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800195c:	2b00      	cmp	r3, #0
 800195e:	d017      	beq.n	8001990 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001964:	781a      	ldrb	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800197a:	b29b      	uxth	r3, r3
 800197c:	3b01      	subs	r3, #1
 800197e:	b29a      	uxth	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001988:	3b01      	subs	r3, #1
 800198a:	b29a      	uxth	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	6a39      	ldr	r1, [r7, #32]
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 fa19 	bl	8001dcc <I2C_WaitOnBTFFlagUntilTimeout>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00d      	beq.n	80019bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d107      	bne.n	80019b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e01a      	b.n	80019f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d194      	bne.n	80018ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2220      	movs	r2, #32
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	e000      	b.n	80019f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019f0:	2302      	movs	r3, #2
  }
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	00100002 	.word	0x00100002
 8001a00:	ffff0000 	.word	0xffff0000

08001a04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	460b      	mov	r3, r1
 8001a12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d006      	beq.n	8001a2e <I2C_MasterRequestWrite+0x2a>
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d003      	beq.n	8001a2e <I2C_MasterRequestWrite+0x2a>
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a2c:	d108      	bne.n	8001a40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e00b      	b.n	8001a58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a44:	2b12      	cmp	r3, #18
 8001a46:	d107      	bne.n	8001a58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 f84f 	bl	8001b08 <I2C_WaitOnFlagUntilTimeout>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00d      	beq.n	8001a8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a7e:	d103      	bne.n	8001a88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e035      	b.n	8001af8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a94:	d108      	bne.n	8001aa8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a96:	897b      	ldrh	r3, [r7, #10]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001aa4:	611a      	str	r2, [r3, #16]
 8001aa6:	e01b      	b.n	8001ae0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001aa8:	897b      	ldrh	r3, [r7, #10]
 8001aaa:	11db      	asrs	r3, r3, #7
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f003 0306 	and.w	r3, r3, #6
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f063 030f 	orn	r3, r3, #15
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	490e      	ldr	r1, [pc, #56]	@ (8001b00 <I2C_MasterRequestWrite+0xfc>)
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f898 	bl	8001bfc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e010      	b.n	8001af8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ad6:	897b      	ldrh	r3, [r7, #10]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	4907      	ldr	r1, [pc, #28]	@ (8001b04 <I2C_MasterRequestWrite+0x100>)
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f888 	bl	8001bfc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	00010008 	.word	0x00010008
 8001b04:	00010002 	.word	0x00010002

08001b08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	4613      	mov	r3, r2
 8001b16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b18:	e048      	b.n	8001bac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d044      	beq.n	8001bac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b22:	f7ff fa25 	bl	8000f70 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d302      	bcc.n	8001b38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d139      	bne.n	8001bac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	0c1b      	lsrs	r3, r3, #16
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d10d      	bne.n	8001b5e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	43da      	mvns	r2, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bf0c      	ite	eq
 8001b54:	2301      	moveq	r3, #1
 8001b56:	2300      	movne	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	e00c      	b.n	8001b78 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	43da      	mvns	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bf0c      	ite	eq
 8001b70:	2301      	moveq	r3, #1
 8001b72:	2300      	movne	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d116      	bne.n	8001bac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2220      	movs	r2, #32
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	f043 0220 	orr.w	r2, r3, #32
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e023      	b.n	8001bf4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	0c1b      	lsrs	r3, r3, #16
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d10d      	bne.n	8001bd2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	43da      	mvns	r2, r3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	e00c      	b.n	8001bec <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d093      	beq.n	8001b1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c0a:	e071      	b.n	8001cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c1a:	d123      	bne.n	8001c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c2a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c50:	f043 0204 	orr.w	r2, r3, #4
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e067      	b.n	8001d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6a:	d041      	beq.n	8001cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c6c:	f7ff f980 	bl	8000f70 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d302      	bcc.n	8001c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d136      	bne.n	8001cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	0c1b      	lsrs	r3, r3, #16
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d10c      	bne.n	8001ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	43da      	mvns	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4013      	ands	r3, r2
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bf14      	ite	ne
 8001c9e:	2301      	movne	r3, #1
 8001ca0:	2300      	moveq	r3, #0
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	e00b      	b.n	8001cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	43da      	mvns	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf14      	ite	ne
 8001cb8:	2301      	movne	r3, #1
 8001cba:	2300      	moveq	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d016      	beq.n	8001cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cdc:	f043 0220 	orr.w	r2, r3, #32
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e021      	b.n	8001d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	0c1b      	lsrs	r3, r3, #16
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d10c      	bne.n	8001d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	43da      	mvns	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	4013      	ands	r3, r2
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf14      	ite	ne
 8001d0c:	2301      	movne	r3, #1
 8001d0e:	2300      	moveq	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	e00b      	b.n	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	bf14      	ite	ne
 8001d26:	2301      	movne	r3, #1
 8001d28:	2300      	moveq	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f47f af6d 	bne.w	8001c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d48:	e034      	b.n	8001db4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f886 	bl	8001e5c <I2C_IsAcknowledgeFailed>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e034      	b.n	8001dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d60:	d028      	beq.n	8001db4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d62:	f7ff f905 	bl	8000f70 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d302      	bcc.n	8001d78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d11d      	bne.n	8001db4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d82:	2b80      	cmp	r3, #128	@ 0x80
 8001d84:	d016      	beq.n	8001db4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	f043 0220 	orr.w	r2, r3, #32
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e007      	b.n	8001dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dbe:	2b80      	cmp	r3, #128	@ 0x80
 8001dc0:	d1c3      	bne.n	8001d4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dd8:	e034      	b.n	8001e44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f83e 	bl	8001e5c <I2C_IsAcknowledgeFailed>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e034      	b.n	8001e54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d028      	beq.n	8001e44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df2:	f7ff f8bd 	bl	8000f70 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d302      	bcc.n	8001e08 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d11d      	bne.n	8001e44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d016      	beq.n	8001e44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	f043 0220 	orr.w	r2, r3, #32
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e007      	b.n	8001e54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d1c3      	bne.n	8001dda <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e72:	d11b      	bne.n	8001eac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	f043 0204 	orr.w	r2, r3, #4
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e272      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8087 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed8:	4b92      	ldr	r3, [pc, #584]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d00c      	beq.n	8001efe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ee4:	4b8f      	ldr	r3, [pc, #572]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d112      	bne.n	8001f16 <HAL_RCC_OscConfig+0x5e>
 8001ef0:	4b8c      	ldr	r3, [pc, #560]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001efc:	d10b      	bne.n	8001f16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efe:	4b89      	ldr	r3, [pc, #548]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d06c      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x12c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d168      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e24c      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x76>
 8001f20:	4b80      	ldr	r3, [pc, #512]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a7f      	ldr	r2, [pc, #508]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	e02e      	b.n	8001f8c <HAL_RCC_OscConfig+0xd4>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x98>
 8001f36:	4b7b      	ldr	r3, [pc, #492]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a7a      	ldr	r2, [pc, #488]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b78      	ldr	r3, [pc, #480]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a77      	ldr	r2, [pc, #476]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e01d      	b.n	8001f8c <HAL_RCC_OscConfig+0xd4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0xbc>
 8001f5a:	4b72      	ldr	r3, [pc, #456]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a71      	ldr	r2, [pc, #452]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b6f      	ldr	r3, [pc, #444]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a6e      	ldr	r2, [pc, #440]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0xd4>
 8001f74:	4b6b      	ldr	r3, [pc, #428]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a6a      	ldr	r2, [pc, #424]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b68      	ldr	r3, [pc, #416]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a67      	ldr	r2, [pc, #412]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d013      	beq.n	8001fbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7fe ffec 	bl	8000f70 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7fe ffe8 	bl	8000f70 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	@ 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e200      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	4b5d      	ldr	r3, [pc, #372]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0xe4>
 8001fba:	e014      	b.n	8001fe6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7fe ffd8 	bl	8000f70 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7fe ffd4 	bl	8000f70 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	@ 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e1ec      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd6:	4b53      	ldr	r3, [pc, #332]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x10c>
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d063      	beq.n	80020ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ff2:	4b4c      	ldr	r3, [pc, #304]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ffe:	4b49      	ldr	r3, [pc, #292]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b08      	cmp	r3, #8
 8002008:	d11c      	bne.n	8002044 <HAL_RCC_OscConfig+0x18c>
 800200a:	4b46      	ldr	r3, [pc, #280]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d116      	bne.n	8002044 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	4b43      	ldr	r3, [pc, #268]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d005      	beq.n	800202e <HAL_RCC_OscConfig+0x176>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e1c0      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	4b3d      	ldr	r3, [pc, #244]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4939      	ldr	r1, [pc, #228]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	e03a      	b.n	80020ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d020      	beq.n	800208e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800204c:	4b36      	ldr	r3, [pc, #216]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7fe ff8d 	bl	8000f70 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205a:	f7fe ff89 	bl	8000f70 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e1a1      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206c:	4b2d      	ldr	r3, [pc, #180]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002078:	4b2a      	ldr	r3, [pc, #168]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4927      	ldr	r1, [pc, #156]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	e015      	b.n	80020ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208e:	4b26      	ldr	r3, [pc, #152]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7fe ff6c 	bl	8000f70 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209c:	f7fe ff68 	bl	8000f70 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e180      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d03a      	beq.n	800213c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d019      	beq.n	8002102 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ce:	4b17      	ldr	r3, [pc, #92]	@ (800212c <HAL_RCC_OscConfig+0x274>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d4:	f7fe ff4c 	bl	8000f70 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020dc:	f7fe ff48 	bl	8000f70 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e160      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020fa:	2001      	movs	r0, #1
 80020fc:	f000 faba 	bl	8002674 <RCC_Delay>
 8002100:	e01c      	b.n	800213c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002102:	4b0a      	ldr	r3, [pc, #40]	@ (800212c <HAL_RCC_OscConfig+0x274>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002108:	f7fe ff32 	bl	8000f70 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210e:	e00f      	b.n	8002130 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002110:	f7fe ff2e 	bl	8000f70 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d908      	bls.n	8002130 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e146      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	42420000 	.word	0x42420000
 800212c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002130:	4b92      	ldr	r3, [pc, #584]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e9      	bne.n	8002110 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80a6 	beq.w	8002296 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214e:	4b8b      	ldr	r3, [pc, #556]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10d      	bne.n	8002176 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	4b88      	ldr	r3, [pc, #544]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4a87      	ldr	r2, [pc, #540]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002164:	61d3      	str	r3, [r2, #28]
 8002166:	4b85      	ldr	r3, [pc, #532]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002172:	2301      	movs	r3, #1
 8002174:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	4b82      	ldr	r3, [pc, #520]	@ (8002380 <HAL_RCC_OscConfig+0x4c8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d118      	bne.n	80021b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002182:	4b7f      	ldr	r3, [pc, #508]	@ (8002380 <HAL_RCC_OscConfig+0x4c8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a7e      	ldr	r2, [pc, #504]	@ (8002380 <HAL_RCC_OscConfig+0x4c8>)
 8002188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800218c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218e:	f7fe feef 	bl	8000f70 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002196:	f7fe feeb 	bl	8000f70 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b64      	cmp	r3, #100	@ 0x64
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e103      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a8:	4b75      	ldr	r3, [pc, #468]	@ (8002380 <HAL_RCC_OscConfig+0x4c8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d106      	bne.n	80021ca <HAL_RCC_OscConfig+0x312>
 80021bc:	4b6f      	ldr	r3, [pc, #444]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4a6e      	ldr	r2, [pc, #440]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6213      	str	r3, [r2, #32]
 80021c8:	e02d      	b.n	8002226 <HAL_RCC_OscConfig+0x36e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x334>
 80021d2:	4b6a      	ldr	r3, [pc, #424]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a69      	ldr	r2, [pc, #420]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	6213      	str	r3, [r2, #32]
 80021de:	4b67      	ldr	r3, [pc, #412]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a66      	ldr	r2, [pc, #408]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	f023 0304 	bic.w	r3, r3, #4
 80021e8:	6213      	str	r3, [r2, #32]
 80021ea:	e01c      	b.n	8002226 <HAL_RCC_OscConfig+0x36e>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d10c      	bne.n	800220e <HAL_RCC_OscConfig+0x356>
 80021f4:	4b61      	ldr	r3, [pc, #388]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4a60      	ldr	r2, [pc, #384]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	6213      	str	r3, [r2, #32]
 8002200:	4b5e      	ldr	r3, [pc, #376]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	4a5d      	ldr	r2, [pc, #372]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6213      	str	r3, [r2, #32]
 800220c:	e00b      	b.n	8002226 <HAL_RCC_OscConfig+0x36e>
 800220e:	4b5b      	ldr	r3, [pc, #364]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4a5a      	ldr	r2, [pc, #360]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6213      	str	r3, [r2, #32]
 800221a:	4b58      	ldr	r3, [pc, #352]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a57      	ldr	r2, [pc, #348]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d015      	beq.n	800225a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222e:	f7fe fe9f 	bl	8000f70 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7fe fe9b 	bl	8000f70 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0b1      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224c:	4b4b      	ldr	r3, [pc, #300]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ee      	beq.n	8002236 <HAL_RCC_OscConfig+0x37e>
 8002258:	e014      	b.n	8002284 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7fe fe89 	bl	8000f70 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe fe85 	bl	8000f70 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e09b      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002278:	4b40      	ldr	r3, [pc, #256]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ee      	bne.n	8002262 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002284:	7dfb      	ldrb	r3, [r7, #23]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d105      	bne.n	8002296 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228a:	4b3c      	ldr	r3, [pc, #240]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	4a3b      	ldr	r2, [pc, #236]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002290:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002294:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8087 	beq.w	80023ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a0:	4b36      	ldr	r3, [pc, #216]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d061      	beq.n	8002370 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d146      	bne.n	8002342 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b4:	4b33      	ldr	r3, [pc, #204]	@ (8002384 <HAL_RCC_OscConfig+0x4cc>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7fe fe59 	bl	8000f70 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c2:	f7fe fe55 	bl	8000f70 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e06d      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d4:	4b29      	ldr	r3, [pc, #164]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f0      	bne.n	80022c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022e8:	d108      	bne.n	80022fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ea:	4b24      	ldr	r3, [pc, #144]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	4921      	ldr	r1, [pc, #132]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fc:	4b1f      	ldr	r3, [pc, #124]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a19      	ldr	r1, [r3, #32]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	430b      	orrs	r3, r1
 800230e:	491b      	ldr	r1, [pc, #108]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002314:	4b1b      	ldr	r3, [pc, #108]	@ (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002316:	2201      	movs	r2, #1
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7fe fe29 	bl	8000f70 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002322:	f7fe fe25 	bl	8000f70 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e03d      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002334:	4b11      	ldr	r3, [pc, #68]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x46a>
 8002340:	e035      	b.n	80023ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe fe12 	bl	8000f70 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7fe fe0e 	bl	8000f70 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e026      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002362:	4b06      	ldr	r3, [pc, #24]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x498>
 800236e:	e01e      	b.n	80023ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d107      	bne.n	8002388 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e019      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
 800237c:	40021000 	.word	0x40021000
 8002380:	40007000 	.word	0x40007000
 8002384:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002388:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <HAL_RCC_OscConfig+0x500>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	429a      	cmp	r2, r3
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d001      	beq.n	80023ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000

080023bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0d0      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d0:	4b6a      	ldr	r3, [pc, #424]	@ (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d910      	bls.n	8002400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b67      	ldr	r3, [pc, #412]	@ (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 0207 	bic.w	r2, r3, #7
 80023e6:	4965      	ldr	r1, [pc, #404]	@ (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b63      	ldr	r3, [pc, #396]	@ (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0b8      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d020      	beq.n	800244e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002418:	4b59      	ldr	r3, [pc, #356]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a58      	ldr	r2, [pc, #352]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002422:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002430:	4b53      	ldr	r3, [pc, #332]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a52      	ldr	r2, [pc, #328]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800243a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800243c:	4b50      	ldr	r3, [pc, #320]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	494d      	ldr	r1, [pc, #308]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d040      	beq.n	80024dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d107      	bne.n	8002472 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	4b47      	ldr	r3, [pc, #284]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d115      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e07f      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247a:	4b41      	ldr	r3, [pc, #260]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e073      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248a:	4b3d      	ldr	r3, [pc, #244]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e06b      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249a:	4b39      	ldr	r3, [pc, #228]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f023 0203 	bic.w	r2, r3, #3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4936      	ldr	r1, [pc, #216]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024ac:	f7fe fd60 	bl	8000f70 <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b4:	f7fe fd5c 	bl	8000f70 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e053      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 020c 	and.w	r2, r3, #12
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	429a      	cmp	r2, r3
 80024da:	d1eb      	bne.n	80024b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024dc:	4b27      	ldr	r3, [pc, #156]	@ (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d210      	bcs.n	800250c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b24      	ldr	r3, [pc, #144]	@ (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 0207 	bic.w	r2, r3, #7
 80024f2:	4922      	ldr	r1, [pc, #136]	@ (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b20      	ldr	r3, [pc, #128]	@ (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e032      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002518:	4b19      	ldr	r3, [pc, #100]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4916      	ldr	r1, [pc, #88]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002536:	4b12      	ldr	r3, [pc, #72]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	490e      	ldr	r1, [pc, #56]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800254a:	f000 f821 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 800254e:	4602      	mov	r2, r0
 8002550:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	490a      	ldr	r1, [pc, #40]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	5ccb      	ldrb	r3, [r1, r3]
 800255e:	fa22 f303 	lsr.w	r3, r2, r3
 8002562:	4a09      	ldr	r2, [pc, #36]	@ (8002588 <HAL_RCC_ClockConfig+0x1cc>)
 8002564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002566:	4b09      	ldr	r3, [pc, #36]	@ (800258c <HAL_RCC_ClockConfig+0x1d0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fcbe 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40022000 	.word	0x40022000
 8002580:	40021000 	.word	0x40021000
 8002584:	080028d4 	.word	0x080028d4
 8002588:	20000040 	.word	0x20000040
 800258c:	20000044 	.word	0x20000044

08002590 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x94>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d002      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x30>
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d003      	beq.n	80025c6 <HAL_RCC_GetSysClockFreq+0x36>
 80025be:	e027      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025c0:	4b19      	ldr	r3, [pc, #100]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x98>)
 80025c2:	613b      	str	r3, [r7, #16]
      break;
 80025c4:	e027      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	0c9b      	lsrs	r3, r3, #18
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	4a17      	ldr	r2, [pc, #92]	@ (800262c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025d0:	5cd3      	ldrb	r3, [r2, r3]
 80025d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d010      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025de:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x94>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	0c5b      	lsrs	r3, r3, #17
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	4a11      	ldr	r2, [pc, #68]	@ (8002630 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025ea:	5cd3      	ldrb	r3, [r2, r3]
 80025ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x98>)
 80025f2:	fb03 f202 	mul.w	r2, r3, r2
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e004      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a0c      	ldr	r2, [pc, #48]	@ (8002634 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	613b      	str	r3, [r7, #16]
      break;
 800260e:	e002      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002610:	4b05      	ldr	r3, [pc, #20]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x98>)
 8002612:	613b      	str	r3, [r7, #16]
      break;
 8002614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002616:	693b      	ldr	r3, [r7, #16]
}
 8002618:	4618      	mov	r0, r3
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	007a1200 	.word	0x007a1200
 800262c:	080028ec 	.word	0x080028ec
 8002630:	080028fc 	.word	0x080028fc
 8002634:	003d0900 	.word	0x003d0900

08002638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800263c:	4b02      	ldr	r3, [pc, #8]	@ (8002648 <HAL_RCC_GetHCLKFreq+0x10>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	20000040 	.word	0x20000040

0800264c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002650:	f7ff fff2 	bl	8002638 <HAL_RCC_GetHCLKFreq>
 8002654:	4602      	mov	r2, r0
 8002656:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	4903      	ldr	r1, [pc, #12]	@ (8002670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002662:	5ccb      	ldrb	r3, [r1, r3]
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002668:	4618      	mov	r0, r3
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	080028e4 	.word	0x080028e4

08002674 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800267c:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <RCC_Delay+0x34>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <RCC_Delay+0x38>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	0a5b      	lsrs	r3, r3, #9
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002690:	bf00      	nop
  }
  while (Delay --);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1e5a      	subs	r2, r3, #1
 8002696:	60fa      	str	r2, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f9      	bne.n	8002690 <RCC_Delay+0x1c>
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	20000040 	.word	0x20000040
 80026ac:	10624dd3 	.word	0x10624dd3

080026b0 <exit>:
 80026b0:	b508      	push	{r3, lr}
 80026b2:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <exit+0x1c>)
 80026b4:	4604      	mov	r4, r0
 80026b6:	b113      	cbz	r3, 80026be <exit+0xe>
 80026b8:	2100      	movs	r1, #0
 80026ba:	f3af 8000 	nop.w
 80026be:	4b04      	ldr	r3, [pc, #16]	@ (80026d0 <exit+0x20>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	b103      	cbz	r3, 80026c6 <exit+0x16>
 80026c4:	4798      	blx	r3
 80026c6:	4620      	mov	r0, r4
 80026c8:	f7fe fbc2 	bl	8000e50 <_exit>
 80026cc:	00000000 	.word	0x00000000
 80026d0:	20000284 	.word	0x20000284

080026d4 <__itoa>:
 80026d4:	1e93      	subs	r3, r2, #2
 80026d6:	2b22      	cmp	r3, #34	@ 0x22
 80026d8:	b510      	push	{r4, lr}
 80026da:	460c      	mov	r4, r1
 80026dc:	d904      	bls.n	80026e8 <__itoa+0x14>
 80026de:	2300      	movs	r3, #0
 80026e0:	461c      	mov	r4, r3
 80026e2:	700b      	strb	r3, [r1, #0]
 80026e4:	4620      	mov	r0, r4
 80026e6:	bd10      	pop	{r4, pc}
 80026e8:	2a0a      	cmp	r2, #10
 80026ea:	d109      	bne.n	8002700 <__itoa+0x2c>
 80026ec:	2800      	cmp	r0, #0
 80026ee:	da07      	bge.n	8002700 <__itoa+0x2c>
 80026f0:	232d      	movs	r3, #45	@ 0x2d
 80026f2:	700b      	strb	r3, [r1, #0]
 80026f4:	2101      	movs	r1, #1
 80026f6:	4240      	negs	r0, r0
 80026f8:	4421      	add	r1, r4
 80026fa:	f000 f805 	bl	8002708 <__utoa>
 80026fe:	e7f1      	b.n	80026e4 <__itoa+0x10>
 8002700:	2100      	movs	r1, #0
 8002702:	e7f9      	b.n	80026f8 <__itoa+0x24>

08002704 <itoa>:
 8002704:	f7ff bfe6 	b.w	80026d4 <__itoa>

08002708 <__utoa>:
 8002708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800270a:	b08b      	sub	sp, #44	@ 0x2c
 800270c:	4605      	mov	r5, r0
 800270e:	460b      	mov	r3, r1
 8002710:	466e      	mov	r6, sp
 8002712:	4c1d      	ldr	r4, [pc, #116]	@ (8002788 <__utoa+0x80>)
 8002714:	f104 0c20 	add.w	ip, r4, #32
 8002718:	4637      	mov	r7, r6
 800271a:	6820      	ldr	r0, [r4, #0]
 800271c:	6861      	ldr	r1, [r4, #4]
 800271e:	3408      	adds	r4, #8
 8002720:	c703      	stmia	r7!, {r0, r1}
 8002722:	4564      	cmp	r4, ip
 8002724:	463e      	mov	r6, r7
 8002726:	d1f7      	bne.n	8002718 <__utoa+0x10>
 8002728:	7921      	ldrb	r1, [r4, #4]
 800272a:	6820      	ldr	r0, [r4, #0]
 800272c:	7139      	strb	r1, [r7, #4]
 800272e:	1e91      	subs	r1, r2, #2
 8002730:	2922      	cmp	r1, #34	@ 0x22
 8002732:	6038      	str	r0, [r7, #0]
 8002734:	f04f 0100 	mov.w	r1, #0
 8002738:	d904      	bls.n	8002744 <__utoa+0x3c>
 800273a:	7019      	strb	r1, [r3, #0]
 800273c:	460b      	mov	r3, r1
 800273e:	4618      	mov	r0, r3
 8002740:	b00b      	add	sp, #44	@ 0x2c
 8002742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002744:	1e58      	subs	r0, r3, #1
 8002746:	4684      	mov	ip, r0
 8002748:	fbb5 f7f2 	udiv	r7, r5, r2
 800274c:	fb02 5617 	mls	r6, r2, r7, r5
 8002750:	3628      	adds	r6, #40	@ 0x28
 8002752:	446e      	add	r6, sp
 8002754:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002758:	460c      	mov	r4, r1
 800275a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800275e:	462e      	mov	r6, r5
 8002760:	42b2      	cmp	r2, r6
 8002762:	463d      	mov	r5, r7
 8002764:	f101 0101 	add.w	r1, r1, #1
 8002768:	d9ee      	bls.n	8002748 <__utoa+0x40>
 800276a:	2200      	movs	r2, #0
 800276c:	545a      	strb	r2, [r3, r1]
 800276e:	1919      	adds	r1, r3, r4
 8002770:	1aa5      	subs	r5, r4, r2
 8002772:	42aa      	cmp	r2, r5
 8002774:	dae3      	bge.n	800273e <__utoa+0x36>
 8002776:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800277a:	780e      	ldrb	r6, [r1, #0]
 800277c:	3201      	adds	r2, #1
 800277e:	7006      	strb	r6, [r0, #0]
 8002780:	f801 5901 	strb.w	r5, [r1], #-1
 8002784:	e7f4      	b.n	8002770 <__utoa+0x68>
 8002786:	bf00      	nop
 8002788:	080028fe 	.word	0x080028fe

0800278c <memset>:
 800278c:	4603      	mov	r3, r0
 800278e:	4402      	add	r2, r0
 8002790:	4293      	cmp	r3, r2
 8002792:	d100      	bne.n	8002796 <memset+0xa>
 8002794:	4770      	bx	lr
 8002796:	f803 1b01 	strb.w	r1, [r3], #1
 800279a:	e7f9      	b.n	8002790 <memset+0x4>

0800279c <strcat>:
 800279c:	4602      	mov	r2, r0
 800279e:	b510      	push	{r4, lr}
 80027a0:	7814      	ldrb	r4, [r2, #0]
 80027a2:	4613      	mov	r3, r2
 80027a4:	3201      	adds	r2, #1
 80027a6:	2c00      	cmp	r4, #0
 80027a8:	d1fa      	bne.n	80027a0 <strcat+0x4>
 80027aa:	3b01      	subs	r3, #1
 80027ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80027b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80027b4:	2a00      	cmp	r2, #0
 80027b6:	d1f9      	bne.n	80027ac <strcat+0x10>
 80027b8:	bd10      	pop	{r4, pc}
	...

080027bc <__errno>:
 80027bc:	4b01      	ldr	r3, [pc, #4]	@ (80027c4 <__errno+0x8>)
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	2000004c 	.word	0x2000004c

080027c8 <__libc_init_array>:
 80027c8:	b570      	push	{r4, r5, r6, lr}
 80027ca:	2600      	movs	r6, #0
 80027cc:	4d0c      	ldr	r5, [pc, #48]	@ (8002800 <__libc_init_array+0x38>)
 80027ce:	4c0d      	ldr	r4, [pc, #52]	@ (8002804 <__libc_init_array+0x3c>)
 80027d0:	1b64      	subs	r4, r4, r5
 80027d2:	10a4      	asrs	r4, r4, #2
 80027d4:	42a6      	cmp	r6, r4
 80027d6:	d109      	bne.n	80027ec <__libc_init_array+0x24>
 80027d8:	f000 f81a 	bl	8002810 <_init>
 80027dc:	2600      	movs	r6, #0
 80027de:	4d0a      	ldr	r5, [pc, #40]	@ (8002808 <__libc_init_array+0x40>)
 80027e0:	4c0a      	ldr	r4, [pc, #40]	@ (800280c <__libc_init_array+0x44>)
 80027e2:	1b64      	subs	r4, r4, r5
 80027e4:	10a4      	asrs	r4, r4, #2
 80027e6:	42a6      	cmp	r6, r4
 80027e8:	d105      	bne.n	80027f6 <__libc_init_array+0x2e>
 80027ea:	bd70      	pop	{r4, r5, r6, pc}
 80027ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f0:	4798      	blx	r3
 80027f2:	3601      	adds	r6, #1
 80027f4:	e7ee      	b.n	80027d4 <__libc_init_array+0xc>
 80027f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027fa:	4798      	blx	r3
 80027fc:	3601      	adds	r6, #1
 80027fe:	e7f2      	b.n	80027e6 <__libc_init_array+0x1e>
 8002800:	08002924 	.word	0x08002924
 8002804:	08002924 	.word	0x08002924
 8002808:	08002924 	.word	0x08002924
 800280c:	08002928 	.word	0x08002928

08002810 <_init>:
 8002810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002812:	bf00      	nop
 8002814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002816:	bc08      	pop	{r3}
 8002818:	469e      	mov	lr, r3
 800281a:	4770      	bx	lr

0800281c <_fini>:
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281e:	bf00      	nop
 8002820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002822:	bc08      	pop	{r3}
 8002824:	469e      	mov	lr, r3
 8002826:	4770      	bx	lr

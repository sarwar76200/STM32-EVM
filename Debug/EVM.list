
EVM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a80  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08003b8c  08003b8c  00004b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db4  08003db4  00005108  2**0
                  CONTENTS
  4 .ARM          00000008  08003db4  08003db4  00004db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dbc  08003dbc  00005108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dbc  08003dbc  00004dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dc0  08003dc0  00004dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  08003dc4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  20000108  08003ecc  00005108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000884  08003ecc  00005884  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007598  00000000  00000000  00005131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ff  00000000  00000000  0000c6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  0000dfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c5  00000000  00000000  0000e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c13  00000000  00000000  0000ef7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5f6  00000000  00000000  00026b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000845df  00000000  00000000  00031186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5765  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d0c  00000000  00000000  000b57a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000b84b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000108 	.word	0x20000108
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b74 	.word	0x08003b74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000010c 	.word	0x2000010c
 8000148:	08003b74 	.word	0x08003b74

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000166:	4a38      	ldr	r2, [pc, #224]	@ (8000248 <HD44780_Init+0xec>)
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800016c:	4b37      	ldr	r3, [pc, #220]	@ (800024c <HD44780_Init+0xf0>)
 800016e:	2208      	movs	r2, #8
 8000170:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000172:	4b37      	ldr	r3, [pc, #220]	@ (8000250 <HD44780_Init+0xf4>)
 8000174:	2200      	movs	r2, #0
 8000176:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000178:	4b33      	ldr	r3, [pc, #204]	@ (8000248 <HD44780_Init+0xec>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d907      	bls.n	8000190 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000180:	4b33      	ldr	r3, [pc, #204]	@ (8000250 <HD44780_Init+0xf4>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2da      	uxtb	r2, r3
 800018a:	4b31      	ldr	r3, [pc, #196]	@ (8000250 <HD44780_Init+0xf4>)
 800018c:	701a      	strb	r2, [r3, #0]
 800018e:	e006      	b.n	800019e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000190:	4b2f      	ldr	r3, [pc, #188]	@ (8000250 <HD44780_Init+0xf4>)
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	f043 0304 	orr.w	r3, r3, #4
 8000198:	b2da      	uxtb	r2, r3
 800019a:	4b2d      	ldr	r3, [pc, #180]	@ (8000250 <HD44780_Init+0xf4>)
 800019c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800019e:	f000 f985 	bl	80004ac <DelayInit>
  HAL_Delay(50);
 80001a2:	2032      	movs	r0, #50	@ 0x32
 80001a4:	f001 f932 	bl	800140c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80001a8:	4b28      	ldr	r3, [pc, #160]	@ (800024c <HD44780_Init+0xf0>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 f943 	bl	8000438 <ExpanderWrite>
  HAL_Delay(1000);
 80001b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001b6:	f001 f929 	bl	800140c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001ba:	2030      	movs	r0, #48	@ 0x30
 80001bc:	f000 f92b 	bl	8000416 <Write4Bits>
  DelayUS(4500);
 80001c0:	f241 1094 	movw	r0, #4500	@ 0x1194
 80001c4:	f000 f99a 	bl	80004fc <DelayUS>

  Write4Bits(0x03 << 4);
 80001c8:	2030      	movs	r0, #48	@ 0x30
 80001ca:	f000 f924 	bl	8000416 <Write4Bits>
  DelayUS(4500);
 80001ce:	f241 1094 	movw	r0, #4500	@ 0x1194
 80001d2:	f000 f993 	bl	80004fc <DelayUS>

  Write4Bits(0x03 << 4);
 80001d6:	2030      	movs	r0, #48	@ 0x30
 80001d8:	f000 f91d 	bl	8000416 <Write4Bits>
  DelayUS(4500);
 80001dc:	f241 1094 	movw	r0, #4500	@ 0x1194
 80001e0:	f000 f98c 	bl	80004fc <DelayUS>

  Write4Bits(0x02 << 4);
 80001e4:	2020      	movs	r0, #32
 80001e6:	f000 f916 	bl	8000416 <Write4Bits>
  DelayUS(100);
 80001ea:	2064      	movs	r0, #100	@ 0x64
 80001ec:	f000 f986 	bl	80004fc <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001f0:	4b17      	ldr	r3, [pc, #92]	@ (8000250 <HD44780_Init+0xf4>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	f043 0320 	orr.w	r3, r3, #32
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 f8ce 	bl	800039c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000200:	4b14      	ldr	r3, [pc, #80]	@ (8000254 <HD44780_Init+0xf8>)
 8000202:	2204      	movs	r2, #4
 8000204:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000206:	f000 f875 	bl	80002f4 <HD44780_Display>
  HD44780_Clear();
 800020a:	f000 f82b 	bl	8000264 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800020e:	4b12      	ldr	r3, [pc, #72]	@ (8000258 <HD44780_Init+0xfc>)
 8000210:	2202      	movs	r2, #2
 8000212:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000214:	4b10      	ldr	r3, [pc, #64]	@ (8000258 <HD44780_Init+0xfc>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	f043 0304 	orr.w	r3, r3, #4
 800021c:	b2db      	uxtb	r3, r3
 800021e:	4618      	mov	r0, r3
 8000220:	f000 f8bc 	bl	800039c <SendCommand>
  DelayUS(4500);
 8000224:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000228:	f000 f968 	bl	80004fc <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800022c:	490b      	ldr	r1, [pc, #44]	@ (800025c <HD44780_Init+0x100>)
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f876 	bl	8000320 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000234:	490a      	ldr	r1, [pc, #40]	@ (8000260 <HD44780_Init+0x104>)
 8000236:	2001      	movs	r0, #1
 8000238:	f000 f872 	bl	8000320 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800023c:	f000 f81d 	bl	800027a <HD44780_Home>
}
 8000240:	bf00      	nop
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000127 	.word	0x20000127
 800024c:	20000128 	.word	0x20000128
 8000250:	20000124 	.word	0x20000124
 8000254:	20000125 	.word	0x20000125
 8000258:	20000126 	.word	0x20000126
 800025c:	20000000 	.word	0x20000000
 8000260:	20000008 	.word	0x20000008

08000264 <HD44780_Clear>:

void HD44780_Clear()
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000268:	2001      	movs	r0, #1
 800026a:	f000 f897 	bl	800039c <SendCommand>
  DelayUS(2000);
 800026e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000272:	f000 f943 	bl	80004fc <DelayUS>
}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}

0800027a <HD44780_Home>:

void HD44780_Home()
{
 800027a:	b580      	push	{r7, lr}
 800027c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800027e:	2002      	movs	r0, #2
 8000280:	f000 f88c 	bl	800039c <SendCommand>
  DelayUS(2000);
 8000284:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000288:	f000 f938 	bl	80004fc <DelayUS>
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}

08000290 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	460a      	mov	r2, r1
 800029a:	71fb      	strb	r3, [r7, #7]
 800029c:	4613      	mov	r3, r2
 800029e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80002a0:	4b12      	ldr	r3, [pc, #72]	@ (80002ec <HD44780_SetCursor+0x5c>)
 80002a2:	f107 0408 	add.w	r4, r7, #8
 80002a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80002ac:	4b10      	ldr	r3, [pc, #64]	@ (80002f0 <HD44780_SetCursor+0x60>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	79ba      	ldrb	r2, [r7, #6]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d303      	bcc.n	80002be <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	@ (80002f0 <HD44780_SetCursor+0x60>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	3b01      	subs	r3, #1
 80002bc:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002be:	79bb      	ldrb	r3, [r7, #6]
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	3318      	adds	r3, #24
 80002c4:	443b      	add	r3, r7
 80002c6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	4413      	add	r3, r2
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	b25b      	sxtb	r3, r3
 80002d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002d8:	b25b      	sxtb	r3, r3
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 f85d 	bl	800039c <SendCommand>
}
 80002e2:	bf00      	nop
 80002e4:	371c      	adds	r7, #28
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd90      	pop	{r4, r7, pc}
 80002ea:	bf00      	nop
 80002ec:	08003b8c 	.word	0x08003b8c
 80002f0:	20000127 	.word	0x20000127

080002f4 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80002f8:	4b08      	ldr	r3, [pc, #32]	@ (800031c <HD44780_Display+0x28>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	b2da      	uxtb	r2, r3
 8000302:	4b06      	ldr	r3, [pc, #24]	@ (800031c <HD44780_Display+0x28>)
 8000304:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000306:	4b05      	ldr	r3, [pc, #20]	@ (800031c <HD44780_Display+0x28>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	b2db      	uxtb	r3, r3
 8000310:	4618      	mov	r0, r3
 8000312:	f000 f843 	bl	800039c <SendCommand>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000125 	.word	0x20000125

08000320 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	6039      	str	r1, [r7, #0]
 800032a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	f003 0307 	and.w	r3, r3, #7
 8000332:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	00db      	lsls	r3, r3, #3
 8000338:	b25b      	sxtb	r3, r3
 800033a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800033e:	b25b      	sxtb	r3, r3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	4618      	mov	r0, r3
 8000344:	f000 f82a 	bl	800039c <SendCommand>
  for (int i=0; i<8; i++)
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	e009      	b.n	8000362 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	683a      	ldr	r2, [r7, #0]
 8000352:	4413      	add	r3, r2
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f82e 	bl	80003b8 <SendChar>
  for (int i=0; i<8; i++)
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	3301      	adds	r3, #1
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	2b07      	cmp	r3, #7
 8000366:	ddf2      	ble.n	800034e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000368:	bf00      	nop
 800036a:	bf00      	nop
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000372:	b580      	push	{r7, lr}
 8000374:	b082      	sub	sp, #8
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800037a:	e006      	b.n	800038a <HD44780_PrintStr+0x18>
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	1c5a      	adds	r2, r3, #1
 8000380:	607a      	str	r2, [r7, #4]
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	4618      	mov	r0, r3
 8000386:	f000 f817 	bl	80003b8 <SendChar>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d1f4      	bne.n	800037c <HD44780_PrintStr+0xa>
}
 8000392:	bf00      	nop
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 f812 	bl	80003d4 <Send>
}
 80003b0:	bf00      	nop
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	2101      	movs	r1, #1
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 f804 	bl	80003d4 <Send>
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	460a      	mov	r2, r1
 80003de:	71fb      	strb	r3, [r7, #7]
 80003e0:	4613      	mov	r3, r2
 80003e2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	f023 030f 	bic.w	r3, r3, #15
 80003ea:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	011b      	lsls	r3, r3, #4
 80003f0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80003f2:	7bfa      	ldrb	r2, [r7, #15]
 80003f4:	79bb      	ldrb	r3, [r7, #6]
 80003f6:	4313      	orrs	r3, r2
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 f80b 	bl	8000416 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000400:	7bba      	ldrb	r2, [r7, #14]
 8000402:	79bb      	ldrb	r3, [r7, #6]
 8000404:	4313      	orrs	r3, r2
 8000406:	b2db      	uxtb	r3, r3
 8000408:	4618      	mov	r0, r3
 800040a:	f000 f804 	bl	8000416 <Write4Bits>
}
 800040e:	bf00      	nop
 8000410:	3710      	adds	r7, #16
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b082      	sub	sp, #8
 800041a:	af00      	add	r7, sp, #0
 800041c:	4603      	mov	r3, r0
 800041e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	4618      	mov	r0, r3
 8000424:	f000 f808 	bl	8000438 <ExpanderWrite>
  PulseEnable(value);
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	4618      	mov	r0, r3
 800042c:	f000 f820 	bl	8000470 <PulseEnable>
}
 8000430:	bf00      	nop
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af02      	add	r7, sp, #8
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000442:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <ExpanderWrite+0x30>)
 8000444:	781a      	ldrb	r2, [r3, #0]
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	4313      	orrs	r3, r2
 800044a:	b2db      	uxtb	r3, r3
 800044c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800044e:	f107 020f 	add.w	r2, r7, #15
 8000452:	230a      	movs	r3, #10
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	214e      	movs	r1, #78	@ 0x4e
 800045a:	4804      	ldr	r0, [pc, #16]	@ (800046c <ExpanderWrite+0x34>)
 800045c:	f001 fc18 	bl	8001c90 <HAL_I2C_Master_Transmit>
}
 8000460:	bf00      	nop
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000128 	.word	0x20000128
 800046c:	2000012c 	.word	0x2000012c

08000470 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	f043 0304 	orr.w	r3, r3, #4
 8000480:	b2db      	uxtb	r3, r3
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ffd8 	bl	8000438 <ExpanderWrite>
  DelayUS(20);
 8000488:	2014      	movs	r0, #20
 800048a:	f000 f837 	bl	80004fc <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	f023 0304 	bic.w	r3, r3, #4
 8000494:	b2db      	uxtb	r3, r3
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ffce 	bl	8000438 <ExpanderWrite>
  DelayUS(20);
 800049c:	2014      	movs	r0, #20
 800049e:	f000 f82d 	bl	80004fc <DelayUS>
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <DelayInit>:

static void DelayInit(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80004b0:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <DelayInit+0x48>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a0f      	ldr	r2, [pc, #60]	@ (80004f4 <DelayInit+0x48>)
 80004b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004ba:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <DelayInit+0x48>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	4a0c      	ldr	r2, [pc, #48]	@ (80004f4 <DelayInit+0x48>)
 80004c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004c6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004c8:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <DelayInit+0x4c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0a      	ldr	r2, [pc, #40]	@ (80004f8 <DelayInit+0x4c>)
 80004ce:	f023 0301 	bic.w	r3, r3, #1
 80004d2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004d4:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <DelayInit+0x4c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a07      	ldr	r2, [pc, #28]	@ (80004f8 <DelayInit+0x4c>)
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80004e0:	4b05      	ldr	r3, [pc, #20]	@ (80004f8 <DelayInit+0x4c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80004e6:	bf00      	nop
  __ASM volatile ("NOP");
 80004e8:	bf00      	nop
  __ASM volatile ("NOP");
 80004ea:	bf00      	nop
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	e000edf0 	.word	0xe000edf0
 80004f8:	e0001000 	.word	0xe0001000

080004fc <DelayUS>:

static void DelayUS(uint32_t us) {
 80004fc:	b480      	push	{r7}
 80004fe:	b087      	sub	sp, #28
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000504:	4b0d      	ldr	r3, [pc, #52]	@ (800053c <DelayUS+0x40>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a0d      	ldr	r2, [pc, #52]	@ (8000540 <DelayUS+0x44>)
 800050a:	fba2 2303 	umull	r2, r3, r2, r3
 800050e:	0c9a      	lsrs	r2, r3, #18
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	fb02 f303 	mul.w	r3, r2, r3
 8000516:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000518:	4b0a      	ldr	r3, [pc, #40]	@ (8000544 <DelayUS+0x48>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800051e:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <DelayUS+0x48>)
 8000520:	685a      	ldr	r2, [r3, #4]
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	697a      	ldr	r2, [r7, #20]
 800052c:	429a      	cmp	r2, r3
 800052e:	d8f6      	bhi.n	800051e <DelayUS+0x22>
}
 8000530:	bf00      	nop
 8000532:	bf00      	nop
 8000534:	371c      	adds	r7, #28
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	200000a0 	.word	0x200000a0
 8000540:	431bde83 	.word	0x431bde83
 8000544:	e0001000 	.word	0xe0001000

08000548 <clear_console>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void clear_console() {
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	HD44780_Clear();
 800054c:	f7ff fe8a 	bl	8000264 <HD44780_Clear>
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}

08000554 <show_text>:

void show_text(int x, int y, const char *text, int clear) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
 8000560:	603b      	str	r3, [r7, #0]
	if (clear) {
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <show_text+0x18>
		clear_console();
 8000568:	f7ff ffee 	bl	8000548 <clear_console>
	}

	HD44780_SetCursor(x, y);
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	68ba      	ldr	r2, [r7, #8]
 8000572:	b2d2      	uxtb	r2, r2
 8000574:	4611      	mov	r1, r2
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fe8a 	bl	8000290 <HD44780_SetCursor>
	HD44780_PrintStr(text);
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f7ff fef8 	bl	8000372 <HD44780_PrintStr>
}
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <stack_size>:


int transition_stack[100] = {0};
int stack_ptr = 1;

int stack_size() {
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  return stack_ptr;
 8000590:	4b02      	ldr	r3, [pc, #8]	@ (800059c <stack_size+0x10>)
 8000592:	681b      	ldr	r3, [r3, #0]
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	20000010 	.word	0x20000010

080005a0 <stack_top>:
int stack_top() {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  assert(stack_size() > 0);
 80005a4:	f7ff fff2 	bl	800058c <stack_size>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	dc05      	bgt.n	80005ba <stack_top+0x1a>
 80005ae:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <stack_top+0x2c>)
 80005b0:	4a07      	ldr	r2, [pc, #28]	@ (80005d0 <stack_top+0x30>)
 80005b2:	2173      	movs	r1, #115	@ 0x73
 80005b4:	4807      	ldr	r0, [pc, #28]	@ (80005d4 <stack_top+0x34>)
 80005b6:	f002 fabf 	bl	8002b38 <__assert_func>
  return transition_stack[stack_ptr - 1];
 80005ba:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <stack_top+0x38>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3b01      	subs	r3, #1
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <stack_top+0x3c>)
 80005c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	08003b9c 	.word	0x08003b9c
 80005d0:	08003ce8 	.word	0x08003ce8
 80005d4:	08003bb0 	.word	0x08003bb0
 80005d8:	20000010 	.word	0x20000010
 80005dc:	200001a4 	.word	0x200001a4

080005e0 <stack_push>:

void stack_push(int value) {
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  transition_stack[stack_ptr++] = value;
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <stack_push+0x24>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	1c5a      	adds	r2, r3, #1
 80005ee:	4905      	ldr	r1, [pc, #20]	@ (8000604 <stack_push+0x24>)
 80005f0:	600a      	str	r2, [r1, #0]
 80005f2:	4905      	ldr	r1, [pc, #20]	@ (8000608 <stack_push+0x28>)
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	20000010 	.word	0x20000010
 8000608:	200001a4 	.word	0x200001a4

0800060c <stack_pop>:

void stack_pop() {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  if (stack_size() <= 1) {
 8000610:	f7ff ffbc 	bl	800058c <stack_size>
 8000614:	4603      	mov	r3, r0
 8000616:	2b01      	cmp	r3, #1
 8000618:	dd05      	ble.n	8000626 <stack_pop+0x1a>
    return;
  }
  --stack_ptr;
 800061a:	4b04      	ldr	r3, [pc, #16]	@ (800062c <stack_pop+0x20>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3b01      	subs	r3, #1
 8000620:	4a02      	ldr	r2, [pc, #8]	@ (800062c <stack_pop+0x20>)
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	e000      	b.n	8000628 <stack_pop+0x1c>
    return;
 8000626:	bf00      	nop
}
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000010 	.word	0x20000010

08000630 <stack_reset>:

void stack_reset() {
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  stack_ptr = 1;
 8000634:	4b03      	ldr	r3, [pc, #12]	@ (8000644 <stack_reset+0x14>)
 8000636:	2201      	movs	r2, #1
 8000638:	601a      	str	r2, [r3, #0]
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000010 	.word	0x20000010

08000648 <cast_vote>:
const char* headings[][2] = {{"Welcome voter", "1.Vote #.Exit"}, {"Main menu", "1.Stats #.Exit"}, {"Select candidate", "1.A 2.B 3.C 4.D"}, {"See stat", "1.Vote count #.Exit"}, {"", ""}, {"Vote Success!", "Thank you"}, {"Admin Logged In", "1.Menu #.Exit"}, {"Voting finished", "Winner: "}, {"Pending", "Admin Login"}};
const char* headings_admin[][2] = {{"Welcome admin", "1.Menu #.Exit"}, {"1.Stats 2.Take", "3.End vote"}, {"Select candidate", "1.A 2.B 3.C 4.D"}, {"See stat", "1.Vote count #.Exit"}, {"", ""}, {"Vote Success!", "#.Exit"}, {"Admin Logged In", "1.Menu #.Exit"}, {"Voting finished", "Winner: "}};

int counts[4];

void cast_vote(int option) {
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  ++counts[option - 1];
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3b01      	subs	r3, #1
 8000654:	4a05      	ldr	r2, [pc, #20]	@ (800066c <cast_vote+0x24>)
 8000656:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800065a:	3201      	adds	r2, #1
 800065c:	4903      	ldr	r1, [pc, #12]	@ (800066c <cast_vote+0x24>)
 800065e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	20000334 	.word	0x20000334

08000670 <get_winner>:
char get_winner() {
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
  int max_val = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  char winner = '?';
 800067a:	233f      	movs	r3, #63	@ 0x3f
 800067c:	72fb      	strb	r3, [r7, #11]
  for (int i = 0; i < 4; ++i) {
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	e012      	b.n	80006aa <get_winner+0x3a>
    if (counts[i] > max_val) {
 8000684:	4a0d      	ldr	r2, [pc, #52]	@ (80006bc <get_winner+0x4c>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	429a      	cmp	r2, r3
 8000690:	da08      	bge.n	80006a4 <get_winner+0x34>
      max_val = counts[i];
 8000692:	4a0a      	ldr	r2, [pc, #40]	@ (80006bc <get_winner+0x4c>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069a:	60fb      	str	r3, [r7, #12]
      winner = (char) ('A' + i);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	3341      	adds	r3, #65	@ 0x41
 80006a2:	72fb      	strb	r3, [r7, #11]
  for (int i = 0; i < 4; ++i) {
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3301      	adds	r3, #1
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	dde9      	ble.n	8000684 <get_winner+0x14>
    }
  }
  return winner;
 80006b0:	7afb      	ldrb	r3, [r7, #11]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	20000334 	.word	0x20000334

080006c0 <show_heading>:
  current_state = HOME_STATE;
  counts[0] = counts[1] = counts[2] = counts[3] = 1;
  stack_reset();
}

void show_heading() {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b090      	sub	sp, #64	@ 0x40
 80006c4:	af00      	add	r7, sp, #0
  if (current_state == PUBLISH_STATE) {
 80006c6:	4b5d      	ldr	r3, [pc, #372]	@ (800083c <show_heading+0x17c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b07      	cmp	r3, #7
 80006cc:	d11c      	bne.n	8000708 <show_heading+0x48>
    char winner[2] = {get_winner()};
 80006ce:	2300      	movs	r3, #0
 80006d0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80006d2:	f7ff ffcd 	bl	8000670 <get_winner>
 80006d6:	4603      	mov	r3, r0
 80006d8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    char text[] = "Winner: ";
 80006dc:	4a58      	ldr	r2, [pc, #352]	@ (8000840 <show_heading+0x180>)
 80006de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80006e4:	c303      	stmia	r3!, {r0, r1}
 80006e6:	701a      	strb	r2, [r3, #0]
    strcat(text, winner);
 80006e8:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80006ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006f0:	4611      	mov	r1, r2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fbcb 	bl	8002e8e <strcat>
    show_text(0, 1, text, 0);
 80006f8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80006fc:	2300      	movs	r3, #0
 80006fe:	2101      	movs	r1, #1
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ff27 	bl	8000554 <show_text>
    } else {
      show_text(0, 0, headings[current_state][0], 0);
      show_text(0, 1, headings[current_state][1], 0);
    }
  }
}
 8000706:	e095      	b.n	8000834 <show_heading+0x174>
  } else if (current_state == COUNT_STATE) {
 8000708:	4b4c      	ldr	r3, [pc, #304]	@ (800083c <show_heading+0x17c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b04      	cmp	r3, #4
 800070e:	d162      	bne.n	80007d6 <show_heading+0x116>
    char a_label[] = "A: ";
 8000710:	4b4c      	ldr	r3, [pc, #304]	@ (8000844 <show_heading+0x184>)
 8000712:	62fb      	str	r3, [r7, #44]	@ 0x2c
    itoa(counts[0], a_count, 10);
 8000714:	4b4c      	ldr	r3, [pc, #304]	@ (8000848 <show_heading+0x188>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800071c:	220a      	movs	r2, #10
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fa52 	bl	8002bc8 <itoa>
    strcat(a_label, a_count);
 8000724:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000728:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fbad 	bl	8002e8e <strcat>
    show_text(0, 0, a_label, 0);
 8000734:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000738:	2300      	movs	r3, #0
 800073a:	2100      	movs	r1, #0
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff ff09 	bl	8000554 <show_text>
    char b_label[] = "B: ";
 8000742:	4b42      	ldr	r3, [pc, #264]	@ (800084c <show_heading+0x18c>)
 8000744:	623b      	str	r3, [r7, #32]
    itoa(counts[1], b_count, 10);
 8000746:	4b40      	ldr	r3, [pc, #256]	@ (8000848 <show_heading+0x188>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	f107 0118 	add.w	r1, r7, #24
 800074e:	220a      	movs	r2, #10
 8000750:	4618      	mov	r0, r3
 8000752:	f002 fa39 	bl	8002bc8 <itoa>
    strcat(b_label, b_count);
 8000756:	f107 0218 	add.w	r2, r7, #24
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fb94 	bl	8002e8e <strcat>
    show_text(8, 0, b_label, 0);
 8000766:	f107 0220 	add.w	r2, r7, #32
 800076a:	2300      	movs	r3, #0
 800076c:	2100      	movs	r1, #0
 800076e:	2008      	movs	r0, #8
 8000770:	f7ff fef0 	bl	8000554 <show_text>
    char c_label[] = "C: ";
 8000774:	4b36      	ldr	r3, [pc, #216]	@ (8000850 <show_heading+0x190>)
 8000776:	617b      	str	r3, [r7, #20]
    itoa(counts[2], c_count, 10);
 8000778:	4b33      	ldr	r3, [pc, #204]	@ (8000848 <show_heading+0x188>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	f107 010c 	add.w	r1, r7, #12
 8000780:	220a      	movs	r2, #10
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fa20 	bl	8002bc8 <itoa>
    strcat(c_label, c_count);
 8000788:	f107 020c 	add.w	r2, r7, #12
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4611      	mov	r1, r2
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fb7b 	bl	8002e8e <strcat>
    show_text(0, 1, c_label, 0);
 8000798:	f107 0214 	add.w	r2, r7, #20
 800079c:	2300      	movs	r3, #0
 800079e:	2101      	movs	r1, #1
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff fed7 	bl	8000554 <show_text>
    char d_label[] = "D: ";
 80007a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000854 <show_heading+0x194>)
 80007a8:	60bb      	str	r3, [r7, #8]
    itoa(counts[3], d_count, 10);
 80007aa:	4b27      	ldr	r3, [pc, #156]	@ (8000848 <show_heading+0x188>)
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	4639      	mov	r1, r7
 80007b0:	220a      	movs	r2, #10
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 fa08 	bl	8002bc8 <itoa>
    strcat(d_label, d_count);
 80007b8:	463a      	mov	r2, r7
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 fb64 	bl	8002e8e <strcat>
    show_text(8, 1, d_label, 0);
 80007c6:	f107 0208 	add.w	r2, r7, #8
 80007ca:	2300      	movs	r3, #0
 80007cc:	2101      	movs	r1, #1
 80007ce:	2008      	movs	r0, #8
 80007d0:	f7ff fec0 	bl	8000554 <show_text>
}
 80007d4:	e02e      	b.n	8000834 <show_heading+0x174>
    if (admin_authorized) {
 80007d6:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <show_heading+0x198>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d015      	beq.n	800080a <show_heading+0x14a>
      show_text(0, 0, headings_admin[current_state][0], 0);
 80007de:	4b17      	ldr	r3, [pc, #92]	@ (800083c <show_heading+0x17c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a1e      	ldr	r2, [pc, #120]	@ (800085c <show_heading+0x19c>)
 80007e4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80007e8:	2300      	movs	r3, #0
 80007ea:	2100      	movs	r1, #0
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff feb1 	bl	8000554 <show_text>
      show_text(0, 1, headings_admin[current_state][1], 0);
 80007f2:	4b12      	ldr	r3, [pc, #72]	@ (800083c <show_heading+0x17c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a19      	ldr	r2, [pc, #100]	@ (800085c <show_heading+0x19c>)
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	4413      	add	r3, r2
 80007fc:	685a      	ldr	r2, [r3, #4]
 80007fe:	2300      	movs	r3, #0
 8000800:	2101      	movs	r1, #1
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff fea6 	bl	8000554 <show_text>
}
 8000808:	e014      	b.n	8000834 <show_heading+0x174>
      show_text(0, 0, headings[current_state][0], 0);
 800080a:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <show_heading+0x17c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a14      	ldr	r2, [pc, #80]	@ (8000860 <show_heading+0x1a0>)
 8000810:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000814:	2300      	movs	r3, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2000      	movs	r0, #0
 800081a:	f7ff fe9b 	bl	8000554 <show_text>
      show_text(0, 1, headings[current_state][1], 0);
 800081e:	4b07      	ldr	r3, [pc, #28]	@ (800083c <show_heading+0x17c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a0f      	ldr	r2, [pc, #60]	@ (8000860 <show_heading+0x1a0>)
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	4413      	add	r3, r2
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	2300      	movs	r3, #0
 800082c:	2101      	movs	r1, #1
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff fe90 	bl	8000554 <show_text>
}
 8000834:	bf00      	nop
 8000836:	3740      	adds	r7, #64	@ 0x40
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000014 	.word	0x20000014
 8000840:	08003c94 	.word	0x08003c94
 8000844:	00203a41 	.word	0x00203a41
 8000848:	20000334 	.word	0x20000334
 800084c:	00203a42 	.word	0x00203a42
 8000850:	00203a43 	.word	0x00203a43
 8000854:	00203a44 	.word	0x00203a44
 8000858:	200001a0 	.word	0x200001a0
 800085c:	20000060 	.word	0x20000060
 8000860:	20000018 	.word	0x20000018

08000864 <go_back>:


void go_back() {
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  stack_pop();
 8000868:	f7ff fed0 	bl	800060c <stack_pop>
  current_state = stack_top();
 800086c:	f7ff fe98 	bl	80005a0 <stack_top>
 8000870:	4603      	mov	r3, r0
 8000872:	4a02      	ldr	r2, [pc, #8]	@ (800087c <go_back+0x18>)
 8000874:	6013      	str	r3, [r2, #0]
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000014 	.word	0x20000014

08000880 <scan_for_admin>:

char key_presses[1000];
int key_press_count = 0;


int scan_for_admin() {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  char pass[] = "699";
 8000886:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <scan_for_admin+0x60>)
 8000888:	607b      	str	r3, [r7, #4]
  if (key_press_count < strlen(pass)) {
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fc5d 	bl	800014c <strlen>
 8000892:	4603      	mov	r3, r0
 8000894:	4a13      	ldr	r2, [pc, #76]	@ (80008e4 <scan_for_admin+0x64>)
 8000896:	6812      	ldr	r2, [r2, #0]
 8000898:	4293      	cmp	r3, r2
 800089a:	d901      	bls.n	80008a0 <scan_for_admin+0x20>
    return 0;
 800089c:	2300      	movs	r3, #0
 800089e:	e01a      	b.n	80008d6 <scan_for_admin+0x56>
  }
  if (key_presses[key_press_count - 1] == pass[2] && key_presses[key_press_count - 2] == pass[1] && key_presses[key_press_count - 3] == pass[0]) {
 80008a0:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <scan_for_admin+0x64>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	4a10      	ldr	r2, [pc, #64]	@ (80008e8 <scan_for_admin+0x68>)
 80008a8:	5cd2      	ldrb	r2, [r2, r3]
 80008aa:	79bb      	ldrb	r3, [r7, #6]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d111      	bne.n	80008d4 <scan_for_admin+0x54>
 80008b0:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <scan_for_admin+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	3b02      	subs	r3, #2
 80008b6:	4a0c      	ldr	r2, [pc, #48]	@ (80008e8 <scan_for_admin+0x68>)
 80008b8:	5cd2      	ldrb	r2, [r2, r3]
 80008ba:	797b      	ldrb	r3, [r7, #5]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d109      	bne.n	80008d4 <scan_for_admin+0x54>
 80008c0:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <scan_for_admin+0x64>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3b03      	subs	r3, #3
 80008c6:	4a08      	ldr	r2, [pc, #32]	@ (80008e8 <scan_for_admin+0x68>)
 80008c8:	5cd2      	ldrb	r2, [r2, r3]
 80008ca:	793b      	ldrb	r3, [r7, #4]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d101      	bne.n	80008d4 <scan_for_admin+0x54>
    return 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e000      	b.n	80008d6 <scan_for_admin+0x56>
  }
  return 0;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	00393936 	.word	0x00393936
 80008e4:	2000072c 	.word	0x2000072c
 80008e8:	20000344 	.word	0x20000344

080008ec <transition>:

void transition(char key_pressed) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
  char pressed[2] = {key_pressed};
 80008f6:	2300      	movs	r3, #0
 80008f8:	81bb      	strh	r3, [r7, #12]
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	733b      	strb	r3, [r7, #12]
  show_text(15, 0, pressed, 0);
 80008fe:	f107 020c 	add.w	r2, r7, #12
 8000902:	2300      	movs	r3, #0
 8000904:	2100      	movs	r1, #0
 8000906:	200f      	movs	r0, #15
 8000908:	f7ff fe24 	bl	8000554 <show_text>
  HAL_Delay(100);
 800090c:	2064      	movs	r0, #100	@ 0x64
 800090e:	f000 fd7d 	bl	800140c <HAL_Delay>

  char old_state = current_state;
 8000912:	4b53      	ldr	r3, [pc, #332]	@ (8000a60 <transition+0x174>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	73fb      	strb	r3, [r7, #15]

  if (scan_for_admin()) {
 8000918:	f7ff ffb2 	bl	8000880 <scan_for_admin>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d00a      	beq.n	8000938 <transition+0x4c>
    current_state = HOME_STATE;
 8000922:	4b4f      	ldr	r3, [pc, #316]	@ (8000a60 <transition+0x174>)
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
    admin_authorized = 1;
 8000928:	4b4e      	ldr	r3, [pc, #312]	@ (8000a64 <transition+0x178>)
 800092a:	2201      	movs	r2, #1
 800092c:	601a      	str	r2, [r3, #0]
    clear_console();
 800092e:	f7ff fe0b 	bl	8000548 <clear_console>
    stack_reset();
 8000932:	f7ff fe7d 	bl	8000630 <stack_reset>
    return;
 8000936:	e090      	b.n	8000a5a <transition+0x16e>
  }

  if (key_pressed == '?') {
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b3f      	cmp	r3, #63	@ 0x3f
 800093c:	d102      	bne.n	8000944 <transition+0x58>
    exit(0);
 800093e:	2000      	movs	r0, #0
 8000940:	f002 f918 	bl	8002b74 <exit>
    return;
  }
  if (key_pressed == '*') {
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	2b2a      	cmp	r3, #42	@ 0x2a
 8000948:	d10d      	bne.n	8000966 <transition+0x7a>
    if (current_state == SUCCESS_STATE || current_state == PROLOGUE_STATE) return;
 800094a:	4b45      	ldr	r3, [pc, #276]	@ (8000a60 <transition+0x174>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b05      	cmp	r3, #5
 8000950:	f000 8082 	beq.w	8000a58 <transition+0x16c>
 8000954:	4b42      	ldr	r3, [pc, #264]	@ (8000a60 <transition+0x174>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b08      	cmp	r3, #8
 800095a:	d07d      	beq.n	8000a58 <transition+0x16c>
    go_back();
 800095c:	f7ff ff82 	bl	8000864 <go_back>
    clear_console();
 8000960:	f7ff fdf2 	bl	8000548 <clear_console>
    return;
 8000964:	e079      	b.n	8000a5a <transition+0x16e>
  }

  if (key_pressed == '#') {
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b23      	cmp	r3, #35	@ 0x23
 800096a:	d10f      	bne.n	800098c <transition+0xa0>
    if (current_state != PROLOGUE_STATE && current_state != SUCCESS_STATE) {
 800096c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a60 <transition+0x174>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b08      	cmp	r3, #8
 8000972:	d006      	beq.n	8000982 <transition+0x96>
 8000974:	4b3a      	ldr	r3, [pc, #232]	@ (8000a60 <transition+0x174>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b05      	cmp	r3, #5
 800097a:	d002      	beq.n	8000982 <transition+0x96>
      current_state = HOME_STATE;
 800097c:	4b38      	ldr	r3, [pc, #224]	@ (8000a60 <transition+0x174>)
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
    }
    clear_console();
 8000982:	f7ff fde1 	bl	8000548 <clear_console>
    stack_reset();
 8000986:	f7ff fe53 	bl	8000630 <stack_reset>
    return;
 800098a:	e066      	b.n	8000a5a <transition+0x16e>
  }
  if (current_state == HOME_STATE) {
 800098c:	4b34      	ldr	r3, [pc, #208]	@ (8000a60 <transition+0x174>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d113      	bne.n	80009bc <transition+0xd0>
    if (key_pressed == '1') {
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	2b31      	cmp	r3, #49	@ 0x31
 8000998:	d109      	bne.n	80009ae <transition+0xc2>
      current_state = admin_authorized ? MENU_STATE : VOTE_STATE;
 800099a:	4b32      	ldr	r3, [pc, #200]	@ (8000a64 <transition+0x178>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <transition+0xba>
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <transition+0xbc>
 80009a6:	2302      	movs	r3, #2
 80009a8:	4a2d      	ldr	r2, [pc, #180]	@ (8000a60 <transition+0x174>)
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	e047      	b.n	8000a3e <transition+0x152>
    } else if (key_pressed == '#') {
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b23      	cmp	r3, #35	@ 0x23
 80009b2:	d144      	bne.n	8000a3e <transition+0x152>
      current_state = HOME_STATE;
 80009b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a60 <transition+0x174>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	e040      	b.n	8000a3e <transition+0x152>
    }
  } else if (current_state == MENU_STATE) {
 80009bc:	4b28      	ldr	r3, [pc, #160]	@ (8000a60 <transition+0x174>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d11e      	bne.n	8000a02 <transition+0x116>
    if (key_pressed == '1') {
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b31      	cmp	r3, #49	@ 0x31
 80009c8:	d103      	bne.n	80009d2 <transition+0xe6>
      current_state = STAT_STATE;
 80009ca:	4b25      	ldr	r3, [pc, #148]	@ (8000a60 <transition+0x174>)
 80009cc:	2203      	movs	r2, #3
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	e035      	b.n	8000a3e <transition+0x152>
    } else if (key_pressed == '#') {
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b23      	cmp	r3, #35	@ 0x23
 80009d6:	d103      	bne.n	80009e0 <transition+0xf4>
      current_state = HOME_STATE;
 80009d8:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <transition+0x174>)
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	e02e      	b.n	8000a3e <transition+0x152>
    } else if (key_pressed == '2') {
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b32      	cmp	r3, #50	@ 0x32
 80009e4:	d106      	bne.n	80009f4 <transition+0x108>
      current_state = HOME_STATE;
 80009e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <transition+0x174>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
      admin_authorized = 0;
 80009ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000a64 <transition+0x178>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	e024      	b.n	8000a3e <transition+0x152>
    } else if (key_pressed == '3') {
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b33      	cmp	r3, #51	@ 0x33
 80009f8:	d121      	bne.n	8000a3e <transition+0x152>
      current_state = PUBLISH_STATE;
 80009fa:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <transition+0x174>)
 80009fc:	2207      	movs	r2, #7
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	e01d      	b.n	8000a3e <transition+0x152>
    }
  } else if (current_state == VOTE_STATE) {
 8000a02:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <transition+0x174>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d108      	bne.n	8000a1c <transition+0x130>
    cast_vote(key_pressed - '0');
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	3b30      	subs	r3, #48	@ 0x30
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fe1a 	bl	8000648 <cast_vote>
    current_state = SUCCESS_STATE;
 8000a14:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <transition+0x174>)
 8000a16:	2205      	movs	r2, #5
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	e010      	b.n	8000a3e <transition+0x152>

  } else if (current_state == STAT_STATE) {
 8000a1c:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <transition+0x174>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b03      	cmp	r3, #3
 8000a22:	d10c      	bne.n	8000a3e <transition+0x152>
    if (key_pressed == '1') {
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	2b31      	cmp	r3, #49	@ 0x31
 8000a28:	d103      	bne.n	8000a32 <transition+0x146>
      current_state = COUNT_STATE;
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <transition+0x174>)
 8000a2c:	2204      	movs	r2, #4
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	e005      	b.n	8000a3e <transition+0x152>
    } else if (key_pressed == '#') {
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b23      	cmp	r3, #35	@ 0x23
 8000a36:	d102      	bne.n	8000a3e <transition+0x152>
      current_state = HOME_STATE;
 8000a38:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <transition+0x174>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
    }
  }
  stack_push(current_state);
 8000a3e:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <transition+0x174>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fdcc 	bl	80005e0 <stack_push>
  if (current_state != old_state) {
 8000a48:	7bfa      	ldrb	r2, [r7, #15]
 8000a4a:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <transition+0x174>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d003      	beq.n	8000a5a <transition+0x16e>
    clear_console();
 8000a52:	f7ff fd79 	bl	8000548 <clear_console>
 8000a56:	e000      	b.n	8000a5a <transition+0x16e>
    if (current_state == SUCCESS_STATE || current_state == PROLOGUE_STATE) return;
 8000a58:	bf00      	nop
  }
}
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000014 	.word	0x20000014
 8000a64:	200001a0 	.word	0x200001a0

08000a68 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a6e:	f000 fc6b 	bl	8001348 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a72:	f000 f84b 	bl	8000b0c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a76:	f000 f8b3 	bl	8000be0 <MX_GPIO_Init>
	MX_I2C2_Init();
 8000a7a:	f000 f883 	bl	8000b84 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	HD44780_Init(2);
 8000a7e:	2002      	movs	r0, #2
 8000a80:	f7ff fb6c 	bl	800015c <HD44780_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a8a:	4819      	ldr	r0, [pc, #100]	@ (8000af0 <main+0x88>)
 8000a8c:	f000 ff8b 	bl	80019a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2108      	movs	r1, #8
 8000a94:	4817      	ldr	r0, [pc, #92]	@ (8000af4 <main+0x8c>)
 8000a96:	f000 ff86 	bl	80019a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2110      	movs	r1, #16
 8000a9e:	4815      	ldr	r0, [pc, #84]	@ (8000af4 <main+0x8c>)
 8000aa0:	f000 ff81 	bl	80019a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2120      	movs	r1, #32
 8000aa8:	4812      	ldr	r0, [pc, #72]	@ (8000af4 <main+0x8c>)
 8000aaa:	f000 ff7c 	bl	80019a6 <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		show_heading();
 8000aae:	f7ff fe07 	bl	80006c0 <show_heading>
		char c = keyPressed;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <main+0x90>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
		if (currentMillis > last_when_pressed + 500) {
 8000ab8:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <main+0x94>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <main+0x98>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d2f1      	bcs.n	8000aae <main+0x46>
			key_presses[key_press_count++] = c;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <main+0x9c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	490c      	ldr	r1, [pc, #48]	@ (8000b04 <main+0x9c>)
 8000ad2:	600a      	str	r2, [r1, #0]
 8000ad4:	490c      	ldr	r1, [pc, #48]	@ (8000b08 <main+0xa0>)
 8000ad6:	79fa      	ldrb	r2, [r7, #7]
 8000ad8:	54ca      	strb	r2, [r1, r3]
			transition(c);
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff05 	bl	80008ec <transition>
			last_when_pressed = currentMillis;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <main+0x98>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4b04      	ldr	r3, [pc, #16]	@ (8000afc <main+0x94>)
 8000aea:	601a      	str	r2, [r3, #0]
	while (1) {
 8000aec:	e7df      	b.n	8000aae <main+0x46>
 8000aee:	bf00      	nop
 8000af0:	40010800 	.word	0x40010800
 8000af4:	40010c00 	.word	0x40010c00
 8000af8:	20000198 	.word	0x20000198
 8000afc:	2000019c 	.word	0x2000019c
 8000b00:	20000194 	.word	0x20000194
 8000b04:	2000072c 	.word	0x2000072c
 8000b08:	20000344 	.word	0x20000344

08000b0c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b090      	sub	sp, #64	@ 0x40
 8000b10:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b12:	f107 0318 	add.w	r3, r7, #24
 8000b16:	2228      	movs	r2, #40	@ 0x28
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 f9af 	bl	8002e7e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b32:	2301      	movs	r3, #1
 8000b34:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b36:	2310      	movs	r3, #16
 8000b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 fbfc 	bl	8002340 <HAL_RCC_OscConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x46>
		Error_Handler();
 8000b4e:	f000 fa57 	bl	8001000 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b52:	230f      	movs	r3, #15
 8000b54:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 fe6a 	bl	8002844 <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x6e>
		Error_Handler();
 8000b76:	f000 fa43 	bl	8001000 <Error_Handler>
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	3740      	adds	r7, #64	@ 0x40
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <MX_I2C2_Init+0x50>)
 8000b8a:	4a13      	ldr	r2, [pc, #76]	@ (8000bd8 <MX_I2C2_Init+0x54>)
 8000b8c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_I2C2_Init+0x50>)
 8000b90:	4a12      	ldr	r2, [pc, #72]	@ (8000bdc <MX_I2C2_Init+0x58>)
 8000b92:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <MX_I2C2_Init+0x50>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <MX_I2C2_Init+0x50>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <MX_I2C2_Init+0x50>)
 8000ba2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ba6:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <MX_I2C2_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <MX_I2C2_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <MX_I2C2_Init+0x50>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <MX_I2C2_Init+0x50>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000bc0:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <MX_I2C2_Init+0x50>)
 8000bc2:	f000 ff21 	bl	8001a08 <HAL_I2C_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8000bcc:	f000 fa18 	bl	8001000 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000012c 	.word	0x2000012c
 8000bd8:	40005800 	.word	0x40005800
 8000bdc:	000186a0 	.word	0x000186a0

08000be0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca8 <MX_GPIO_Init+0xc8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8000ca8 <MX_GPIO_Init+0xc8>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b29      	ldr	r3, [pc, #164]	@ (8000ca8 <MX_GPIO_Init+0xc8>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b26      	ldr	r3, [pc, #152]	@ (8000ca8 <MX_GPIO_Init+0xc8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a25      	ldr	r2, [pc, #148]	@ (8000ca8 <MX_GPIO_Init+0xc8>)
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b23      	ldr	r3, [pc, #140]	@ (8000ca8 <MX_GPIO_Init+0xc8>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c2a:	4820      	ldr	r0, [pc, #128]	@ (8000cac <MX_GPIO_Init+0xcc>)
 8000c2c:	f000 febb 	bl	80019a6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5,
 8000c30:	2200      	movs	r2, #0
 8000c32:	2138      	movs	r1, #56	@ 0x38
 8000c34:	481e      	ldr	r0, [pc, #120]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c36:	f000 feb6 	bl	80019a6 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c3e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	4619      	mov	r1, r3
 8000c52:	4816      	ldr	r0, [pc, #88]	@ (8000cac <MX_GPIO_Init+0xcc>)
 8000c54:	f000 fd0c 	bl	8001670 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB3 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8000c58:	2338      	movs	r3, #56	@ 0x38
 8000c5a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2302      	movs	r3, #2
 8000c66:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4810      	ldr	r0, [pc, #64]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c70:	f000 fcfe 	bl	8001670 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB6 PB7 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8000c74:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000c78:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <MX_GPIO_Init+0xd4>)
 8000c7c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	4619      	mov	r1, r3
 8000c88:	4809      	ldr	r0, [pc, #36]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c8a:	f000 fcf1 	bl	8001670 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2017      	movs	r0, #23
 8000c94:	f000 fcb5 	bl	8001602 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c98:	2017      	movs	r0, #23
 8000c9a:	f000 fcce 	bl	800163a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010800 	.word	0x40010800
 8000cb0:	40010c00 	.word	0x40010c00
 8000cb4:	10110000 	.word	0x10110000

08000cb8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8000cc2:	f000 fb99 	bl	80013f8 <HAL_GetTick>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4aa5      	ldr	r2, [pc, #660]	@ (8000f60 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000cca:	6013      	str	r3, [r2, #0]
	if (currentMillis - previousMillis > 10) {
 8000ccc:	4ba4      	ldr	r3, [pc, #656]	@ (8000f60 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4ba4      	ldr	r3, [pc, #656]	@ (8000f64 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b0a      	cmp	r3, #10
 8000cd8:	f240 8180 	bls.w	8000fdc <HAL_GPIO_EXTI_Callback+0x324>
		/*Configure GPIO pins : PB6 PB7 PB8 PB9 to GPIO_INPUT*/
		GPIO_InitStructPrivate.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
 8000cdc:	4ba2      	ldr	r3, [pc, #648]	@ (8000f68 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000cde:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000ce2:	601a      	str	r2, [r3, #0]
				| GPIO_PIN_9;
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000ce4:	4ba0      	ldr	r3, [pc, #640]	@ (8000f68 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000cea:	4b9f      	ldr	r3, [pc, #636]	@ (8000f68 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	4b9d      	ldr	r3, [pc, #628]	@ (8000f68 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8000cf6:	499c      	ldr	r1, [pc, #624]	@ (8000f68 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000cf8:	489c      	ldr	r0, [pc, #624]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000cfa:	f000 fcb9 	bl	8001670 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d04:	489a      	ldr	r0, [pc, #616]	@ (8000f70 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000d06:	f000 fe4e 	bl	80019a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	4897      	ldr	r0, [pc, #604]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000d10:	f000 fe49 	bl	80019a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2110      	movs	r1, #16
 8000d18:	4894      	ldr	r0, [pc, #592]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000d1a:	f000 fe44 	bl	80019a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2120      	movs	r1, #32
 8000d22:	4892      	ldr	r0, [pc, #584]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000d24:	f000 fe3f 	bl	80019a6 <HAL_GPIO_WritePin>
		if (GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	2b40      	cmp	r3, #64	@ 0x40
 8000d2c:	d10a      	bne.n	8000d44 <HAL_GPIO_EXTI_Callback+0x8c>
 8000d2e:	2140      	movs	r1, #64	@ 0x40
 8000d30:	488e      	ldr	r0, [pc, #568]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000d32:	f000 fe21 	bl	8001978 <HAL_GPIO_ReadPin>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d003      	beq.n	8000d44 <HAL_GPIO_EXTI_Callback+0x8c>
			keyPressed = 68; //ASCII value of D
 8000d3c:	4b8d      	ldr	r3, [pc, #564]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000d3e:	2244      	movs	r2, #68	@ 0x44
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	e02c      	b.n	8000d9e <HAL_GPIO_EXTI_Callback+0xe6>
		} else if (GPIO_Pin == GPIO_PIN_7
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	2b80      	cmp	r3, #128	@ 0x80
 8000d48:	d10a      	bne.n	8000d60 <HAL_GPIO_EXTI_Callback+0xa8>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)) {
 8000d4a:	2180      	movs	r1, #128	@ 0x80
 8000d4c:	4887      	ldr	r0, [pc, #540]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000d4e:	f000 fe13 	bl	8001978 <HAL_GPIO_ReadPin>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_EXTI_Callback+0xa8>
			keyPressed = 67; //ASCII value of C
 8000d58:	4b86      	ldr	r3, [pc, #536]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000d5a:	2243      	movs	r2, #67	@ 0x43
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	e01e      	b.n	8000d9e <HAL_GPIO_EXTI_Callback+0xe6>
		} else if (GPIO_Pin == GPIO_PIN_8
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d66:	d10b      	bne.n	8000d80 <HAL_GPIO_EXTI_Callback+0xc8>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 8000d68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d6c:	487f      	ldr	r0, [pc, #508]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000d6e:	f000 fe03 	bl	8001978 <HAL_GPIO_ReadPin>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <HAL_GPIO_EXTI_Callback+0xc8>
			keyPressed = 66; //ASCII value of B
 8000d78:	4b7e      	ldr	r3, [pc, #504]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000d7a:	2242      	movs	r2, #66	@ 0x42
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	e00e      	b.n	8000d9e <HAL_GPIO_EXTI_Callback+0xe6>
		} else if (GPIO_Pin == GPIO_PIN_9
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d86:	d10a      	bne.n	8000d9e <HAL_GPIO_EXTI_Callback+0xe6>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)) {
 8000d88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d8c:	4877      	ldr	r0, [pc, #476]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000d8e:	f000 fdf3 	bl	8001978 <HAL_GPIO_ReadPin>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d002      	beq.n	8000d9e <HAL_GPIO_EXTI_Callback+0xe6>
			keyPressed = 65; //ASCII value of A
 8000d98:	4b76      	ldr	r3, [pc, #472]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000d9a:	2241      	movs	r2, #65	@ 0x41
 8000d9c:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000da4:	4872      	ldr	r0, [pc, #456]	@ (8000f70 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000da6:	f000 fdfe 	bl	80019a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2108      	movs	r1, #8
 8000dae:	486f      	ldr	r0, [pc, #444]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000db0:	f000 fdf9 	bl	80019a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2110      	movs	r1, #16
 8000db8:	486c      	ldr	r0, [pc, #432]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000dba:	f000 fdf4 	bl	80019a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2120      	movs	r1, #32
 8000dc2:	486a      	ldr	r0, [pc, #424]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000dc4:	f000 fdef 	bl	80019a6 <HAL_GPIO_WritePin>
		if (GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	2b40      	cmp	r3, #64	@ 0x40
 8000dcc:	d10a      	bne.n	8000de4 <HAL_GPIO_EXTI_Callback+0x12c>
 8000dce:	2140      	movs	r1, #64	@ 0x40
 8000dd0:	4866      	ldr	r0, [pc, #408]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000dd2:	f000 fdd1 	bl	8001978 <HAL_GPIO_ReadPin>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_EXTI_Callback+0x12c>
			keyPressed = 35; //ASCII value of #
 8000ddc:	4b65      	ldr	r3, [pc, #404]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000dde:	2223      	movs	r2, #35	@ 0x23
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e02c      	b.n	8000e3e <HAL_GPIO_EXTI_Callback+0x186>
		} else if (GPIO_Pin == GPIO_PIN_7
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	2b80      	cmp	r3, #128	@ 0x80
 8000de8:	d10a      	bne.n	8000e00 <HAL_GPIO_EXTI_Callback+0x148>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)) {
 8000dea:	2180      	movs	r1, #128	@ 0x80
 8000dec:	485f      	ldr	r0, [pc, #380]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000dee:	f000 fdc3 	bl	8001978 <HAL_GPIO_ReadPin>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_EXTI_Callback+0x148>
			keyPressed = 57; //ASCII value of 9
 8000df8:	4b5e      	ldr	r3, [pc, #376]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000dfa:	2239      	movs	r2, #57	@ 0x39
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	e01e      	b.n	8000e3e <HAL_GPIO_EXTI_Callback+0x186>
		} else if (GPIO_Pin == GPIO_PIN_8
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e06:	d10b      	bne.n	8000e20 <HAL_GPIO_EXTI_Callback+0x168>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 8000e08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e0c:	4857      	ldr	r0, [pc, #348]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000e0e:	f000 fdb3 	bl	8001978 <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_EXTI_Callback+0x168>
			keyPressed = 54; //ASCII value of 6
 8000e18:	4b56      	ldr	r3, [pc, #344]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000e1a:	2236      	movs	r2, #54	@ 0x36
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	e00e      	b.n	8000e3e <HAL_GPIO_EXTI_Callback+0x186>
		} else if (GPIO_Pin == GPIO_PIN_9
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e26:	d10a      	bne.n	8000e3e <HAL_GPIO_EXTI_Callback+0x186>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)) {
 8000e28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e2c:	484f      	ldr	r0, [pc, #316]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000e2e:	f000 fda3 	bl	8001978 <HAL_GPIO_ReadPin>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d002      	beq.n	8000e3e <HAL_GPIO_EXTI_Callback+0x186>
			keyPressed = 51; //ASCII value of 3
 8000e38:	4b4e      	ldr	r3, [pc, #312]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000e3a:	2233      	movs	r2, #51	@ 0x33
 8000e3c:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e44:	484a      	ldr	r0, [pc, #296]	@ (8000f70 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000e46:	f000 fdae 	bl	80019a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2108      	movs	r1, #8
 8000e4e:	4847      	ldr	r0, [pc, #284]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000e50:	f000 fda9 	bl	80019a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2110      	movs	r1, #16
 8000e58:	4844      	ldr	r0, [pc, #272]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000e5a:	f000 fda4 	bl	80019a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2120      	movs	r1, #32
 8000e62:	4842      	ldr	r0, [pc, #264]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000e64:	f000 fd9f 	bl	80019a6 <HAL_GPIO_WritePin>
		if (GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	2b40      	cmp	r3, #64	@ 0x40
 8000e6c:	d10a      	bne.n	8000e84 <HAL_GPIO_EXTI_Callback+0x1cc>
 8000e6e:	2140      	movs	r1, #64	@ 0x40
 8000e70:	483e      	ldr	r0, [pc, #248]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000e72:	f000 fd81 	bl	8001978 <HAL_GPIO_ReadPin>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_EXTI_Callback+0x1cc>
			keyPressed = 48; //ASCII value of 0
 8000e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000e7e:	2230      	movs	r2, #48	@ 0x30
 8000e80:	701a      	strb	r2, [r3, #0]
 8000e82:	e02c      	b.n	8000ede <HAL_GPIO_EXTI_Callback+0x226>
		} else if (GPIO_Pin == GPIO_PIN_7
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	2b80      	cmp	r3, #128	@ 0x80
 8000e88:	d10a      	bne.n	8000ea0 <HAL_GPIO_EXTI_Callback+0x1e8>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)) {
 8000e8a:	2180      	movs	r1, #128	@ 0x80
 8000e8c:	4837      	ldr	r0, [pc, #220]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000e8e:	f000 fd73 	bl	8001978 <HAL_GPIO_ReadPin>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_EXTI_Callback+0x1e8>
			keyPressed = 56; //ASCII value of 8
 8000e98:	4b36      	ldr	r3, [pc, #216]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000e9a:	2238      	movs	r2, #56	@ 0x38
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	e01e      	b.n	8000ede <HAL_GPIO_EXTI_Callback+0x226>
		} else if (GPIO_Pin == GPIO_PIN_8
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ea6:	d10b      	bne.n	8000ec0 <HAL_GPIO_EXTI_Callback+0x208>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 8000ea8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eac:	482f      	ldr	r0, [pc, #188]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000eae:	f000 fd63 	bl	8001978 <HAL_GPIO_ReadPin>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_EXTI_Callback+0x208>
			keyPressed = 53; //ASCII value of 5
 8000eb8:	4b2e      	ldr	r3, [pc, #184]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000eba:	2235      	movs	r2, #53	@ 0x35
 8000ebc:	701a      	strb	r2, [r3, #0]
 8000ebe:	e00e      	b.n	8000ede <HAL_GPIO_EXTI_Callback+0x226>
		} else if (GPIO_Pin == GPIO_PIN_9
 8000ec0:	88fb      	ldrh	r3, [r7, #6]
 8000ec2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ec6:	d10a      	bne.n	8000ede <HAL_GPIO_EXTI_Callback+0x226>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)) {
 8000ec8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ecc:	4827      	ldr	r0, [pc, #156]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000ece:	f000 fd53 	bl	8001978 <HAL_GPIO_ReadPin>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d002      	beq.n	8000ede <HAL_GPIO_EXTI_Callback+0x226>
			keyPressed = 50; //ASCII value of 2
 8000ed8:	4b26      	ldr	r3, [pc, #152]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000eda:	2232      	movs	r2, #50	@ 0x32
 8000edc:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ee4:	4822      	ldr	r0, [pc, #136]	@ (8000f70 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000ee6:	f000 fd5e 	bl	80019a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2108      	movs	r1, #8
 8000eee:	481f      	ldr	r0, [pc, #124]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000ef0:	f000 fd59 	bl	80019a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	481c      	ldr	r0, [pc, #112]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000efa:	f000 fd54 	bl	80019a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2120      	movs	r1, #32
 8000f02:	481a      	ldr	r0, [pc, #104]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000f04:	f000 fd4f 	bl	80019a6 <HAL_GPIO_WritePin>
		if (GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	2b40      	cmp	r3, #64	@ 0x40
 8000f0c:	d10a      	bne.n	8000f24 <HAL_GPIO_EXTI_Callback+0x26c>
 8000f0e:	2140      	movs	r1, #64	@ 0x40
 8000f10:	4816      	ldr	r0, [pc, #88]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000f12:	f000 fd31 	bl	8001978 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_EXTI_Callback+0x26c>
			keyPressed = 42; //ASCII value of *
 8000f1c:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000f1e:	222a      	movs	r2, #42	@ 0x2a
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	e038      	b.n	8000f96 <HAL_GPIO_EXTI_Callback+0x2de>
		} else if (GPIO_Pin == GPIO_PIN_7
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	2b80      	cmp	r3, #128	@ 0x80
 8000f28:	d10a      	bne.n	8000f40 <HAL_GPIO_EXTI_Callback+0x288>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)) {
 8000f2a:	2180      	movs	r1, #128	@ 0x80
 8000f2c:	480f      	ldr	r0, [pc, #60]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000f2e:	f000 fd23 	bl	8001978 <HAL_GPIO_ReadPin>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_EXTI_Callback+0x288>
			keyPressed = 55; //ASCII value of 7
 8000f38:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000f3a:	2237      	movs	r2, #55	@ 0x37
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	e02a      	b.n	8000f96 <HAL_GPIO_EXTI_Callback+0x2de>
		} else if (GPIO_Pin == GPIO_PIN_8
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f46:	d117      	bne.n	8000f78 <HAL_GPIO_EXTI_Callback+0x2c0>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 8000f48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f4c:	4807      	ldr	r0, [pc, #28]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000f4e:	f000 fd13 	bl	8001978 <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00f      	beq.n	8000f78 <HAL_GPIO_EXTI_Callback+0x2c0>
			keyPressed = 52; //ASCII value of 4
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000f5a:	2234      	movs	r2, #52	@ 0x34
 8000f5c:	701a      	strb	r2, [r3, #0]
 8000f5e:	e01a      	b.n	8000f96 <HAL_GPIO_EXTI_Callback+0x2de>
 8000f60:	20000194 	.word	0x20000194
 8000f64:	20000190 	.word	0x20000190
 8000f68:	20000180 	.word	0x20000180
 8000f6c:	40010c00 	.word	0x40010c00
 8000f70:	40010800 	.word	0x40010800
 8000f74:	20000198 	.word	0x20000198
		} else if (GPIO_Pin == GPIO_PIN_9
 8000f78:	88fb      	ldrh	r3, [r7, #6]
 8000f7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f7e:	d10a      	bne.n	8000f96 <HAL_GPIO_EXTI_Callback+0x2de>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)) {
 8000f80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f84:	4817      	ldr	r0, [pc, #92]	@ (8000fe4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000f86:	f000 fcf7 	bl	8001978 <HAL_GPIO_ReadPin>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <HAL_GPIO_EXTI_Callback+0x2de>
			keyPressed = 49; //ASCII value of 1
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <HAL_GPIO_EXTI_Callback+0x330>)
 8000f92:	2231      	movs	r2, #49	@ 0x31
 8000f94:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f96:	2201      	movs	r2, #1
 8000f98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f9c:	4813      	ldr	r0, [pc, #76]	@ (8000fec <HAL_GPIO_EXTI_Callback+0x334>)
 8000f9e:	f000 fd02 	bl	80019a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2108      	movs	r1, #8
 8000fa6:	480f      	ldr	r0, [pc, #60]	@ (8000fe4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000fa8:	f000 fcfd 	bl	80019a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2110      	movs	r1, #16
 8000fb0:	480c      	ldr	r0, [pc, #48]	@ (8000fe4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000fb2:	f000 fcf8 	bl	80019a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2120      	movs	r1, #32
 8000fba:	480a      	ldr	r0, [pc, #40]	@ (8000fe4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000fbc:	f000 fcf3 	bl	80019a6 <HAL_GPIO_WritePin>
		/*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <HAL_GPIO_EXTI_Callback+0x338>)
 8000fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff4 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000fc4:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <HAL_GPIO_EXTI_Callback+0x338>)
 8000fc8:	2202      	movs	r2, #2
 8000fca:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8000fcc:	4908      	ldr	r1, [pc, #32]	@ (8000ff0 <HAL_GPIO_EXTI_Callback+0x338>)
 8000fce:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000fd0:	f000 fb4e 	bl	8001670 <HAL_GPIO_Init>
		previousMillis = currentMillis;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <HAL_GPIO_EXTI_Callback+0x340>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a08      	ldr	r2, [pc, #32]	@ (8000ffc <HAL_GPIO_EXTI_Callback+0x344>)
 8000fda:	6013      	str	r3, [r2, #0]
	}
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40010c00 	.word	0x40010c00
 8000fe8:	20000198 	.word	0x20000198
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	20000180 	.word	0x20000180
 8000ff4:	10110000 	.word	0x10110000
 8000ff8:	20000194 	.word	0x20000194
 8000ffc:	20000190 	.word	0x20000190

08001000 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <Error_Handler+0x8>

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <HAL_MspInit+0x5c>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	4a14      	ldr	r2, [pc, #80]	@ (8001068 <HAL_MspInit+0x5c>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6193      	str	r3, [r2, #24]
 800101e:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <HAL_MspInit+0x5c>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <HAL_MspInit+0x5c>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	4a0e      	ldr	r2, [pc, #56]	@ (8001068 <HAL_MspInit+0x5c>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001034:	61d3      	str	r3, [r2, #28]
 8001036:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <HAL_MspInit+0x5c>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001042:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <HAL_MspInit+0x60>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	4a04      	ldr	r2, [pc, #16]	@ (800106c <HAL_MspInit+0x60>)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	40021000 	.word	0x40021000
 800106c:	40010000 	.word	0x40010000

08001070 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a16      	ldr	r2, [pc, #88]	@ (80010e4 <HAL_I2C_MspInit+0x74>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d124      	bne.n	80010da <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_I2C_MspInit+0x78>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a14      	ldr	r2, [pc, #80]	@ (80010e8 <HAL_I2C_MspInit+0x78>)
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <HAL_I2C_MspInit+0x78>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010a8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ae:	2312      	movs	r3, #18
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4619      	mov	r1, r3
 80010bc:	480b      	ldr	r0, [pc, #44]	@ (80010ec <HAL_I2C_MspInit+0x7c>)
 80010be:	f000 fad7 	bl	8001670 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <HAL_I2C_MspInit+0x78>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	4a08      	ldr	r2, [pc, #32]	@ (80010e8 <HAL_I2C_MspInit+0x78>)
 80010c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010cc:	61d3      	str	r3, [r2, #28]
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_I2C_MspInit+0x78>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80010da:	bf00      	nop
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40005800 	.word	0x40005800
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010c00 	.word	0x40010c00

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <NMI_Handler+0x4>

080010f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <MemManage_Handler+0x4>

08001108 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <UsageFault_Handler+0x4>

08001118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001140:	f000 f948 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800114c:	2040      	movs	r0, #64	@ 0x40
 800114e:	f000 fc43 	bl	80019d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001152:	2080      	movs	r0, #128	@ 0x80
 8001154:	f000 fc40 	bl	80019d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001158:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800115c:	f000 fc3c 	bl	80019d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001160:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001164:	f000 fc38 	bl	80019d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr

0800117a <_kill>:

int _kill(int pid, int sig)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001184:	f001 fed8 	bl	8002f38 <__errno>
 8001188:	4603      	mov	r3, r0
 800118a:	2216      	movs	r2, #22
 800118c:	601a      	str	r2, [r3, #0]
  return -1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <_exit>:

void _exit (int status)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011a2:	f04f 31ff 	mov.w	r1, #4294967295
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ffe7 	bl	800117a <_kill>
  while (1) {}    /* Make sure we hang here */
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <_exit+0x12>

080011b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	e00a      	b.n	80011d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011c2:	f3af 8000 	nop.w
 80011c6:	4601      	mov	r1, r0
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	60ba      	str	r2, [r7, #8]
 80011ce:	b2ca      	uxtb	r2, r1
 80011d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3301      	adds	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	dbf0      	blt.n	80011c2 <_read+0x12>
  }

  return len;
 80011e0:	687b      	ldr	r3, [r7, #4]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	e009      	b.n	8001210 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	60ba      	str	r2, [r7, #8]
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	429a      	cmp	r2, r3
 8001216:	dbf1      	blt.n	80011fc <_write+0x12>
  }
  return len;
 8001218:	687b      	ldr	r3, [r7, #4]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <_close>:

int _close(int file)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001248:	605a      	str	r2, [r3, #4]
  return 0;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr

08001256 <_isatty>:

int _isatty(int file)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800126a:	b480      	push	{r7}
 800126c:	b085      	sub	sp, #20
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
	...

08001284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800128c:	4a14      	ldr	r2, [pc, #80]	@ (80012e0 <_sbrk+0x5c>)
 800128e:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <_sbrk+0x60>)
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001298:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <_sbrk+0x64>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	@ (80012ec <_sbrk+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d207      	bcs.n	80012c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b4:	f001 fe40 	bl	8002f38 <__errno>
 80012b8:	4603      	mov	r3, r0
 80012ba:	220c      	movs	r2, #12
 80012bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e009      	b.n	80012d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c4:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ca:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <_sbrk+0x64>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a05      	ldr	r2, [pc, #20]	@ (80012e8 <_sbrk+0x64>)
 80012d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012d6:	68fb      	ldr	r3, [r7, #12]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20005000 	.word	0x20005000
 80012e4:	00000400 	.word	0x00000400
 80012e8:	20000730 	.word	0x20000730
 80012ec:	20000888 	.word	0x20000888

080012f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012fc:	f7ff fff8 	bl	80012f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001300:	480b      	ldr	r0, [pc, #44]	@ (8001330 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001302:	490c      	ldr	r1, [pc, #48]	@ (8001334 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001304:	4a0c      	ldr	r2, [pc, #48]	@ (8001338 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a09      	ldr	r2, [pc, #36]	@ (800133c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001318:	4c09      	ldr	r4, [pc, #36]	@ (8001340 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001326:	f001 fe0d 	bl	8002f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800132a:	f7ff fb9d 	bl	8000a68 <main>
  bx lr
 800132e:	4770      	bx	lr
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8001338:	08003dc4 	.word	0x08003dc4
  ldr r2, =_sbss
 800133c:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8001340:	20000884 	.word	0x20000884

08001344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC1_2_IRQHandler>
	...

08001348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <HAL_Init+0x28>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a07      	ldr	r2, [pc, #28]	@ (8001370 <HAL_Init+0x28>)
 8001352:	f043 0310 	orr.w	r3, r3, #16
 8001356:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001358:	2003      	movs	r0, #3
 800135a:	f000 f947 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135e:	200f      	movs	r0, #15
 8001360:	f000 f808 	bl	8001374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001364:	f7ff fe52 	bl	800100c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40022000 	.word	0x40022000

08001374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_InitTick+0x54>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <HAL_InitTick+0x58>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f95f 	bl	8001656 <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e00e      	b.n	80013c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d80a      	bhi.n	80013be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f000 f927 	bl	8001602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b4:	4a06      	ldr	r2, [pc, #24]	@ (80013d0 <HAL_InitTick+0x5c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200000a0 	.word	0x200000a0
 80013cc:	200000a8 	.word	0x200000a8
 80013d0:	200000a4 	.word	0x200000a4

080013d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d8:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <HAL_IncTick+0x1c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <HAL_IncTick+0x20>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a03      	ldr	r2, [pc, #12]	@ (80013f4 <HAL_IncTick+0x20>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	200000a8 	.word	0x200000a8
 80013f4:	20000734 	.word	0x20000734

080013f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b02      	ldr	r3, [pc, #8]	@ (8001408 <HAL_GetTick+0x10>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	20000734 	.word	0x20000734

0800140c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001414:	f7ff fff0 	bl	80013f8 <HAL_GetTick>
 8001418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001424:	d005      	beq.n	8001432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001426:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <HAL_Delay+0x44>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4413      	add	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001432:	bf00      	nop
 8001434:	f7ff ffe0 	bl	80013f8 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	429a      	cmp	r2, r3
 8001442:	d8f7      	bhi.n	8001434 <HAL_Delay+0x28>
  {
  }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200000a8 	.word	0x200000a8

08001454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001470:	4013      	ands	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800147c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001486:	4a04      	ldr	r2, [pc, #16]	@ (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	60d3      	str	r3, [r2, #12]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a0:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <__NVIC_GetPriorityGrouping+0x18>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	f003 0307 	and.w	r3, r3, #7
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db0b      	blt.n	80014e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f003 021f 	and.w	r2, r3, #31
 80014d0:	4906      	ldr	r1, [pc, #24]	@ (80014ec <__NVIC_EnableIRQ+0x34>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	2001      	movs	r0, #1
 80014da:	fa00 f202 	lsl.w	r2, r0, r2
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	e000e100 	.word	0xe000e100

080014f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	db0a      	blt.n	800151a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	490c      	ldr	r1, [pc, #48]	@ (800153c <__NVIC_SetPriority+0x4c>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	440b      	add	r3, r1
 8001514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001518:	e00a      	b.n	8001530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4908      	ldr	r1, [pc, #32]	@ (8001540 <__NVIC_SetPriority+0x50>)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	3b04      	subs	r3, #4
 8001528:	0112      	lsls	r2, r2, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	440b      	add	r3, r1
 800152e:	761a      	strb	r2, [r3, #24]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e100 	.word	0xe000e100
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	@ 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f1c3 0307 	rsb	r3, r3, #7
 800155e:	2b04      	cmp	r3, #4
 8001560:	bf28      	it	cs
 8001562:	2304      	movcs	r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3304      	adds	r3, #4
 800156a:	2b06      	cmp	r3, #6
 800156c:	d902      	bls.n	8001574 <NVIC_EncodePriority+0x30>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3b03      	subs	r3, #3
 8001572:	e000      	b.n	8001576 <NVIC_EncodePriority+0x32>
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	f04f 32ff 	mov.w	r2, #4294967295
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	401a      	ands	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43d9      	mvns	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	4313      	orrs	r3, r2
         );
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3724      	adds	r7, #36	@ 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015b8:	d301      	bcc.n	80015be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015be:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <SysTick_Config+0x40>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c6:	210f      	movs	r1, #15
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f7ff ff90 	bl	80014f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <SysTick_Config+0x40>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <SysTick_Config+0x40>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff2d 	bl	8001454 <__NVIC_SetPriorityGrouping>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001614:	f7ff ff42 	bl	800149c <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff90 	bl	8001544 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff5f 	bl	80014f0 <__NVIC_SetPriority>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff35 	bl	80014b8 <__NVIC_EnableIRQ>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffa2 	bl	80015a8 <SysTick_Config>
 8001664:	4603      	mov	r3, r0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001670:	b480      	push	{r7}
 8001672:	b08b      	sub	sp, #44	@ 0x2c
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001682:	e169      	b.n	8001958 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001684:	2201      	movs	r2, #1
 8001686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	429a      	cmp	r2, r3
 800169e:	f040 8158 	bne.w	8001952 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4a9a      	ldr	r2, [pc, #616]	@ (8001910 <HAL_GPIO_Init+0x2a0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d05e      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016ac:	4a98      	ldr	r2, [pc, #608]	@ (8001910 <HAL_GPIO_Init+0x2a0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d875      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016b2:	4a98      	ldr	r2, [pc, #608]	@ (8001914 <HAL_GPIO_Init+0x2a4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d058      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016b8:	4a96      	ldr	r2, [pc, #600]	@ (8001914 <HAL_GPIO_Init+0x2a4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d86f      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016be:	4a96      	ldr	r2, [pc, #600]	@ (8001918 <HAL_GPIO_Init+0x2a8>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d052      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016c4:	4a94      	ldr	r2, [pc, #592]	@ (8001918 <HAL_GPIO_Init+0x2a8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d869      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016ca:	4a94      	ldr	r2, [pc, #592]	@ (800191c <HAL_GPIO_Init+0x2ac>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d04c      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016d0:	4a92      	ldr	r2, [pc, #584]	@ (800191c <HAL_GPIO_Init+0x2ac>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d863      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016d6:	4a92      	ldr	r2, [pc, #584]	@ (8001920 <HAL_GPIO_Init+0x2b0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d046      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016dc:	4a90      	ldr	r2, [pc, #576]	@ (8001920 <HAL_GPIO_Init+0x2b0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d85d      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016e2:	2b12      	cmp	r3, #18
 80016e4:	d82a      	bhi.n	800173c <HAL_GPIO_Init+0xcc>
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d859      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016ea:	a201      	add	r2, pc, #4	@ (adr r2, 80016f0 <HAL_GPIO_Init+0x80>)
 80016ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f0:	0800176b 	.word	0x0800176b
 80016f4:	08001745 	.word	0x08001745
 80016f8:	08001757 	.word	0x08001757
 80016fc:	08001799 	.word	0x08001799
 8001700:	0800179f 	.word	0x0800179f
 8001704:	0800179f 	.word	0x0800179f
 8001708:	0800179f 	.word	0x0800179f
 800170c:	0800179f 	.word	0x0800179f
 8001710:	0800179f 	.word	0x0800179f
 8001714:	0800179f 	.word	0x0800179f
 8001718:	0800179f 	.word	0x0800179f
 800171c:	0800179f 	.word	0x0800179f
 8001720:	0800179f 	.word	0x0800179f
 8001724:	0800179f 	.word	0x0800179f
 8001728:	0800179f 	.word	0x0800179f
 800172c:	0800179f 	.word	0x0800179f
 8001730:	0800179f 	.word	0x0800179f
 8001734:	0800174d 	.word	0x0800174d
 8001738:	08001761 	.word	0x08001761
 800173c:	4a79      	ldr	r2, [pc, #484]	@ (8001924 <HAL_GPIO_Init+0x2b4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d013      	beq.n	800176a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001742:	e02c      	b.n	800179e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	623b      	str	r3, [r7, #32]
          break;
 800174a:	e029      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	3304      	adds	r3, #4
 8001752:	623b      	str	r3, [r7, #32]
          break;
 8001754:	e024      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	3308      	adds	r3, #8
 800175c:	623b      	str	r3, [r7, #32]
          break;
 800175e:	e01f      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	330c      	adds	r3, #12
 8001766:	623b      	str	r3, [r7, #32]
          break;
 8001768:	e01a      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001772:	2304      	movs	r3, #4
 8001774:	623b      	str	r3, [r7, #32]
          break;
 8001776:	e013      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d105      	bne.n	800178c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001780:	2308      	movs	r3, #8
 8001782:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	611a      	str	r2, [r3, #16]
          break;
 800178a:	e009      	b.n	80017a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800178c:	2308      	movs	r3, #8
 800178e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	615a      	str	r2, [r3, #20]
          break;
 8001796:	e003      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
          break;
 800179c:	e000      	b.n	80017a0 <HAL_GPIO_Init+0x130>
          break;
 800179e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2bff      	cmp	r3, #255	@ 0xff
 80017a4:	d801      	bhi.n	80017aa <HAL_GPIO_Init+0x13a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	e001      	b.n	80017ae <HAL_GPIO_Init+0x13e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3304      	adds	r3, #4
 80017ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2bff      	cmp	r3, #255	@ 0xff
 80017b4:	d802      	bhi.n	80017bc <HAL_GPIO_Init+0x14c>
 80017b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	e002      	b.n	80017c2 <HAL_GPIO_Init+0x152>
 80017bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017be:	3b08      	subs	r3, #8
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	210f      	movs	r1, #15
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	401a      	ands	r2, r3
 80017d4:	6a39      	ldr	r1, [r7, #32]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	431a      	orrs	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 80b1 	beq.w	8001952 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001928 <HAL_GPIO_Init+0x2b8>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001928 <HAL_GPIO_Init+0x2b8>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001928 <HAL_GPIO_Init+0x2b8>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001808:	4a48      	ldr	r2, [pc, #288]	@ (800192c <HAL_GPIO_Init+0x2bc>)
 800180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3302      	adds	r3, #2
 8001810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001814:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a40      	ldr	r2, [pc, #256]	@ (8001930 <HAL_GPIO_Init+0x2c0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d013      	beq.n	800185c <HAL_GPIO_Init+0x1ec>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a3f      	ldr	r2, [pc, #252]	@ (8001934 <HAL_GPIO_Init+0x2c4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00d      	beq.n	8001858 <HAL_GPIO_Init+0x1e8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a3e      	ldr	r2, [pc, #248]	@ (8001938 <HAL_GPIO_Init+0x2c8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d007      	beq.n	8001854 <HAL_GPIO_Init+0x1e4>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a3d      	ldr	r2, [pc, #244]	@ (800193c <HAL_GPIO_Init+0x2cc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d101      	bne.n	8001850 <HAL_GPIO_Init+0x1e0>
 800184c:	2303      	movs	r3, #3
 800184e:	e006      	b.n	800185e <HAL_GPIO_Init+0x1ee>
 8001850:	2304      	movs	r3, #4
 8001852:	e004      	b.n	800185e <HAL_GPIO_Init+0x1ee>
 8001854:	2302      	movs	r3, #2
 8001856:	e002      	b.n	800185e <HAL_GPIO_Init+0x1ee>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_GPIO_Init+0x1ee>
 800185c:	2300      	movs	r3, #0
 800185e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001860:	f002 0203 	and.w	r2, r2, #3
 8001864:	0092      	lsls	r2, r2, #2
 8001866:	4093      	lsls	r3, r2
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800186e:	492f      	ldr	r1, [pc, #188]	@ (800192c <HAL_GPIO_Init+0x2bc>)
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3302      	adds	r3, #2
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d006      	beq.n	8001896 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001888:	4b2d      	ldr	r3, [pc, #180]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	492c      	ldr	r1, [pc, #176]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	608b      	str	r3, [r1, #8]
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001896:	4b2a      	ldr	r3, [pc, #168]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	43db      	mvns	r3, r3
 800189e:	4928      	ldr	r1, [pc, #160]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018b0:	4b23      	ldr	r3, [pc, #140]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	4922      	ldr	r1, [pc, #136]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	60cb      	str	r3, [r1, #12]
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018be:	4b20      	ldr	r3, [pc, #128]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	491e      	ldr	r1, [pc, #120]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018d8:	4b19      	ldr	r3, [pc, #100]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	4918      	ldr	r1, [pc, #96]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018e6:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4914      	ldr	r1, [pc, #80]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d021      	beq.n	8001944 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001900:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	490e      	ldr	r1, [pc, #56]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	600b      	str	r3, [r1, #0]
 800190c:	e021      	b.n	8001952 <HAL_GPIO_Init+0x2e2>
 800190e:	bf00      	nop
 8001910:	10320000 	.word	0x10320000
 8001914:	10310000 	.word	0x10310000
 8001918:	10220000 	.word	0x10220000
 800191c:	10210000 	.word	0x10210000
 8001920:	10120000 	.word	0x10120000
 8001924:	10110000 	.word	0x10110000
 8001928:	40021000 	.word	0x40021000
 800192c:	40010000 	.word	0x40010000
 8001930:	40010800 	.word	0x40010800
 8001934:	40010c00 	.word	0x40010c00
 8001938:	40011000 	.word	0x40011000
 800193c:	40011400 	.word	0x40011400
 8001940:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001944:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <HAL_GPIO_Init+0x304>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	43db      	mvns	r3, r3
 800194c:	4909      	ldr	r1, [pc, #36]	@ (8001974 <HAL_GPIO_Init+0x304>)
 800194e:	4013      	ands	r3, r2
 8001950:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	3301      	adds	r3, #1
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195e:	fa22 f303 	lsr.w	r3, r2, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	f47f ae8e 	bne.w	8001684 <HAL_GPIO_Init+0x14>
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	372c      	adds	r7, #44	@ 0x2c
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	40010400 	.word	0x40010400

08001978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e001      	b.n	800199a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800199a:	7bfb      	ldrb	r3, [r7, #15]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	807b      	strh	r3, [r7, #2]
 80019b2:	4613      	mov	r3, r2
 80019b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019b6:	787b      	ldrb	r3, [r7, #1]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019bc:	887a      	ldrh	r2, [r7, #2]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019c2:	e003      	b.n	80019cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019c4:	887b      	ldrh	r3, [r7, #2]
 80019c6:	041a      	lsls	r2, r3, #16
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	611a      	str	r2, [r3, #16]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d006      	beq.n	80019fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ee:	4a05      	ldr	r2, [pc, #20]	@ (8001a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff f95e 	bl	8000cb8 <HAL_GPIO_EXTI_Callback>
  }
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40010400 	.word	0x40010400

08001a08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e12b      	b.n	8001c72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d106      	bne.n	8001a34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff fb1e 	bl	8001070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2224      	movs	r2, #36	@ 0x24
 8001a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a6c:	f001 f832 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8001a70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4a81      	ldr	r2, [pc, #516]	@ (8001c7c <HAL_I2C_Init+0x274>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d807      	bhi.n	8001a8c <HAL_I2C_Init+0x84>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4a80      	ldr	r2, [pc, #512]	@ (8001c80 <HAL_I2C_Init+0x278>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	bf94      	ite	ls
 8001a84:	2301      	movls	r3, #1
 8001a86:	2300      	movhi	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	e006      	b.n	8001a9a <HAL_I2C_Init+0x92>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4a7d      	ldr	r2, [pc, #500]	@ (8001c84 <HAL_I2C_Init+0x27c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	bf94      	ite	ls
 8001a94:	2301      	movls	r3, #1
 8001a96:	2300      	movhi	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0e7      	b.n	8001c72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4a78      	ldr	r2, [pc, #480]	@ (8001c88 <HAL_I2C_Init+0x280>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	0c9b      	lsrs	r3, r3, #18
 8001aac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4a6a      	ldr	r2, [pc, #424]	@ (8001c7c <HAL_I2C_Init+0x274>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d802      	bhi.n	8001adc <HAL_I2C_Init+0xd4>
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	e009      	b.n	8001af0 <HAL_I2C_Init+0xe8>
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ae2:	fb02 f303 	mul.w	r3, r2, r3
 8001ae6:	4a69      	ldr	r2, [pc, #420]	@ (8001c8c <HAL_I2C_Init+0x284>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	099b      	lsrs	r3, r3, #6
 8001aee:	3301      	adds	r3, #1
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	430b      	orrs	r3, r1
 8001af6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	495c      	ldr	r1, [pc, #368]	@ (8001c7c <HAL_I2C_Init+0x274>)
 8001b0c:	428b      	cmp	r3, r1
 8001b0e:	d819      	bhi.n	8001b44 <HAL_I2C_Init+0x13c>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1e59      	subs	r1, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b1e:	1c59      	adds	r1, r3, #1
 8001b20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b24:	400b      	ands	r3, r1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00a      	beq.n	8001b40 <HAL_I2C_Init+0x138>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1e59      	subs	r1, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b38:	3301      	adds	r3, #1
 8001b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3e:	e051      	b.n	8001be4 <HAL_I2C_Init+0x1dc>
 8001b40:	2304      	movs	r3, #4
 8001b42:	e04f      	b.n	8001be4 <HAL_I2C_Init+0x1dc>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d111      	bne.n	8001b70 <HAL_I2C_Init+0x168>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1e58      	subs	r0, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6859      	ldr	r1, [r3, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	440b      	add	r3, r1
 8001b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	e012      	b.n	8001b96 <HAL_I2C_Init+0x18e>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1e58      	subs	r0, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	0099      	lsls	r1, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b86:	3301      	adds	r3, #1
 8001b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf0c      	ite	eq
 8001b90:	2301      	moveq	r3, #1
 8001b92:	2300      	movne	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_I2C_Init+0x196>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e022      	b.n	8001be4 <HAL_I2C_Init+0x1dc>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10e      	bne.n	8001bc4 <HAL_I2C_Init+0x1bc>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1e58      	subs	r0, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6859      	ldr	r1, [r3, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	440b      	add	r3, r1
 8001bb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bc2:	e00f      	b.n	8001be4 <HAL_I2C_Init+0x1dc>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1e58      	subs	r0, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6859      	ldr	r1, [r3, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	0099      	lsls	r1, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	6809      	ldr	r1, [r1, #0]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69da      	ldr	r2, [r3, #28]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6911      	ldr	r1, [r2, #16]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68d2      	ldr	r2, [r2, #12]
 8001c1e:	4311      	orrs	r1, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	430b      	orrs	r3, r1
 8001c26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695a      	ldr	r2, [r3, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	000186a0 	.word	0x000186a0
 8001c80:	001e847f 	.word	0x001e847f
 8001c84:	003d08ff 	.word	0x003d08ff
 8001c88:	431bde83 	.word	0x431bde83
 8001c8c:	10624dd3 	.word	0x10624dd3

08001c90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	817b      	strh	r3, [r7, #10]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff fba8 	bl	80013f8 <HAL_GetTick>
 8001ca8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	f040 80e0 	bne.w	8001e78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2319      	movs	r3, #25
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4970      	ldr	r1, [pc, #448]	@ (8001e84 <HAL_I2C_Master_Transmit+0x1f4>)
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 f964 	bl	8001f90 <I2C_WaitOnFlagUntilTimeout>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e0d3      	b.n	8001e7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_I2C_Master_Transmit+0x50>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e0cc      	b.n	8001e7a <HAL_I2C_Master_Transmit+0x1ea>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d007      	beq.n	8001d06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 0201 	orr.w	r2, r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2221      	movs	r2, #33	@ 0x21
 8001d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2210      	movs	r2, #16
 8001d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	893a      	ldrh	r2, [r7, #8]
 8001d36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4a50      	ldr	r2, [pc, #320]	@ (8001e88 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d48:	8979      	ldrh	r1, [r7, #10]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	6a3a      	ldr	r2, [r7, #32]
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 f89c 	bl	8001e8c <I2C_MasterRequestWrite>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e08d      	b.n	8001e7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d74:	e066      	b.n	8001e44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	6a39      	ldr	r1, [r7, #32]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 fa22 	bl	80021c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00d      	beq.n	8001da2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d107      	bne.n	8001d9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e06b      	b.n	8001e7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da6:	781a      	ldrb	r2, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d11b      	bne.n	8001e18 <HAL_I2C_Master_Transmit+0x188>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d017      	beq.n	8001e18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	781a      	ldrb	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	3b01      	subs	r3, #1
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	6a39      	ldr	r1, [r7, #32]
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 fa19 	bl	8002254 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00d      	beq.n	8001e44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d107      	bne.n	8001e40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e01a      	b.n	8001e7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d194      	bne.n	8001d76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e000      	b.n	8001e7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e78:	2302      	movs	r3, #2
  }
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	00100002 	.word	0x00100002
 8001e88:	ffff0000 	.word	0xffff0000

08001e8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d006      	beq.n	8001eb6 <I2C_MasterRequestWrite+0x2a>
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d003      	beq.n	8001eb6 <I2C_MasterRequestWrite+0x2a>
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001eb4:	d108      	bne.n	8001ec8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e00b      	b.n	8001ee0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ecc:	2b12      	cmp	r3, #18
 8001ece:	d107      	bne.n	8001ee0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ede:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 f84f 	bl	8001f90 <I2C_WaitOnFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00d      	beq.n	8001f14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f06:	d103      	bne.n	8001f10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e035      	b.n	8001f80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f1c:	d108      	bne.n	8001f30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f1e:	897b      	ldrh	r3, [r7, #10]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f2c:	611a      	str	r2, [r3, #16]
 8001f2e:	e01b      	b.n	8001f68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f30:	897b      	ldrh	r3, [r7, #10]
 8001f32:	11db      	asrs	r3, r3, #7
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f003 0306 	and.w	r3, r3, #6
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f063 030f 	orn	r3, r3, #15
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	490e      	ldr	r1, [pc, #56]	@ (8001f88 <I2C_MasterRequestWrite+0xfc>)
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f898 	bl	8002084 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e010      	b.n	8001f80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f5e:	897b      	ldrh	r3, [r7, #10]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	4907      	ldr	r1, [pc, #28]	@ (8001f8c <I2C_MasterRequestWrite+0x100>)
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 f888 	bl	8002084 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	00010008 	.word	0x00010008
 8001f8c:	00010002 	.word	0x00010002

08001f90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fa0:	e048      	b.n	8002034 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa8:	d044      	beq.n	8002034 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001faa:	f7ff fa25 	bl	80013f8 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d302      	bcc.n	8001fc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d139      	bne.n	8002034 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	0c1b      	lsrs	r3, r3, #16
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d10d      	bne.n	8001fe6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	43da      	mvns	r2, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bf0c      	ite	eq
 8001fdc:	2301      	moveq	r3, #1
 8001fde:	2300      	movne	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	e00c      	b.n	8002000 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	43da      	mvns	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	429a      	cmp	r2, r3
 8002004:	d116      	bne.n	8002034 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e023      	b.n	800207c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	0c1b      	lsrs	r3, r3, #16
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d10d      	bne.n	800205a <I2C_WaitOnFlagUntilTimeout+0xca>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	43da      	mvns	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4013      	ands	r3, r2
 800204a:	b29b      	uxth	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf0c      	ite	eq
 8002050:	2301      	moveq	r3, #1
 8002052:	2300      	movne	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	e00c      	b.n	8002074 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	43da      	mvns	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	4013      	ands	r3, r2
 8002066:	b29b      	uxth	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	429a      	cmp	r2, r3
 8002078:	d093      	beq.n	8001fa2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002092:	e071      	b.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800209e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020a2:	d123      	bne.n	80020ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	f043 0204 	orr.w	r2, r3, #4
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e067      	b.n	80021bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f2:	d041      	beq.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f4:	f7ff f980 	bl	80013f8 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	429a      	cmp	r2, r3
 8002102:	d302      	bcc.n	800210a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d136      	bne.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d10c      	bne.n	800212e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4013      	ands	r3, r2
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf14      	ite	ne
 8002126:	2301      	movne	r3, #1
 8002128:	2300      	moveq	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	e00b      	b.n	8002146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	43da      	mvns	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	4013      	ands	r3, r2
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf14      	ite	ne
 8002140:	2301      	movne	r3, #1
 8002142:	2300      	moveq	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d016      	beq.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	f043 0220 	orr.w	r2, r3, #32
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e021      	b.n	80021bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	0c1b      	lsrs	r3, r3, #16
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d10c      	bne.n	800219c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	43da      	mvns	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4013      	ands	r3, r2
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf14      	ite	ne
 8002194:	2301      	movne	r3, #1
 8002196:	2300      	moveq	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	e00b      	b.n	80021b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4013      	ands	r3, r2
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	bf14      	ite	ne
 80021ae:	2301      	movne	r3, #1
 80021b0:	2300      	moveq	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f47f af6d 	bne.w	8002094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021d0:	e034      	b.n	800223c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f886 	bl	80022e4 <I2C_IsAcknowledgeFailed>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e034      	b.n	800224c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d028      	beq.n	800223c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ea:	f7ff f905 	bl	80013f8 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d302      	bcc.n	8002200 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d11d      	bne.n	800223c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220a:	2b80      	cmp	r3, #128	@ 0x80
 800220c:	d016      	beq.n	800223c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002228:	f043 0220 	orr.w	r2, r3, #32
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e007      	b.n	800224c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002246:	2b80      	cmp	r3, #128	@ 0x80
 8002248:	d1c3      	bne.n	80021d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002260:	e034      	b.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f83e 	bl	80022e4 <I2C_IsAcknowledgeFailed>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e034      	b.n	80022dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002278:	d028      	beq.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227a:	f7ff f8bd 	bl	80013f8 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	429a      	cmp	r2, r3
 8002288:	d302      	bcc.n	8002290 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d11d      	bne.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b04      	cmp	r3, #4
 800229c:	d016      	beq.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b8:	f043 0220 	orr.w	r2, r3, #32
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e007      	b.n	80022dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d1c3      	bne.n	8002262 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022fa:	d11b      	bne.n	8002334 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002304:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	f043 0204 	orr.w	r2, r3, #4
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e272      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8087 	beq.w	800246e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002360:	4b92      	ldr	r3, [pc, #584]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 030c 	and.w	r3, r3, #12
 8002368:	2b04      	cmp	r3, #4
 800236a:	d00c      	beq.n	8002386 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800236c:	4b8f      	ldr	r3, [pc, #572]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b08      	cmp	r3, #8
 8002376:	d112      	bne.n	800239e <HAL_RCC_OscConfig+0x5e>
 8002378:	4b8c      	ldr	r3, [pc, #560]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002384:	d10b      	bne.n	800239e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002386:	4b89      	ldr	r3, [pc, #548]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d06c      	beq.n	800246c <HAL_RCC_OscConfig+0x12c>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d168      	bne.n	800246c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e24c      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a6:	d106      	bne.n	80023b6 <HAL_RCC_OscConfig+0x76>
 80023a8:	4b80      	ldr	r3, [pc, #512]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a7f      	ldr	r2, [pc, #508]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	e02e      	b.n	8002414 <HAL_RCC_OscConfig+0xd4>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x98>
 80023be:	4b7b      	ldr	r3, [pc, #492]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a7a      	ldr	r2, [pc, #488]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b78      	ldr	r3, [pc, #480]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a77      	ldr	r2, [pc, #476]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e01d      	b.n	8002414 <HAL_RCC_OscConfig+0xd4>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0xbc>
 80023e2:	4b72      	ldr	r3, [pc, #456]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a71      	ldr	r2, [pc, #452]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b6f      	ldr	r3, [pc, #444]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a6e      	ldr	r2, [pc, #440]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0xd4>
 80023fc:	4b6b      	ldr	r3, [pc, #428]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a6a      	ldr	r2, [pc, #424]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b68      	ldr	r3, [pc, #416]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a67      	ldr	r2, [pc, #412]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 800240e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002412:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d013      	beq.n	8002444 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7fe ffec 	bl	80013f8 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002424:	f7fe ffe8 	bl	80013f8 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	@ 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e200      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b5d      	ldr	r3, [pc, #372]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0xe4>
 8002442:	e014      	b.n	800246e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe ffd8 	bl	80013f8 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800244c:	f7fe ffd4 	bl	80013f8 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	@ 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e1ec      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	4b53      	ldr	r3, [pc, #332]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x10c>
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d063      	beq.n	8002542 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800247a:	4b4c      	ldr	r3, [pc, #304]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002486:	4b49      	ldr	r3, [pc, #292]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b08      	cmp	r3, #8
 8002490:	d11c      	bne.n	80024cc <HAL_RCC_OscConfig+0x18c>
 8002492:	4b46      	ldr	r3, [pc, #280]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d116      	bne.n	80024cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	4b43      	ldr	r3, [pc, #268]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_RCC_OscConfig+0x176>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e1c0      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b6:	4b3d      	ldr	r3, [pc, #244]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4939      	ldr	r1, [pc, #228]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	e03a      	b.n	8002542 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d4:	4b36      	ldr	r3, [pc, #216]	@ (80025b0 <HAL_RCC_OscConfig+0x270>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7fe ff8d 	bl	80013f8 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e2:	f7fe ff89 	bl	80013f8 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e1a1      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	4b2d      	ldr	r3, [pc, #180]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002500:	4b2a      	ldr	r3, [pc, #168]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4927      	ldr	r1, [pc, #156]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]
 8002514:	e015      	b.n	8002542 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002516:	4b26      	ldr	r3, [pc, #152]	@ (80025b0 <HAL_RCC_OscConfig+0x270>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe ff6c 	bl	80013f8 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002524:	f7fe ff68 	bl	80013f8 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e180      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d03a      	beq.n	80025c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d019      	beq.n	800258a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002556:	4b17      	ldr	r3, [pc, #92]	@ (80025b4 <HAL_RCC_OscConfig+0x274>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255c:	f7fe ff4c 	bl	80013f8 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002564:	f7fe ff48 	bl	80013f8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e160      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	4b0d      	ldr	r3, [pc, #52]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002582:	2001      	movs	r0, #1
 8002584:	f000 faba 	bl	8002afc <RCC_Delay>
 8002588:	e01c      	b.n	80025c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258a:	4b0a      	ldr	r3, [pc, #40]	@ (80025b4 <HAL_RCC_OscConfig+0x274>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002590:	f7fe ff32 	bl	80013f8 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002596:	e00f      	b.n	80025b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002598:	f7fe ff2e 	bl	80013f8 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d908      	bls.n	80025b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e146      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	42420000 	.word	0x42420000
 80025b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b8:	4b92      	ldr	r3, [pc, #584]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1e9      	bne.n	8002598 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80a6 	beq.w	800271e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d2:	2300      	movs	r3, #0
 80025d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10d      	bne.n	80025fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	4b88      	ldr	r3, [pc, #544]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4a87      	ldr	r2, [pc, #540]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ec:	61d3      	str	r3, [r2, #28]
 80025ee:	4b85      	ldr	r3, [pc, #532]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025fa:	2301      	movs	r3, #1
 80025fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fe:	4b82      	ldr	r3, [pc, #520]	@ (8002808 <HAL_RCC_OscConfig+0x4c8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d118      	bne.n	800263c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800260a:	4b7f      	ldr	r3, [pc, #508]	@ (8002808 <HAL_RCC_OscConfig+0x4c8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a7e      	ldr	r2, [pc, #504]	@ (8002808 <HAL_RCC_OscConfig+0x4c8>)
 8002610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002616:	f7fe feef 	bl	80013f8 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261e:	f7fe feeb 	bl	80013f8 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b64      	cmp	r3, #100	@ 0x64
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e103      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	4b75      	ldr	r3, [pc, #468]	@ (8002808 <HAL_RCC_OscConfig+0x4c8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x312>
 8002644:	4b6f      	ldr	r3, [pc, #444]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4a6e      	ldr	r2, [pc, #440]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	e02d      	b.n	80026ae <HAL_RCC_OscConfig+0x36e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x334>
 800265a:	4b6a      	ldr	r3, [pc, #424]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4a69      	ldr	r2, [pc, #420]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	6213      	str	r3, [r2, #32]
 8002666:	4b67      	ldr	r3, [pc, #412]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a66      	ldr	r2, [pc, #408]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	f023 0304 	bic.w	r3, r3, #4
 8002670:	6213      	str	r3, [r2, #32]
 8002672:	e01c      	b.n	80026ae <HAL_RCC_OscConfig+0x36e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b05      	cmp	r3, #5
 800267a:	d10c      	bne.n	8002696 <HAL_RCC_OscConfig+0x356>
 800267c:	4b61      	ldr	r3, [pc, #388]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4a60      	ldr	r2, [pc, #384]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002682:	f043 0304 	orr.w	r3, r3, #4
 8002686:	6213      	str	r3, [r2, #32]
 8002688:	4b5e      	ldr	r3, [pc, #376]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4a5d      	ldr	r2, [pc, #372]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6213      	str	r3, [r2, #32]
 8002694:	e00b      	b.n	80026ae <HAL_RCC_OscConfig+0x36e>
 8002696:	4b5b      	ldr	r3, [pc, #364]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	4a5a      	ldr	r2, [pc, #360]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	6213      	str	r3, [r2, #32]
 80026a2:	4b58      	ldr	r3, [pc, #352]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4a57      	ldr	r2, [pc, #348]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	f023 0304 	bic.w	r3, r3, #4
 80026ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d015      	beq.n	80026e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b6:	f7fe fe9f 	bl	80013f8 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7fe fe9b 	bl	80013f8 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e0b1      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0ee      	beq.n	80026be <HAL_RCC_OscConfig+0x37e>
 80026e0:	e014      	b.n	800270c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e2:	f7fe fe89 	bl	80013f8 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ea:	f7fe fe85 	bl	80013f8 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e09b      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002700:	4b40      	ldr	r3, [pc, #256]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ee      	bne.n	80026ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d105      	bne.n	800271e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002712:	4b3c      	ldr	r3, [pc, #240]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4a3b      	ldr	r2, [pc, #236]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800271c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8087 	beq.w	8002836 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002728:	4b36      	ldr	r3, [pc, #216]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b08      	cmp	r3, #8
 8002732:	d061      	beq.n	80027f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d146      	bne.n	80027ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273c:	4b33      	ldr	r3, [pc, #204]	@ (800280c <HAL_RCC_OscConfig+0x4cc>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002742:	f7fe fe59 	bl	80013f8 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274a:	f7fe fe55 	bl	80013f8 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e06d      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275c:	4b29      	ldr	r3, [pc, #164]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002770:	d108      	bne.n	8002784 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002772:	4b24      	ldr	r3, [pc, #144]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	4921      	ldr	r1, [pc, #132]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002784:	4b1f      	ldr	r3, [pc, #124]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a19      	ldr	r1, [r3, #32]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002794:	430b      	orrs	r3, r1
 8002796:	491b      	ldr	r1, [pc, #108]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800279c:	4b1b      	ldr	r3, [pc, #108]	@ (800280c <HAL_RCC_OscConfig+0x4cc>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a2:	f7fe fe29 	bl	80013f8 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027aa:	f7fe fe25 	bl	80013f8 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e03d      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027bc:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x46a>
 80027c8:	e035      	b.n	8002836 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ca:	4b10      	ldr	r3, [pc, #64]	@ (800280c <HAL_RCC_OscConfig+0x4cc>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fe12 	bl	80013f8 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d8:	f7fe fe0e 	bl	80013f8 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e026      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x498>
 80027f6:	e01e      	b.n	8002836 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e019      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
 800280c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002810:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <HAL_RCC_OscConfig+0x500>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	429a      	cmp	r2, r3
 8002822:	d106      	bne.n	8002832 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d001      	beq.n	8002836 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000

08002844 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0d0      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b6a      	ldr	r3, [pc, #424]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d910      	bls.n	8002888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b67      	ldr	r3, [pc, #412]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 0207 	bic.w	r2, r3, #7
 800286e:	4965      	ldr	r1, [pc, #404]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b63      	ldr	r3, [pc, #396]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0b8      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d020      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a0:	4b59      	ldr	r3, [pc, #356]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a58      	ldr	r2, [pc, #352]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b8:	4b53      	ldr	r3, [pc, #332]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a52      	ldr	r2, [pc, #328]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80028c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c4:	4b50      	ldr	r3, [pc, #320]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	494d      	ldr	r1, [pc, #308]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d040      	beq.n	8002964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d107      	bne.n	80028fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	4b47      	ldr	r3, [pc, #284]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d115      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e07f      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002902:	4b41      	ldr	r3, [pc, #260]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e073      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002912:	4b3d      	ldr	r3, [pc, #244]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e06b      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002922:	4b39      	ldr	r3, [pc, #228]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f023 0203 	bic.w	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4936      	ldr	r1, [pc, #216]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002934:	f7fe fd60 	bl	80013f8 <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	e00a      	b.n	8002952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293c:	f7fe fd5c 	bl	80013f8 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e053      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	4b2d      	ldr	r3, [pc, #180]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 020c 	and.w	r2, r3, #12
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	429a      	cmp	r2, r3
 8002962:	d1eb      	bne.n	800293c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002964:	4b27      	ldr	r3, [pc, #156]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d210      	bcs.n	8002994 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 0207 	bic.w	r2, r3, #7
 800297a:	4922      	ldr	r1, [pc, #136]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b20      	ldr	r3, [pc, #128]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e032      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a0:	4b19      	ldr	r3, [pc, #100]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4916      	ldr	r1, [pc, #88]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d009      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029be:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	490e      	ldr	r1, [pc, #56]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029d2:	f000 f821 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 80029d6:	4602      	mov	r2, r0
 80029d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	490a      	ldr	r1, [pc, #40]	@ (8002a0c <HAL_RCC_ClockConfig+0x1c8>)
 80029e4:	5ccb      	ldrb	r3, [r1, r3]
 80029e6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ea:	4a09      	ldr	r2, [pc, #36]	@ (8002a10 <HAL_RCC_ClockConfig+0x1cc>)
 80029ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ee:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <HAL_RCC_ClockConfig+0x1d0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fcbe 	bl	8001374 <HAL_InitTick>

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40022000 	.word	0x40022000
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	08003cf4 	.word	0x08003cf4
 8002a10:	200000a0 	.word	0x200000a0
 8002a14:	200000a4 	.word	0x200000a4

08002a18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a32:	4b1e      	ldr	r3, [pc, #120]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x94>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d002      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x30>
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d003      	beq.n	8002a4e <HAL_RCC_GetSysClockFreq+0x36>
 8002a46:	e027      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a48:	4b19      	ldr	r3, [pc, #100]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a4a:	613b      	str	r3, [r7, #16]
      break;
 8002a4c:	e027      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	0c9b      	lsrs	r3, r3, #18
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	4a17      	ldr	r2, [pc, #92]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a58:	5cd3      	ldrb	r3, [r2, r3]
 8002a5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d010      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a66:	4b11      	ldr	r3, [pc, #68]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x94>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	0c5b      	lsrs	r3, r3, #17
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	4a11      	ldr	r2, [pc, #68]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a72:	5cd3      	ldrb	r3, [r2, r3]
 8002a74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a7a:	fb03 f202 	mul.w	r2, r3, r2
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	e004      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002abc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a8c:	fb02 f303 	mul.w	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	613b      	str	r3, [r7, #16]
      break;
 8002a96:	e002      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a9a:	613b      	str	r3, [r7, #16]
      break;
 8002a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9e:	693b      	ldr	r3, [r7, #16]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	007a1200 	.word	0x007a1200
 8002ab4:	08003d0c 	.word	0x08003d0c
 8002ab8:	08003d1c 	.word	0x08003d1c
 8002abc:	003d0900 	.word	0x003d0900

08002ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac4:	4b02      	ldr	r3, [pc, #8]	@ (8002ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	200000a0 	.word	0x200000a0

08002ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ad8:	f7ff fff2 	bl	8002ac0 <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	@ (8002af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	0a1b      	lsrs	r3, r3, #8
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4903      	ldr	r1, [pc, #12]	@ (8002af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000
 8002af8:	08003d04 	.word	0x08003d04

08002afc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b04:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <RCC_Delay+0x34>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a0a      	ldr	r2, [pc, #40]	@ (8002b34 <RCC_Delay+0x38>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0a5b      	lsrs	r3, r3, #9
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b18:	bf00      	nop
  }
  while (Delay --);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1e5a      	subs	r2, r3, #1
 8002b1e:	60fa      	str	r2, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f9      	bne.n	8002b18 <RCC_Delay+0x1c>
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	200000a0 	.word	0x200000a0
 8002b34:	10624dd3 	.word	0x10624dd3

08002b38 <__assert_func>:
 8002b38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b3a:	4614      	mov	r4, r2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b09      	ldr	r3, [pc, #36]	@ (8002b64 <__assert_func+0x2c>)
 8002b40:	4605      	mov	r5, r0
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68d8      	ldr	r0, [r3, #12]
 8002b46:	b954      	cbnz	r4, 8002b5e <__assert_func+0x26>
 8002b48:	4b07      	ldr	r3, [pc, #28]	@ (8002b68 <__assert_func+0x30>)
 8002b4a:	461c      	mov	r4, r3
 8002b4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002b50:	9100      	str	r1, [sp, #0]
 8002b52:	462b      	mov	r3, r5
 8002b54:	4905      	ldr	r1, [pc, #20]	@ (8002b6c <__assert_func+0x34>)
 8002b56:	f000 f91f 	bl	8002d98 <fiprintf>
 8002b5a:	f000 fa1a 	bl	8002f92 <abort>
 8002b5e:	4b04      	ldr	r3, [pc, #16]	@ (8002b70 <__assert_func+0x38>)
 8002b60:	e7f4      	b.n	8002b4c <__assert_func+0x14>
 8002b62:	bf00      	nop
 8002b64:	200000b8 	.word	0x200000b8
 8002b68:	08003d59 	.word	0x08003d59
 8002b6c:	08003d2b 	.word	0x08003d2b
 8002b70:	08003d1e 	.word	0x08003d1e

08002b74 <exit>:
 8002b74:	b508      	push	{r3, lr}
 8002b76:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <exit+0x1c>)
 8002b78:	4604      	mov	r4, r0
 8002b7a:	b113      	cbz	r3, 8002b82 <exit+0xe>
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	f3af 8000 	nop.w
 8002b82:	4b04      	ldr	r3, [pc, #16]	@ (8002b94 <exit+0x20>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	b103      	cbz	r3, 8002b8a <exit+0x16>
 8002b88:	4798      	blx	r3
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f7fe fb05 	bl	800119a <_exit>
 8002b90:	00000000 	.word	0x00000000
 8002b94:	20000870 	.word	0x20000870

08002b98 <__itoa>:
 8002b98:	1e93      	subs	r3, r2, #2
 8002b9a:	2b22      	cmp	r3, #34	@ 0x22
 8002b9c:	b510      	push	{r4, lr}
 8002b9e:	460c      	mov	r4, r1
 8002ba0:	d904      	bls.n	8002bac <__itoa+0x14>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	461c      	mov	r4, r3
 8002ba6:	700b      	strb	r3, [r1, #0]
 8002ba8:	4620      	mov	r0, r4
 8002baa:	bd10      	pop	{r4, pc}
 8002bac:	2a0a      	cmp	r2, #10
 8002bae:	d109      	bne.n	8002bc4 <__itoa+0x2c>
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	da07      	bge.n	8002bc4 <__itoa+0x2c>
 8002bb4:	232d      	movs	r3, #45	@ 0x2d
 8002bb6:	700b      	strb	r3, [r1, #0]
 8002bb8:	2101      	movs	r1, #1
 8002bba:	4240      	negs	r0, r0
 8002bbc:	4421      	add	r1, r4
 8002bbe:	f000 f805 	bl	8002bcc <__utoa>
 8002bc2:	e7f1      	b.n	8002ba8 <__itoa+0x10>
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	e7f9      	b.n	8002bbc <__itoa+0x24>

08002bc8 <itoa>:
 8002bc8:	f7ff bfe6 	b.w	8002b98 <__itoa>

08002bcc <__utoa>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	b08b      	sub	sp, #44	@ 0x2c
 8002bd0:	4605      	mov	r5, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	466e      	mov	r6, sp
 8002bd6:	4c1d      	ldr	r4, [pc, #116]	@ (8002c4c <__utoa+0x80>)
 8002bd8:	f104 0c20 	add.w	ip, r4, #32
 8002bdc:	4637      	mov	r7, r6
 8002bde:	6820      	ldr	r0, [r4, #0]
 8002be0:	6861      	ldr	r1, [r4, #4]
 8002be2:	3408      	adds	r4, #8
 8002be4:	c703      	stmia	r7!, {r0, r1}
 8002be6:	4564      	cmp	r4, ip
 8002be8:	463e      	mov	r6, r7
 8002bea:	d1f7      	bne.n	8002bdc <__utoa+0x10>
 8002bec:	7921      	ldrb	r1, [r4, #4]
 8002bee:	6820      	ldr	r0, [r4, #0]
 8002bf0:	7139      	strb	r1, [r7, #4]
 8002bf2:	1e91      	subs	r1, r2, #2
 8002bf4:	2922      	cmp	r1, #34	@ 0x22
 8002bf6:	6038      	str	r0, [r7, #0]
 8002bf8:	f04f 0100 	mov.w	r1, #0
 8002bfc:	d904      	bls.n	8002c08 <__utoa+0x3c>
 8002bfe:	7019      	strb	r1, [r3, #0]
 8002c00:	460b      	mov	r3, r1
 8002c02:	4618      	mov	r0, r3
 8002c04:	b00b      	add	sp, #44	@ 0x2c
 8002c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c08:	1e58      	subs	r0, r3, #1
 8002c0a:	4684      	mov	ip, r0
 8002c0c:	fbb5 f7f2 	udiv	r7, r5, r2
 8002c10:	fb02 5617 	mls	r6, r2, r7, r5
 8002c14:	3628      	adds	r6, #40	@ 0x28
 8002c16:	446e      	add	r6, sp
 8002c18:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002c1c:	460c      	mov	r4, r1
 8002c1e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8002c22:	462e      	mov	r6, r5
 8002c24:	42b2      	cmp	r2, r6
 8002c26:	463d      	mov	r5, r7
 8002c28:	f101 0101 	add.w	r1, r1, #1
 8002c2c:	d9ee      	bls.n	8002c0c <__utoa+0x40>
 8002c2e:	2200      	movs	r2, #0
 8002c30:	545a      	strb	r2, [r3, r1]
 8002c32:	1919      	adds	r1, r3, r4
 8002c34:	1aa5      	subs	r5, r4, r2
 8002c36:	42aa      	cmp	r2, r5
 8002c38:	dae3      	bge.n	8002c02 <__utoa+0x36>
 8002c3a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002c3e:	780e      	ldrb	r6, [r1, #0]
 8002c40:	3201      	adds	r2, #1
 8002c42:	7006      	strb	r6, [r0, #0]
 8002c44:	f801 5901 	strb.w	r5, [r1], #-1
 8002c48:	e7f4      	b.n	8002c34 <__utoa+0x68>
 8002c4a:	bf00      	nop
 8002c4c:	08003d5a 	.word	0x08003d5a

08002c50 <std>:
 8002c50:	2300      	movs	r3, #0
 8002c52:	b510      	push	{r4, lr}
 8002c54:	4604      	mov	r4, r0
 8002c56:	e9c0 3300 	strd	r3, r3, [r0]
 8002c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c5e:	6083      	str	r3, [r0, #8]
 8002c60:	8181      	strh	r1, [r0, #12]
 8002c62:	6643      	str	r3, [r0, #100]	@ 0x64
 8002c64:	81c2      	strh	r2, [r0, #14]
 8002c66:	6183      	str	r3, [r0, #24]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	305c      	adds	r0, #92	@ 0x5c
 8002c6e:	f000 f906 	bl	8002e7e <memset>
 8002c72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <std+0x58>)
 8002c74:	6224      	str	r4, [r4, #32]
 8002c76:	6263      	str	r3, [r4, #36]	@ 0x24
 8002c78:	4b0c      	ldr	r3, [pc, #48]	@ (8002cac <std+0x5c>)
 8002c7a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <std+0x60>)
 8002c7e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002c80:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb4 <std+0x64>)
 8002c82:	6323      	str	r3, [r4, #48]	@ 0x30
 8002c84:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb8 <std+0x68>)
 8002c86:	429c      	cmp	r4, r3
 8002c88:	d006      	beq.n	8002c98 <std+0x48>
 8002c8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002c8e:	4294      	cmp	r4, r2
 8002c90:	d002      	beq.n	8002c98 <std+0x48>
 8002c92:	33d0      	adds	r3, #208	@ 0xd0
 8002c94:	429c      	cmp	r4, r3
 8002c96:	d105      	bne.n	8002ca4 <std+0x54>
 8002c98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ca0:	f000 b974 	b.w	8002f8c <__retarget_lock_init_recursive>
 8002ca4:	bd10      	pop	{r4, pc}
 8002ca6:	bf00      	nop
 8002ca8:	08002df9 	.word	0x08002df9
 8002cac:	08002e1b 	.word	0x08002e1b
 8002cb0:	08002e53 	.word	0x08002e53
 8002cb4:	08002e77 	.word	0x08002e77
 8002cb8:	20000738 	.word	0x20000738

08002cbc <stdio_exit_handler>:
 8002cbc:	4a02      	ldr	r2, [pc, #8]	@ (8002cc8 <stdio_exit_handler+0xc>)
 8002cbe:	4903      	ldr	r1, [pc, #12]	@ (8002ccc <stdio_exit_handler+0x10>)
 8002cc0:	4803      	ldr	r0, [pc, #12]	@ (8002cd0 <stdio_exit_handler+0x14>)
 8002cc2:	f000 b87b 	b.w	8002dbc <_fwalk_sglue>
 8002cc6:	bf00      	nop
 8002cc8:	200000ac 	.word	0x200000ac
 8002ccc:	08003831 	.word	0x08003831
 8002cd0:	200000bc 	.word	0x200000bc

08002cd4 <cleanup_stdio>:
 8002cd4:	6841      	ldr	r1, [r0, #4]
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <cleanup_stdio+0x34>)
 8002cd8:	b510      	push	{r4, lr}
 8002cda:	4299      	cmp	r1, r3
 8002cdc:	4604      	mov	r4, r0
 8002cde:	d001      	beq.n	8002ce4 <cleanup_stdio+0x10>
 8002ce0:	f000 fda6 	bl	8003830 <_fflush_r>
 8002ce4:	68a1      	ldr	r1, [r4, #8]
 8002ce6:	4b09      	ldr	r3, [pc, #36]	@ (8002d0c <cleanup_stdio+0x38>)
 8002ce8:	4299      	cmp	r1, r3
 8002cea:	d002      	beq.n	8002cf2 <cleanup_stdio+0x1e>
 8002cec:	4620      	mov	r0, r4
 8002cee:	f000 fd9f 	bl	8003830 <_fflush_r>
 8002cf2:	68e1      	ldr	r1, [r4, #12]
 8002cf4:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <cleanup_stdio+0x3c>)
 8002cf6:	4299      	cmp	r1, r3
 8002cf8:	d004      	beq.n	8002d04 <cleanup_stdio+0x30>
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d00:	f000 bd96 	b.w	8003830 <_fflush_r>
 8002d04:	bd10      	pop	{r4, pc}
 8002d06:	bf00      	nop
 8002d08:	20000738 	.word	0x20000738
 8002d0c:	200007a0 	.word	0x200007a0
 8002d10:	20000808 	.word	0x20000808

08002d14 <global_stdio_init.part.0>:
 8002d14:	b510      	push	{r4, lr}
 8002d16:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <global_stdio_init.part.0+0x30>)
 8002d18:	4c0b      	ldr	r4, [pc, #44]	@ (8002d48 <global_stdio_init.part.0+0x34>)
 8002d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002d4c <global_stdio_init.part.0+0x38>)
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	2104      	movs	r1, #4
 8002d22:	2200      	movs	r2, #0
 8002d24:	f7ff ff94 	bl	8002c50 <std>
 8002d28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	2109      	movs	r1, #9
 8002d30:	f7ff ff8e 	bl	8002c50 <std>
 8002d34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002d38:	2202      	movs	r2, #2
 8002d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d3e:	2112      	movs	r1, #18
 8002d40:	f7ff bf86 	b.w	8002c50 <std>
 8002d44:	20000870 	.word	0x20000870
 8002d48:	20000738 	.word	0x20000738
 8002d4c:	08002cbd 	.word	0x08002cbd

08002d50 <__sfp_lock_acquire>:
 8002d50:	4801      	ldr	r0, [pc, #4]	@ (8002d58 <__sfp_lock_acquire+0x8>)
 8002d52:	f000 b91c 	b.w	8002f8e <__retarget_lock_acquire_recursive>
 8002d56:	bf00      	nop
 8002d58:	20000879 	.word	0x20000879

08002d5c <__sfp_lock_release>:
 8002d5c:	4801      	ldr	r0, [pc, #4]	@ (8002d64 <__sfp_lock_release+0x8>)
 8002d5e:	f000 b917 	b.w	8002f90 <__retarget_lock_release_recursive>
 8002d62:	bf00      	nop
 8002d64:	20000879 	.word	0x20000879

08002d68 <__sinit>:
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	f7ff fff0 	bl	8002d50 <__sfp_lock_acquire>
 8002d70:	6a23      	ldr	r3, [r4, #32]
 8002d72:	b11b      	cbz	r3, 8002d7c <__sinit+0x14>
 8002d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d78:	f7ff bff0 	b.w	8002d5c <__sfp_lock_release>
 8002d7c:	4b04      	ldr	r3, [pc, #16]	@ (8002d90 <__sinit+0x28>)
 8002d7e:	6223      	str	r3, [r4, #32]
 8002d80:	4b04      	ldr	r3, [pc, #16]	@ (8002d94 <__sinit+0x2c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f5      	bne.n	8002d74 <__sinit+0xc>
 8002d88:	f7ff ffc4 	bl	8002d14 <global_stdio_init.part.0>
 8002d8c:	e7f2      	b.n	8002d74 <__sinit+0xc>
 8002d8e:	bf00      	nop
 8002d90:	08002cd5 	.word	0x08002cd5
 8002d94:	20000870 	.word	0x20000870

08002d98 <fiprintf>:
 8002d98:	b40e      	push	{r1, r2, r3}
 8002d9a:	b503      	push	{r0, r1, lr}
 8002d9c:	4601      	mov	r1, r0
 8002d9e:	ab03      	add	r3, sp, #12
 8002da0:	4805      	ldr	r0, [pc, #20]	@ (8002db8 <fiprintf+0x20>)
 8002da2:	f853 2b04 	ldr.w	r2, [r3], #4
 8002da6:	6800      	ldr	r0, [r0, #0]
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	f000 fa17 	bl	80031dc <_vfiprintf_r>
 8002dae:	b002      	add	sp, #8
 8002db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002db4:	b003      	add	sp, #12
 8002db6:	4770      	bx	lr
 8002db8:	200000b8 	.word	0x200000b8

08002dbc <_fwalk_sglue>:
 8002dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dc0:	4607      	mov	r7, r0
 8002dc2:	4688      	mov	r8, r1
 8002dc4:	4614      	mov	r4, r2
 8002dc6:	2600      	movs	r6, #0
 8002dc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002dcc:	f1b9 0901 	subs.w	r9, r9, #1
 8002dd0:	d505      	bpl.n	8002dde <_fwalk_sglue+0x22>
 8002dd2:	6824      	ldr	r4, [r4, #0]
 8002dd4:	2c00      	cmp	r4, #0
 8002dd6:	d1f7      	bne.n	8002dc8 <_fwalk_sglue+0xc>
 8002dd8:	4630      	mov	r0, r6
 8002dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002dde:	89ab      	ldrh	r3, [r5, #12]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d907      	bls.n	8002df4 <_fwalk_sglue+0x38>
 8002de4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002de8:	3301      	adds	r3, #1
 8002dea:	d003      	beq.n	8002df4 <_fwalk_sglue+0x38>
 8002dec:	4629      	mov	r1, r5
 8002dee:	4638      	mov	r0, r7
 8002df0:	47c0      	blx	r8
 8002df2:	4306      	orrs	r6, r0
 8002df4:	3568      	adds	r5, #104	@ 0x68
 8002df6:	e7e9      	b.n	8002dcc <_fwalk_sglue+0x10>

08002df8 <__sread>:
 8002df8:	b510      	push	{r4, lr}
 8002dfa:	460c      	mov	r4, r1
 8002dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e00:	f000 f876 	bl	8002ef0 <_read_r>
 8002e04:	2800      	cmp	r0, #0
 8002e06:	bfab      	itete	ge
 8002e08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e0a:	89a3      	ldrhlt	r3, [r4, #12]
 8002e0c:	181b      	addge	r3, r3, r0
 8002e0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e12:	bfac      	ite	ge
 8002e14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e16:	81a3      	strhlt	r3, [r4, #12]
 8002e18:	bd10      	pop	{r4, pc}

08002e1a <__swrite>:
 8002e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e1e:	461f      	mov	r7, r3
 8002e20:	898b      	ldrh	r3, [r1, #12]
 8002e22:	4605      	mov	r5, r0
 8002e24:	05db      	lsls	r3, r3, #23
 8002e26:	460c      	mov	r4, r1
 8002e28:	4616      	mov	r6, r2
 8002e2a:	d505      	bpl.n	8002e38 <__swrite+0x1e>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e34:	f000 f84a 	bl	8002ecc <_lseek_r>
 8002e38:	89a3      	ldrh	r3, [r4, #12]
 8002e3a:	4632      	mov	r2, r6
 8002e3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e40:	81a3      	strh	r3, [r4, #12]
 8002e42:	4628      	mov	r0, r5
 8002e44:	463b      	mov	r3, r7
 8002e46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e4e:	f000 b861 	b.w	8002f14 <_write_r>

08002e52 <__sseek>:
 8002e52:	b510      	push	{r4, lr}
 8002e54:	460c      	mov	r4, r1
 8002e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e5a:	f000 f837 	bl	8002ecc <_lseek_r>
 8002e5e:	1c43      	adds	r3, r0, #1
 8002e60:	89a3      	ldrh	r3, [r4, #12]
 8002e62:	bf15      	itete	ne
 8002e64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002e66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002e6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002e6e:	81a3      	strheq	r3, [r4, #12]
 8002e70:	bf18      	it	ne
 8002e72:	81a3      	strhne	r3, [r4, #12]
 8002e74:	bd10      	pop	{r4, pc}

08002e76 <__sclose>:
 8002e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e7a:	f000 b817 	b.w	8002eac <_close_r>

08002e7e <memset>:
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4402      	add	r2, r0
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d100      	bne.n	8002e88 <memset+0xa>
 8002e86:	4770      	bx	lr
 8002e88:	f803 1b01 	strb.w	r1, [r3], #1
 8002e8c:	e7f9      	b.n	8002e82 <memset+0x4>

08002e8e <strcat>:
 8002e8e:	4602      	mov	r2, r0
 8002e90:	b510      	push	{r4, lr}
 8002e92:	7814      	ldrb	r4, [r2, #0]
 8002e94:	4613      	mov	r3, r2
 8002e96:	3201      	adds	r2, #1
 8002e98:	2c00      	cmp	r4, #0
 8002e9a:	d1fa      	bne.n	8002e92 <strcat+0x4>
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ea2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ea6:	2a00      	cmp	r2, #0
 8002ea8:	d1f9      	bne.n	8002e9e <strcat+0x10>
 8002eaa:	bd10      	pop	{r4, pc}

08002eac <_close_r>:
 8002eac:	b538      	push	{r3, r4, r5, lr}
 8002eae:	2300      	movs	r3, #0
 8002eb0:	4d05      	ldr	r5, [pc, #20]	@ (8002ec8 <_close_r+0x1c>)
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	4608      	mov	r0, r1
 8002eb6:	602b      	str	r3, [r5, #0]
 8002eb8:	f7fe f9b3 	bl	8001222 <_close>
 8002ebc:	1c43      	adds	r3, r0, #1
 8002ebe:	d102      	bne.n	8002ec6 <_close_r+0x1a>
 8002ec0:	682b      	ldr	r3, [r5, #0]
 8002ec2:	b103      	cbz	r3, 8002ec6 <_close_r+0x1a>
 8002ec4:	6023      	str	r3, [r4, #0]
 8002ec6:	bd38      	pop	{r3, r4, r5, pc}
 8002ec8:	20000874 	.word	0x20000874

08002ecc <_lseek_r>:
 8002ecc:	b538      	push	{r3, r4, r5, lr}
 8002ece:	4604      	mov	r4, r0
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	4d05      	ldr	r5, [pc, #20]	@ (8002eec <_lseek_r+0x20>)
 8002ed8:	602a      	str	r2, [r5, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	f7fe f9c5 	bl	800126a <_lseek>
 8002ee0:	1c43      	adds	r3, r0, #1
 8002ee2:	d102      	bne.n	8002eea <_lseek_r+0x1e>
 8002ee4:	682b      	ldr	r3, [r5, #0]
 8002ee6:	b103      	cbz	r3, 8002eea <_lseek_r+0x1e>
 8002ee8:	6023      	str	r3, [r4, #0]
 8002eea:	bd38      	pop	{r3, r4, r5, pc}
 8002eec:	20000874 	.word	0x20000874

08002ef0 <_read_r>:
 8002ef0:	b538      	push	{r3, r4, r5, lr}
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	4608      	mov	r0, r1
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	2200      	movs	r2, #0
 8002efa:	4d05      	ldr	r5, [pc, #20]	@ (8002f10 <_read_r+0x20>)
 8002efc:	602a      	str	r2, [r5, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f7fe f956 	bl	80011b0 <_read>
 8002f04:	1c43      	adds	r3, r0, #1
 8002f06:	d102      	bne.n	8002f0e <_read_r+0x1e>
 8002f08:	682b      	ldr	r3, [r5, #0]
 8002f0a:	b103      	cbz	r3, 8002f0e <_read_r+0x1e>
 8002f0c:	6023      	str	r3, [r4, #0]
 8002f0e:	bd38      	pop	{r3, r4, r5, pc}
 8002f10:	20000874 	.word	0x20000874

08002f14 <_write_r>:
 8002f14:	b538      	push	{r3, r4, r5, lr}
 8002f16:	4604      	mov	r4, r0
 8002f18:	4608      	mov	r0, r1
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	4d05      	ldr	r5, [pc, #20]	@ (8002f34 <_write_r+0x20>)
 8002f20:	602a      	str	r2, [r5, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	f7fe f961 	bl	80011ea <_write>
 8002f28:	1c43      	adds	r3, r0, #1
 8002f2a:	d102      	bne.n	8002f32 <_write_r+0x1e>
 8002f2c:	682b      	ldr	r3, [r5, #0]
 8002f2e:	b103      	cbz	r3, 8002f32 <_write_r+0x1e>
 8002f30:	6023      	str	r3, [r4, #0]
 8002f32:	bd38      	pop	{r3, r4, r5, pc}
 8002f34:	20000874 	.word	0x20000874

08002f38 <__errno>:
 8002f38:	4b01      	ldr	r3, [pc, #4]	@ (8002f40 <__errno+0x8>)
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	200000b8 	.word	0x200000b8

08002f44 <__libc_init_array>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	2600      	movs	r6, #0
 8002f48:	4d0c      	ldr	r5, [pc, #48]	@ (8002f7c <__libc_init_array+0x38>)
 8002f4a:	4c0d      	ldr	r4, [pc, #52]	@ (8002f80 <__libc_init_array+0x3c>)
 8002f4c:	1b64      	subs	r4, r4, r5
 8002f4e:	10a4      	asrs	r4, r4, #2
 8002f50:	42a6      	cmp	r6, r4
 8002f52:	d109      	bne.n	8002f68 <__libc_init_array+0x24>
 8002f54:	f000 fe0e 	bl	8003b74 <_init>
 8002f58:	2600      	movs	r6, #0
 8002f5a:	4d0a      	ldr	r5, [pc, #40]	@ (8002f84 <__libc_init_array+0x40>)
 8002f5c:	4c0a      	ldr	r4, [pc, #40]	@ (8002f88 <__libc_init_array+0x44>)
 8002f5e:	1b64      	subs	r4, r4, r5
 8002f60:	10a4      	asrs	r4, r4, #2
 8002f62:	42a6      	cmp	r6, r4
 8002f64:	d105      	bne.n	8002f72 <__libc_init_array+0x2e>
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
 8002f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f6c:	4798      	blx	r3
 8002f6e:	3601      	adds	r6, #1
 8002f70:	e7ee      	b.n	8002f50 <__libc_init_array+0xc>
 8002f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f76:	4798      	blx	r3
 8002f78:	3601      	adds	r6, #1
 8002f7a:	e7f2      	b.n	8002f62 <__libc_init_array+0x1e>
 8002f7c:	08003dbc 	.word	0x08003dbc
 8002f80:	08003dbc 	.word	0x08003dbc
 8002f84:	08003dbc 	.word	0x08003dbc
 8002f88:	08003dc0 	.word	0x08003dc0

08002f8c <__retarget_lock_init_recursive>:
 8002f8c:	4770      	bx	lr

08002f8e <__retarget_lock_acquire_recursive>:
 8002f8e:	4770      	bx	lr

08002f90 <__retarget_lock_release_recursive>:
 8002f90:	4770      	bx	lr

08002f92 <abort>:
 8002f92:	2006      	movs	r0, #6
 8002f94:	b508      	push	{r3, lr}
 8002f96:	f000 fd2f 	bl	80039f8 <raise>
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	f7fe f8fd 	bl	800119a <_exit>

08002fa0 <_free_r>:
 8002fa0:	b538      	push	{r3, r4, r5, lr}
 8002fa2:	4605      	mov	r5, r0
 8002fa4:	2900      	cmp	r1, #0
 8002fa6:	d040      	beq.n	800302a <_free_r+0x8a>
 8002fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fac:	1f0c      	subs	r4, r1, #4
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bfb8      	it	lt
 8002fb2:	18e4      	addlt	r4, r4, r3
 8002fb4:	f000 f8de 	bl	8003174 <__malloc_lock>
 8002fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800302c <_free_r+0x8c>)
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	b933      	cbnz	r3, 8002fcc <_free_r+0x2c>
 8002fbe:	6063      	str	r3, [r4, #4]
 8002fc0:	6014      	str	r4, [r2, #0]
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fc8:	f000 b8da 	b.w	8003180 <__malloc_unlock>
 8002fcc:	42a3      	cmp	r3, r4
 8002fce:	d908      	bls.n	8002fe2 <_free_r+0x42>
 8002fd0:	6820      	ldr	r0, [r4, #0]
 8002fd2:	1821      	adds	r1, r4, r0
 8002fd4:	428b      	cmp	r3, r1
 8002fd6:	bf01      	itttt	eq
 8002fd8:	6819      	ldreq	r1, [r3, #0]
 8002fda:	685b      	ldreq	r3, [r3, #4]
 8002fdc:	1809      	addeq	r1, r1, r0
 8002fde:	6021      	streq	r1, [r4, #0]
 8002fe0:	e7ed      	b.n	8002fbe <_free_r+0x1e>
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	b10b      	cbz	r3, 8002fec <_free_r+0x4c>
 8002fe8:	42a3      	cmp	r3, r4
 8002fea:	d9fa      	bls.n	8002fe2 <_free_r+0x42>
 8002fec:	6811      	ldr	r1, [r2, #0]
 8002fee:	1850      	adds	r0, r2, r1
 8002ff0:	42a0      	cmp	r0, r4
 8002ff2:	d10b      	bne.n	800300c <_free_r+0x6c>
 8002ff4:	6820      	ldr	r0, [r4, #0]
 8002ff6:	4401      	add	r1, r0
 8002ff8:	1850      	adds	r0, r2, r1
 8002ffa:	4283      	cmp	r3, r0
 8002ffc:	6011      	str	r1, [r2, #0]
 8002ffe:	d1e0      	bne.n	8002fc2 <_free_r+0x22>
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4408      	add	r0, r1
 8003006:	6010      	str	r0, [r2, #0]
 8003008:	6053      	str	r3, [r2, #4]
 800300a:	e7da      	b.n	8002fc2 <_free_r+0x22>
 800300c:	d902      	bls.n	8003014 <_free_r+0x74>
 800300e:	230c      	movs	r3, #12
 8003010:	602b      	str	r3, [r5, #0]
 8003012:	e7d6      	b.n	8002fc2 <_free_r+0x22>
 8003014:	6820      	ldr	r0, [r4, #0]
 8003016:	1821      	adds	r1, r4, r0
 8003018:	428b      	cmp	r3, r1
 800301a:	bf01      	itttt	eq
 800301c:	6819      	ldreq	r1, [r3, #0]
 800301e:	685b      	ldreq	r3, [r3, #4]
 8003020:	1809      	addeq	r1, r1, r0
 8003022:	6021      	streq	r1, [r4, #0]
 8003024:	6063      	str	r3, [r4, #4]
 8003026:	6054      	str	r4, [r2, #4]
 8003028:	e7cb      	b.n	8002fc2 <_free_r+0x22>
 800302a:	bd38      	pop	{r3, r4, r5, pc}
 800302c:	20000880 	.word	0x20000880

08003030 <sbrk_aligned>:
 8003030:	b570      	push	{r4, r5, r6, lr}
 8003032:	4e0f      	ldr	r6, [pc, #60]	@ (8003070 <sbrk_aligned+0x40>)
 8003034:	460c      	mov	r4, r1
 8003036:	6831      	ldr	r1, [r6, #0]
 8003038:	4605      	mov	r5, r0
 800303a:	b911      	cbnz	r1, 8003042 <sbrk_aligned+0x12>
 800303c:	f000 fcf8 	bl	8003a30 <_sbrk_r>
 8003040:	6030      	str	r0, [r6, #0]
 8003042:	4621      	mov	r1, r4
 8003044:	4628      	mov	r0, r5
 8003046:	f000 fcf3 	bl	8003a30 <_sbrk_r>
 800304a:	1c43      	adds	r3, r0, #1
 800304c:	d103      	bne.n	8003056 <sbrk_aligned+0x26>
 800304e:	f04f 34ff 	mov.w	r4, #4294967295
 8003052:	4620      	mov	r0, r4
 8003054:	bd70      	pop	{r4, r5, r6, pc}
 8003056:	1cc4      	adds	r4, r0, #3
 8003058:	f024 0403 	bic.w	r4, r4, #3
 800305c:	42a0      	cmp	r0, r4
 800305e:	d0f8      	beq.n	8003052 <sbrk_aligned+0x22>
 8003060:	1a21      	subs	r1, r4, r0
 8003062:	4628      	mov	r0, r5
 8003064:	f000 fce4 	bl	8003a30 <_sbrk_r>
 8003068:	3001      	adds	r0, #1
 800306a:	d1f2      	bne.n	8003052 <sbrk_aligned+0x22>
 800306c:	e7ef      	b.n	800304e <sbrk_aligned+0x1e>
 800306e:	bf00      	nop
 8003070:	2000087c 	.word	0x2000087c

08003074 <_malloc_r>:
 8003074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003078:	1ccd      	adds	r5, r1, #3
 800307a:	f025 0503 	bic.w	r5, r5, #3
 800307e:	3508      	adds	r5, #8
 8003080:	2d0c      	cmp	r5, #12
 8003082:	bf38      	it	cc
 8003084:	250c      	movcc	r5, #12
 8003086:	2d00      	cmp	r5, #0
 8003088:	4606      	mov	r6, r0
 800308a:	db01      	blt.n	8003090 <_malloc_r+0x1c>
 800308c:	42a9      	cmp	r1, r5
 800308e:	d904      	bls.n	800309a <_malloc_r+0x26>
 8003090:	230c      	movs	r3, #12
 8003092:	6033      	str	r3, [r6, #0]
 8003094:	2000      	movs	r0, #0
 8003096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800309a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003170 <_malloc_r+0xfc>
 800309e:	f000 f869 	bl	8003174 <__malloc_lock>
 80030a2:	f8d8 3000 	ldr.w	r3, [r8]
 80030a6:	461c      	mov	r4, r3
 80030a8:	bb44      	cbnz	r4, 80030fc <_malloc_r+0x88>
 80030aa:	4629      	mov	r1, r5
 80030ac:	4630      	mov	r0, r6
 80030ae:	f7ff ffbf 	bl	8003030 <sbrk_aligned>
 80030b2:	1c43      	adds	r3, r0, #1
 80030b4:	4604      	mov	r4, r0
 80030b6:	d158      	bne.n	800316a <_malloc_r+0xf6>
 80030b8:	f8d8 4000 	ldr.w	r4, [r8]
 80030bc:	4627      	mov	r7, r4
 80030be:	2f00      	cmp	r7, #0
 80030c0:	d143      	bne.n	800314a <_malloc_r+0xd6>
 80030c2:	2c00      	cmp	r4, #0
 80030c4:	d04b      	beq.n	800315e <_malloc_r+0xea>
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	4639      	mov	r1, r7
 80030ca:	4630      	mov	r0, r6
 80030cc:	eb04 0903 	add.w	r9, r4, r3
 80030d0:	f000 fcae 	bl	8003a30 <_sbrk_r>
 80030d4:	4581      	cmp	r9, r0
 80030d6:	d142      	bne.n	800315e <_malloc_r+0xea>
 80030d8:	6821      	ldr	r1, [r4, #0]
 80030da:	4630      	mov	r0, r6
 80030dc:	1a6d      	subs	r5, r5, r1
 80030de:	4629      	mov	r1, r5
 80030e0:	f7ff ffa6 	bl	8003030 <sbrk_aligned>
 80030e4:	3001      	adds	r0, #1
 80030e6:	d03a      	beq.n	800315e <_malloc_r+0xea>
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	442b      	add	r3, r5
 80030ec:	6023      	str	r3, [r4, #0]
 80030ee:	f8d8 3000 	ldr.w	r3, [r8]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	bb62      	cbnz	r2, 8003150 <_malloc_r+0xdc>
 80030f6:	f8c8 7000 	str.w	r7, [r8]
 80030fa:	e00f      	b.n	800311c <_malloc_r+0xa8>
 80030fc:	6822      	ldr	r2, [r4, #0]
 80030fe:	1b52      	subs	r2, r2, r5
 8003100:	d420      	bmi.n	8003144 <_malloc_r+0xd0>
 8003102:	2a0b      	cmp	r2, #11
 8003104:	d917      	bls.n	8003136 <_malloc_r+0xc2>
 8003106:	1961      	adds	r1, r4, r5
 8003108:	42a3      	cmp	r3, r4
 800310a:	6025      	str	r5, [r4, #0]
 800310c:	bf18      	it	ne
 800310e:	6059      	strne	r1, [r3, #4]
 8003110:	6863      	ldr	r3, [r4, #4]
 8003112:	bf08      	it	eq
 8003114:	f8c8 1000 	streq.w	r1, [r8]
 8003118:	5162      	str	r2, [r4, r5]
 800311a:	604b      	str	r3, [r1, #4]
 800311c:	4630      	mov	r0, r6
 800311e:	f000 f82f 	bl	8003180 <__malloc_unlock>
 8003122:	f104 000b 	add.w	r0, r4, #11
 8003126:	1d23      	adds	r3, r4, #4
 8003128:	f020 0007 	bic.w	r0, r0, #7
 800312c:	1ac2      	subs	r2, r0, r3
 800312e:	bf1c      	itt	ne
 8003130:	1a1b      	subne	r3, r3, r0
 8003132:	50a3      	strne	r3, [r4, r2]
 8003134:	e7af      	b.n	8003096 <_malloc_r+0x22>
 8003136:	6862      	ldr	r2, [r4, #4]
 8003138:	42a3      	cmp	r3, r4
 800313a:	bf0c      	ite	eq
 800313c:	f8c8 2000 	streq.w	r2, [r8]
 8003140:	605a      	strne	r2, [r3, #4]
 8003142:	e7eb      	b.n	800311c <_malloc_r+0xa8>
 8003144:	4623      	mov	r3, r4
 8003146:	6864      	ldr	r4, [r4, #4]
 8003148:	e7ae      	b.n	80030a8 <_malloc_r+0x34>
 800314a:	463c      	mov	r4, r7
 800314c:	687f      	ldr	r7, [r7, #4]
 800314e:	e7b6      	b.n	80030be <_malloc_r+0x4a>
 8003150:	461a      	mov	r2, r3
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	42a3      	cmp	r3, r4
 8003156:	d1fb      	bne.n	8003150 <_malloc_r+0xdc>
 8003158:	2300      	movs	r3, #0
 800315a:	6053      	str	r3, [r2, #4]
 800315c:	e7de      	b.n	800311c <_malloc_r+0xa8>
 800315e:	230c      	movs	r3, #12
 8003160:	4630      	mov	r0, r6
 8003162:	6033      	str	r3, [r6, #0]
 8003164:	f000 f80c 	bl	8003180 <__malloc_unlock>
 8003168:	e794      	b.n	8003094 <_malloc_r+0x20>
 800316a:	6005      	str	r5, [r0, #0]
 800316c:	e7d6      	b.n	800311c <_malloc_r+0xa8>
 800316e:	bf00      	nop
 8003170:	20000880 	.word	0x20000880

08003174 <__malloc_lock>:
 8003174:	4801      	ldr	r0, [pc, #4]	@ (800317c <__malloc_lock+0x8>)
 8003176:	f7ff bf0a 	b.w	8002f8e <__retarget_lock_acquire_recursive>
 800317a:	bf00      	nop
 800317c:	20000878 	.word	0x20000878

08003180 <__malloc_unlock>:
 8003180:	4801      	ldr	r0, [pc, #4]	@ (8003188 <__malloc_unlock+0x8>)
 8003182:	f7ff bf05 	b.w	8002f90 <__retarget_lock_release_recursive>
 8003186:	bf00      	nop
 8003188:	20000878 	.word	0x20000878

0800318c <__sfputc_r>:
 800318c:	6893      	ldr	r3, [r2, #8]
 800318e:	b410      	push	{r4}
 8003190:	3b01      	subs	r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	6093      	str	r3, [r2, #8]
 8003196:	da07      	bge.n	80031a8 <__sfputc_r+0x1c>
 8003198:	6994      	ldr	r4, [r2, #24]
 800319a:	42a3      	cmp	r3, r4
 800319c:	db01      	blt.n	80031a2 <__sfputc_r+0x16>
 800319e:	290a      	cmp	r1, #10
 80031a0:	d102      	bne.n	80031a8 <__sfputc_r+0x1c>
 80031a2:	bc10      	pop	{r4}
 80031a4:	f000 bb6c 	b.w	8003880 <__swbuf_r>
 80031a8:	6813      	ldr	r3, [r2, #0]
 80031aa:	1c58      	adds	r0, r3, #1
 80031ac:	6010      	str	r0, [r2, #0]
 80031ae:	7019      	strb	r1, [r3, #0]
 80031b0:	4608      	mov	r0, r1
 80031b2:	bc10      	pop	{r4}
 80031b4:	4770      	bx	lr

080031b6 <__sfputs_r>:
 80031b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b8:	4606      	mov	r6, r0
 80031ba:	460f      	mov	r7, r1
 80031bc:	4614      	mov	r4, r2
 80031be:	18d5      	adds	r5, r2, r3
 80031c0:	42ac      	cmp	r4, r5
 80031c2:	d101      	bne.n	80031c8 <__sfputs_r+0x12>
 80031c4:	2000      	movs	r0, #0
 80031c6:	e007      	b.n	80031d8 <__sfputs_r+0x22>
 80031c8:	463a      	mov	r2, r7
 80031ca:	4630      	mov	r0, r6
 80031cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031d0:	f7ff ffdc 	bl	800318c <__sfputc_r>
 80031d4:	1c43      	adds	r3, r0, #1
 80031d6:	d1f3      	bne.n	80031c0 <__sfputs_r+0xa>
 80031d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080031dc <_vfiprintf_r>:
 80031dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e0:	460d      	mov	r5, r1
 80031e2:	4614      	mov	r4, r2
 80031e4:	4698      	mov	r8, r3
 80031e6:	4606      	mov	r6, r0
 80031e8:	b09d      	sub	sp, #116	@ 0x74
 80031ea:	b118      	cbz	r0, 80031f4 <_vfiprintf_r+0x18>
 80031ec:	6a03      	ldr	r3, [r0, #32]
 80031ee:	b90b      	cbnz	r3, 80031f4 <_vfiprintf_r+0x18>
 80031f0:	f7ff fdba 	bl	8002d68 <__sinit>
 80031f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80031f6:	07d9      	lsls	r1, r3, #31
 80031f8:	d405      	bmi.n	8003206 <_vfiprintf_r+0x2a>
 80031fa:	89ab      	ldrh	r3, [r5, #12]
 80031fc:	059a      	lsls	r2, r3, #22
 80031fe:	d402      	bmi.n	8003206 <_vfiprintf_r+0x2a>
 8003200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003202:	f7ff fec4 	bl	8002f8e <__retarget_lock_acquire_recursive>
 8003206:	89ab      	ldrh	r3, [r5, #12]
 8003208:	071b      	lsls	r3, r3, #28
 800320a:	d501      	bpl.n	8003210 <_vfiprintf_r+0x34>
 800320c:	692b      	ldr	r3, [r5, #16]
 800320e:	b99b      	cbnz	r3, 8003238 <_vfiprintf_r+0x5c>
 8003210:	4629      	mov	r1, r5
 8003212:	4630      	mov	r0, r6
 8003214:	f000 fb72 	bl	80038fc <__swsetup_r>
 8003218:	b170      	cbz	r0, 8003238 <_vfiprintf_r+0x5c>
 800321a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800321c:	07dc      	lsls	r4, r3, #31
 800321e:	d504      	bpl.n	800322a <_vfiprintf_r+0x4e>
 8003220:	f04f 30ff 	mov.w	r0, #4294967295
 8003224:	b01d      	add	sp, #116	@ 0x74
 8003226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800322a:	89ab      	ldrh	r3, [r5, #12]
 800322c:	0598      	lsls	r0, r3, #22
 800322e:	d4f7      	bmi.n	8003220 <_vfiprintf_r+0x44>
 8003230:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003232:	f7ff fead 	bl	8002f90 <__retarget_lock_release_recursive>
 8003236:	e7f3      	b.n	8003220 <_vfiprintf_r+0x44>
 8003238:	2300      	movs	r3, #0
 800323a:	9309      	str	r3, [sp, #36]	@ 0x24
 800323c:	2320      	movs	r3, #32
 800323e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003242:	2330      	movs	r3, #48	@ 0x30
 8003244:	f04f 0901 	mov.w	r9, #1
 8003248:	f8cd 800c 	str.w	r8, [sp, #12]
 800324c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80033f8 <_vfiprintf_r+0x21c>
 8003250:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003254:	4623      	mov	r3, r4
 8003256:	469a      	mov	sl, r3
 8003258:	f813 2b01 	ldrb.w	r2, [r3], #1
 800325c:	b10a      	cbz	r2, 8003262 <_vfiprintf_r+0x86>
 800325e:	2a25      	cmp	r2, #37	@ 0x25
 8003260:	d1f9      	bne.n	8003256 <_vfiprintf_r+0x7a>
 8003262:	ebba 0b04 	subs.w	fp, sl, r4
 8003266:	d00b      	beq.n	8003280 <_vfiprintf_r+0xa4>
 8003268:	465b      	mov	r3, fp
 800326a:	4622      	mov	r2, r4
 800326c:	4629      	mov	r1, r5
 800326e:	4630      	mov	r0, r6
 8003270:	f7ff ffa1 	bl	80031b6 <__sfputs_r>
 8003274:	3001      	adds	r0, #1
 8003276:	f000 80a7 	beq.w	80033c8 <_vfiprintf_r+0x1ec>
 800327a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800327c:	445a      	add	r2, fp
 800327e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003280:	f89a 3000 	ldrb.w	r3, [sl]
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 809f 	beq.w	80033c8 <_vfiprintf_r+0x1ec>
 800328a:	2300      	movs	r3, #0
 800328c:	f04f 32ff 	mov.w	r2, #4294967295
 8003290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003294:	f10a 0a01 	add.w	sl, sl, #1
 8003298:	9304      	str	r3, [sp, #16]
 800329a:	9307      	str	r3, [sp, #28]
 800329c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80032a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80032a2:	4654      	mov	r4, sl
 80032a4:	2205      	movs	r2, #5
 80032a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032aa:	4853      	ldr	r0, [pc, #332]	@ (80033f8 <_vfiprintf_r+0x21c>)
 80032ac:	f000 fbd0 	bl	8003a50 <memchr>
 80032b0:	9a04      	ldr	r2, [sp, #16]
 80032b2:	b9d8      	cbnz	r0, 80032ec <_vfiprintf_r+0x110>
 80032b4:	06d1      	lsls	r1, r2, #27
 80032b6:	bf44      	itt	mi
 80032b8:	2320      	movmi	r3, #32
 80032ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032be:	0713      	lsls	r3, r2, #28
 80032c0:	bf44      	itt	mi
 80032c2:	232b      	movmi	r3, #43	@ 0x2b
 80032c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032c8:	f89a 3000 	ldrb.w	r3, [sl]
 80032cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80032ce:	d015      	beq.n	80032fc <_vfiprintf_r+0x120>
 80032d0:	4654      	mov	r4, sl
 80032d2:	2000      	movs	r0, #0
 80032d4:	f04f 0c0a 	mov.w	ip, #10
 80032d8:	9a07      	ldr	r2, [sp, #28]
 80032da:	4621      	mov	r1, r4
 80032dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032e0:	3b30      	subs	r3, #48	@ 0x30
 80032e2:	2b09      	cmp	r3, #9
 80032e4:	d94b      	bls.n	800337e <_vfiprintf_r+0x1a2>
 80032e6:	b1b0      	cbz	r0, 8003316 <_vfiprintf_r+0x13a>
 80032e8:	9207      	str	r2, [sp, #28]
 80032ea:	e014      	b.n	8003316 <_vfiprintf_r+0x13a>
 80032ec:	eba0 0308 	sub.w	r3, r0, r8
 80032f0:	fa09 f303 	lsl.w	r3, r9, r3
 80032f4:	4313      	orrs	r3, r2
 80032f6:	46a2      	mov	sl, r4
 80032f8:	9304      	str	r3, [sp, #16]
 80032fa:	e7d2      	b.n	80032a2 <_vfiprintf_r+0xc6>
 80032fc:	9b03      	ldr	r3, [sp, #12]
 80032fe:	1d19      	adds	r1, r3, #4
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	9103      	str	r1, [sp, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	bfbb      	ittet	lt
 8003308:	425b      	neglt	r3, r3
 800330a:	f042 0202 	orrlt.w	r2, r2, #2
 800330e:	9307      	strge	r3, [sp, #28]
 8003310:	9307      	strlt	r3, [sp, #28]
 8003312:	bfb8      	it	lt
 8003314:	9204      	strlt	r2, [sp, #16]
 8003316:	7823      	ldrb	r3, [r4, #0]
 8003318:	2b2e      	cmp	r3, #46	@ 0x2e
 800331a:	d10a      	bne.n	8003332 <_vfiprintf_r+0x156>
 800331c:	7863      	ldrb	r3, [r4, #1]
 800331e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003320:	d132      	bne.n	8003388 <_vfiprintf_r+0x1ac>
 8003322:	9b03      	ldr	r3, [sp, #12]
 8003324:	3402      	adds	r4, #2
 8003326:	1d1a      	adds	r2, r3, #4
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	9203      	str	r2, [sp, #12]
 800332c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003330:	9305      	str	r3, [sp, #20]
 8003332:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80033fc <_vfiprintf_r+0x220>
 8003336:	2203      	movs	r2, #3
 8003338:	4650      	mov	r0, sl
 800333a:	7821      	ldrb	r1, [r4, #0]
 800333c:	f000 fb88 	bl	8003a50 <memchr>
 8003340:	b138      	cbz	r0, 8003352 <_vfiprintf_r+0x176>
 8003342:	2240      	movs	r2, #64	@ 0x40
 8003344:	9b04      	ldr	r3, [sp, #16]
 8003346:	eba0 000a 	sub.w	r0, r0, sl
 800334a:	4082      	lsls	r2, r0
 800334c:	4313      	orrs	r3, r2
 800334e:	3401      	adds	r4, #1
 8003350:	9304      	str	r3, [sp, #16]
 8003352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003356:	2206      	movs	r2, #6
 8003358:	4829      	ldr	r0, [pc, #164]	@ (8003400 <_vfiprintf_r+0x224>)
 800335a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800335e:	f000 fb77 	bl	8003a50 <memchr>
 8003362:	2800      	cmp	r0, #0
 8003364:	d03f      	beq.n	80033e6 <_vfiprintf_r+0x20a>
 8003366:	4b27      	ldr	r3, [pc, #156]	@ (8003404 <_vfiprintf_r+0x228>)
 8003368:	bb1b      	cbnz	r3, 80033b2 <_vfiprintf_r+0x1d6>
 800336a:	9b03      	ldr	r3, [sp, #12]
 800336c:	3307      	adds	r3, #7
 800336e:	f023 0307 	bic.w	r3, r3, #7
 8003372:	3308      	adds	r3, #8
 8003374:	9303      	str	r3, [sp, #12]
 8003376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003378:	443b      	add	r3, r7
 800337a:	9309      	str	r3, [sp, #36]	@ 0x24
 800337c:	e76a      	b.n	8003254 <_vfiprintf_r+0x78>
 800337e:	460c      	mov	r4, r1
 8003380:	2001      	movs	r0, #1
 8003382:	fb0c 3202 	mla	r2, ip, r2, r3
 8003386:	e7a8      	b.n	80032da <_vfiprintf_r+0xfe>
 8003388:	2300      	movs	r3, #0
 800338a:	f04f 0c0a 	mov.w	ip, #10
 800338e:	4619      	mov	r1, r3
 8003390:	3401      	adds	r4, #1
 8003392:	9305      	str	r3, [sp, #20]
 8003394:	4620      	mov	r0, r4
 8003396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800339a:	3a30      	subs	r2, #48	@ 0x30
 800339c:	2a09      	cmp	r2, #9
 800339e:	d903      	bls.n	80033a8 <_vfiprintf_r+0x1cc>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0c6      	beq.n	8003332 <_vfiprintf_r+0x156>
 80033a4:	9105      	str	r1, [sp, #20]
 80033a6:	e7c4      	b.n	8003332 <_vfiprintf_r+0x156>
 80033a8:	4604      	mov	r4, r0
 80033aa:	2301      	movs	r3, #1
 80033ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80033b0:	e7f0      	b.n	8003394 <_vfiprintf_r+0x1b8>
 80033b2:	ab03      	add	r3, sp, #12
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	462a      	mov	r2, r5
 80033b8:	4630      	mov	r0, r6
 80033ba:	4b13      	ldr	r3, [pc, #76]	@ (8003408 <_vfiprintf_r+0x22c>)
 80033bc:	a904      	add	r1, sp, #16
 80033be:	f3af 8000 	nop.w
 80033c2:	4607      	mov	r7, r0
 80033c4:	1c78      	adds	r0, r7, #1
 80033c6:	d1d6      	bne.n	8003376 <_vfiprintf_r+0x19a>
 80033c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80033ca:	07d9      	lsls	r1, r3, #31
 80033cc:	d405      	bmi.n	80033da <_vfiprintf_r+0x1fe>
 80033ce:	89ab      	ldrh	r3, [r5, #12]
 80033d0:	059a      	lsls	r2, r3, #22
 80033d2:	d402      	bmi.n	80033da <_vfiprintf_r+0x1fe>
 80033d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80033d6:	f7ff fddb 	bl	8002f90 <__retarget_lock_release_recursive>
 80033da:	89ab      	ldrh	r3, [r5, #12]
 80033dc:	065b      	lsls	r3, r3, #25
 80033de:	f53f af1f 	bmi.w	8003220 <_vfiprintf_r+0x44>
 80033e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80033e4:	e71e      	b.n	8003224 <_vfiprintf_r+0x48>
 80033e6:	ab03      	add	r3, sp, #12
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	462a      	mov	r2, r5
 80033ec:	4630      	mov	r0, r6
 80033ee:	4b06      	ldr	r3, [pc, #24]	@ (8003408 <_vfiprintf_r+0x22c>)
 80033f0:	a904      	add	r1, sp, #16
 80033f2:	f000 f87d 	bl	80034f0 <_printf_i>
 80033f6:	e7e4      	b.n	80033c2 <_vfiprintf_r+0x1e6>
 80033f8:	08003d7f 	.word	0x08003d7f
 80033fc:	08003d85 	.word	0x08003d85
 8003400:	08003d89 	.word	0x08003d89
 8003404:	00000000 	.word	0x00000000
 8003408:	080031b7 	.word	0x080031b7

0800340c <_printf_common>:
 800340c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003410:	4616      	mov	r6, r2
 8003412:	4698      	mov	r8, r3
 8003414:	688a      	ldr	r2, [r1, #8]
 8003416:	690b      	ldr	r3, [r1, #16]
 8003418:	4607      	mov	r7, r0
 800341a:	4293      	cmp	r3, r2
 800341c:	bfb8      	it	lt
 800341e:	4613      	movlt	r3, r2
 8003420:	6033      	str	r3, [r6, #0]
 8003422:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003426:	460c      	mov	r4, r1
 8003428:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800342c:	b10a      	cbz	r2, 8003432 <_printf_common+0x26>
 800342e:	3301      	adds	r3, #1
 8003430:	6033      	str	r3, [r6, #0]
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	0699      	lsls	r1, r3, #26
 8003436:	bf42      	ittt	mi
 8003438:	6833      	ldrmi	r3, [r6, #0]
 800343a:	3302      	addmi	r3, #2
 800343c:	6033      	strmi	r3, [r6, #0]
 800343e:	6825      	ldr	r5, [r4, #0]
 8003440:	f015 0506 	ands.w	r5, r5, #6
 8003444:	d106      	bne.n	8003454 <_printf_common+0x48>
 8003446:	f104 0a19 	add.w	sl, r4, #25
 800344a:	68e3      	ldr	r3, [r4, #12]
 800344c:	6832      	ldr	r2, [r6, #0]
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	42ab      	cmp	r3, r5
 8003452:	dc2b      	bgt.n	80034ac <_printf_common+0xa0>
 8003454:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003458:	6822      	ldr	r2, [r4, #0]
 800345a:	3b00      	subs	r3, #0
 800345c:	bf18      	it	ne
 800345e:	2301      	movne	r3, #1
 8003460:	0692      	lsls	r2, r2, #26
 8003462:	d430      	bmi.n	80034c6 <_printf_common+0xba>
 8003464:	4641      	mov	r1, r8
 8003466:	4638      	mov	r0, r7
 8003468:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800346c:	47c8      	blx	r9
 800346e:	3001      	adds	r0, #1
 8003470:	d023      	beq.n	80034ba <_printf_common+0xae>
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	6922      	ldr	r2, [r4, #16]
 8003476:	f003 0306 	and.w	r3, r3, #6
 800347a:	2b04      	cmp	r3, #4
 800347c:	bf14      	ite	ne
 800347e:	2500      	movne	r5, #0
 8003480:	6833      	ldreq	r3, [r6, #0]
 8003482:	f04f 0600 	mov.w	r6, #0
 8003486:	bf08      	it	eq
 8003488:	68e5      	ldreq	r5, [r4, #12]
 800348a:	f104 041a 	add.w	r4, r4, #26
 800348e:	bf08      	it	eq
 8003490:	1aed      	subeq	r5, r5, r3
 8003492:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003496:	bf08      	it	eq
 8003498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800349c:	4293      	cmp	r3, r2
 800349e:	bfc4      	itt	gt
 80034a0:	1a9b      	subgt	r3, r3, r2
 80034a2:	18ed      	addgt	r5, r5, r3
 80034a4:	42b5      	cmp	r5, r6
 80034a6:	d11a      	bne.n	80034de <_printf_common+0xd2>
 80034a8:	2000      	movs	r0, #0
 80034aa:	e008      	b.n	80034be <_printf_common+0xb2>
 80034ac:	2301      	movs	r3, #1
 80034ae:	4652      	mov	r2, sl
 80034b0:	4641      	mov	r1, r8
 80034b2:	4638      	mov	r0, r7
 80034b4:	47c8      	blx	r9
 80034b6:	3001      	adds	r0, #1
 80034b8:	d103      	bne.n	80034c2 <_printf_common+0xb6>
 80034ba:	f04f 30ff 	mov.w	r0, #4294967295
 80034be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034c2:	3501      	adds	r5, #1
 80034c4:	e7c1      	b.n	800344a <_printf_common+0x3e>
 80034c6:	2030      	movs	r0, #48	@ 0x30
 80034c8:	18e1      	adds	r1, r4, r3
 80034ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034d4:	4422      	add	r2, r4
 80034d6:	3302      	adds	r3, #2
 80034d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034dc:	e7c2      	b.n	8003464 <_printf_common+0x58>
 80034de:	2301      	movs	r3, #1
 80034e0:	4622      	mov	r2, r4
 80034e2:	4641      	mov	r1, r8
 80034e4:	4638      	mov	r0, r7
 80034e6:	47c8      	blx	r9
 80034e8:	3001      	adds	r0, #1
 80034ea:	d0e6      	beq.n	80034ba <_printf_common+0xae>
 80034ec:	3601      	adds	r6, #1
 80034ee:	e7d9      	b.n	80034a4 <_printf_common+0x98>

080034f0 <_printf_i>:
 80034f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034f4:	7e0f      	ldrb	r7, [r1, #24]
 80034f6:	4691      	mov	r9, r2
 80034f8:	2f78      	cmp	r7, #120	@ 0x78
 80034fa:	4680      	mov	r8, r0
 80034fc:	460c      	mov	r4, r1
 80034fe:	469a      	mov	sl, r3
 8003500:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003502:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003506:	d807      	bhi.n	8003518 <_printf_i+0x28>
 8003508:	2f62      	cmp	r7, #98	@ 0x62
 800350a:	d80a      	bhi.n	8003522 <_printf_i+0x32>
 800350c:	2f00      	cmp	r7, #0
 800350e:	f000 80d3 	beq.w	80036b8 <_printf_i+0x1c8>
 8003512:	2f58      	cmp	r7, #88	@ 0x58
 8003514:	f000 80ba 	beq.w	800368c <_printf_i+0x19c>
 8003518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800351c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003520:	e03a      	b.n	8003598 <_printf_i+0xa8>
 8003522:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003526:	2b15      	cmp	r3, #21
 8003528:	d8f6      	bhi.n	8003518 <_printf_i+0x28>
 800352a:	a101      	add	r1, pc, #4	@ (adr r1, 8003530 <_printf_i+0x40>)
 800352c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003530:	08003589 	.word	0x08003589
 8003534:	0800359d 	.word	0x0800359d
 8003538:	08003519 	.word	0x08003519
 800353c:	08003519 	.word	0x08003519
 8003540:	08003519 	.word	0x08003519
 8003544:	08003519 	.word	0x08003519
 8003548:	0800359d 	.word	0x0800359d
 800354c:	08003519 	.word	0x08003519
 8003550:	08003519 	.word	0x08003519
 8003554:	08003519 	.word	0x08003519
 8003558:	08003519 	.word	0x08003519
 800355c:	0800369f 	.word	0x0800369f
 8003560:	080035c7 	.word	0x080035c7
 8003564:	08003659 	.word	0x08003659
 8003568:	08003519 	.word	0x08003519
 800356c:	08003519 	.word	0x08003519
 8003570:	080036c1 	.word	0x080036c1
 8003574:	08003519 	.word	0x08003519
 8003578:	080035c7 	.word	0x080035c7
 800357c:	08003519 	.word	0x08003519
 8003580:	08003519 	.word	0x08003519
 8003584:	08003661 	.word	0x08003661
 8003588:	6833      	ldr	r3, [r6, #0]
 800358a:	1d1a      	adds	r2, r3, #4
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6032      	str	r2, [r6, #0]
 8003590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003594:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003598:	2301      	movs	r3, #1
 800359a:	e09e      	b.n	80036da <_printf_i+0x1ea>
 800359c:	6833      	ldr	r3, [r6, #0]
 800359e:	6820      	ldr	r0, [r4, #0]
 80035a0:	1d19      	adds	r1, r3, #4
 80035a2:	6031      	str	r1, [r6, #0]
 80035a4:	0606      	lsls	r6, r0, #24
 80035a6:	d501      	bpl.n	80035ac <_printf_i+0xbc>
 80035a8:	681d      	ldr	r5, [r3, #0]
 80035aa:	e003      	b.n	80035b4 <_printf_i+0xc4>
 80035ac:	0645      	lsls	r5, r0, #25
 80035ae:	d5fb      	bpl.n	80035a8 <_printf_i+0xb8>
 80035b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035b4:	2d00      	cmp	r5, #0
 80035b6:	da03      	bge.n	80035c0 <_printf_i+0xd0>
 80035b8:	232d      	movs	r3, #45	@ 0x2d
 80035ba:	426d      	negs	r5, r5
 80035bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035c0:	230a      	movs	r3, #10
 80035c2:	4859      	ldr	r0, [pc, #356]	@ (8003728 <_printf_i+0x238>)
 80035c4:	e011      	b.n	80035ea <_printf_i+0xfa>
 80035c6:	6821      	ldr	r1, [r4, #0]
 80035c8:	6833      	ldr	r3, [r6, #0]
 80035ca:	0608      	lsls	r0, r1, #24
 80035cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80035d0:	d402      	bmi.n	80035d8 <_printf_i+0xe8>
 80035d2:	0649      	lsls	r1, r1, #25
 80035d4:	bf48      	it	mi
 80035d6:	b2ad      	uxthmi	r5, r5
 80035d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80035da:	6033      	str	r3, [r6, #0]
 80035dc:	bf14      	ite	ne
 80035de:	230a      	movne	r3, #10
 80035e0:	2308      	moveq	r3, #8
 80035e2:	4851      	ldr	r0, [pc, #324]	@ (8003728 <_printf_i+0x238>)
 80035e4:	2100      	movs	r1, #0
 80035e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80035ea:	6866      	ldr	r6, [r4, #4]
 80035ec:	2e00      	cmp	r6, #0
 80035ee:	bfa8      	it	ge
 80035f0:	6821      	ldrge	r1, [r4, #0]
 80035f2:	60a6      	str	r6, [r4, #8]
 80035f4:	bfa4      	itt	ge
 80035f6:	f021 0104 	bicge.w	r1, r1, #4
 80035fa:	6021      	strge	r1, [r4, #0]
 80035fc:	b90d      	cbnz	r5, 8003602 <_printf_i+0x112>
 80035fe:	2e00      	cmp	r6, #0
 8003600:	d04b      	beq.n	800369a <_printf_i+0x1aa>
 8003602:	4616      	mov	r6, r2
 8003604:	fbb5 f1f3 	udiv	r1, r5, r3
 8003608:	fb03 5711 	mls	r7, r3, r1, r5
 800360c:	5dc7      	ldrb	r7, [r0, r7]
 800360e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003612:	462f      	mov	r7, r5
 8003614:	42bb      	cmp	r3, r7
 8003616:	460d      	mov	r5, r1
 8003618:	d9f4      	bls.n	8003604 <_printf_i+0x114>
 800361a:	2b08      	cmp	r3, #8
 800361c:	d10b      	bne.n	8003636 <_printf_i+0x146>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	07df      	lsls	r7, r3, #31
 8003622:	d508      	bpl.n	8003636 <_printf_i+0x146>
 8003624:	6923      	ldr	r3, [r4, #16]
 8003626:	6861      	ldr	r1, [r4, #4]
 8003628:	4299      	cmp	r1, r3
 800362a:	bfde      	ittt	le
 800362c:	2330      	movle	r3, #48	@ 0x30
 800362e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003632:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003636:	1b92      	subs	r2, r2, r6
 8003638:	6122      	str	r2, [r4, #16]
 800363a:	464b      	mov	r3, r9
 800363c:	4621      	mov	r1, r4
 800363e:	4640      	mov	r0, r8
 8003640:	f8cd a000 	str.w	sl, [sp]
 8003644:	aa03      	add	r2, sp, #12
 8003646:	f7ff fee1 	bl	800340c <_printf_common>
 800364a:	3001      	adds	r0, #1
 800364c:	d14a      	bne.n	80036e4 <_printf_i+0x1f4>
 800364e:	f04f 30ff 	mov.w	r0, #4294967295
 8003652:	b004      	add	sp, #16
 8003654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	f043 0320 	orr.w	r3, r3, #32
 800365e:	6023      	str	r3, [r4, #0]
 8003660:	2778      	movs	r7, #120	@ 0x78
 8003662:	4832      	ldr	r0, [pc, #200]	@ (800372c <_printf_i+0x23c>)
 8003664:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	6831      	ldr	r1, [r6, #0]
 800366c:	061f      	lsls	r7, r3, #24
 800366e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003672:	d402      	bmi.n	800367a <_printf_i+0x18a>
 8003674:	065f      	lsls	r7, r3, #25
 8003676:	bf48      	it	mi
 8003678:	b2ad      	uxthmi	r5, r5
 800367a:	6031      	str	r1, [r6, #0]
 800367c:	07d9      	lsls	r1, r3, #31
 800367e:	bf44      	itt	mi
 8003680:	f043 0320 	orrmi.w	r3, r3, #32
 8003684:	6023      	strmi	r3, [r4, #0]
 8003686:	b11d      	cbz	r5, 8003690 <_printf_i+0x1a0>
 8003688:	2310      	movs	r3, #16
 800368a:	e7ab      	b.n	80035e4 <_printf_i+0xf4>
 800368c:	4826      	ldr	r0, [pc, #152]	@ (8003728 <_printf_i+0x238>)
 800368e:	e7e9      	b.n	8003664 <_printf_i+0x174>
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	f023 0320 	bic.w	r3, r3, #32
 8003696:	6023      	str	r3, [r4, #0]
 8003698:	e7f6      	b.n	8003688 <_printf_i+0x198>
 800369a:	4616      	mov	r6, r2
 800369c:	e7bd      	b.n	800361a <_printf_i+0x12a>
 800369e:	6833      	ldr	r3, [r6, #0]
 80036a0:	6825      	ldr	r5, [r4, #0]
 80036a2:	1d18      	adds	r0, r3, #4
 80036a4:	6961      	ldr	r1, [r4, #20]
 80036a6:	6030      	str	r0, [r6, #0]
 80036a8:	062e      	lsls	r6, r5, #24
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	d501      	bpl.n	80036b2 <_printf_i+0x1c2>
 80036ae:	6019      	str	r1, [r3, #0]
 80036b0:	e002      	b.n	80036b8 <_printf_i+0x1c8>
 80036b2:	0668      	lsls	r0, r5, #25
 80036b4:	d5fb      	bpl.n	80036ae <_printf_i+0x1be>
 80036b6:	8019      	strh	r1, [r3, #0]
 80036b8:	2300      	movs	r3, #0
 80036ba:	4616      	mov	r6, r2
 80036bc:	6123      	str	r3, [r4, #16]
 80036be:	e7bc      	b.n	800363a <_printf_i+0x14a>
 80036c0:	6833      	ldr	r3, [r6, #0]
 80036c2:	2100      	movs	r1, #0
 80036c4:	1d1a      	adds	r2, r3, #4
 80036c6:	6032      	str	r2, [r6, #0]
 80036c8:	681e      	ldr	r6, [r3, #0]
 80036ca:	6862      	ldr	r2, [r4, #4]
 80036cc:	4630      	mov	r0, r6
 80036ce:	f000 f9bf 	bl	8003a50 <memchr>
 80036d2:	b108      	cbz	r0, 80036d8 <_printf_i+0x1e8>
 80036d4:	1b80      	subs	r0, r0, r6
 80036d6:	6060      	str	r0, [r4, #4]
 80036d8:	6863      	ldr	r3, [r4, #4]
 80036da:	6123      	str	r3, [r4, #16]
 80036dc:	2300      	movs	r3, #0
 80036de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036e2:	e7aa      	b.n	800363a <_printf_i+0x14a>
 80036e4:	4632      	mov	r2, r6
 80036e6:	4649      	mov	r1, r9
 80036e8:	4640      	mov	r0, r8
 80036ea:	6923      	ldr	r3, [r4, #16]
 80036ec:	47d0      	blx	sl
 80036ee:	3001      	adds	r0, #1
 80036f0:	d0ad      	beq.n	800364e <_printf_i+0x15e>
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	079b      	lsls	r3, r3, #30
 80036f6:	d413      	bmi.n	8003720 <_printf_i+0x230>
 80036f8:	68e0      	ldr	r0, [r4, #12]
 80036fa:	9b03      	ldr	r3, [sp, #12]
 80036fc:	4298      	cmp	r0, r3
 80036fe:	bfb8      	it	lt
 8003700:	4618      	movlt	r0, r3
 8003702:	e7a6      	b.n	8003652 <_printf_i+0x162>
 8003704:	2301      	movs	r3, #1
 8003706:	4632      	mov	r2, r6
 8003708:	4649      	mov	r1, r9
 800370a:	4640      	mov	r0, r8
 800370c:	47d0      	blx	sl
 800370e:	3001      	adds	r0, #1
 8003710:	d09d      	beq.n	800364e <_printf_i+0x15e>
 8003712:	3501      	adds	r5, #1
 8003714:	68e3      	ldr	r3, [r4, #12]
 8003716:	9903      	ldr	r1, [sp, #12]
 8003718:	1a5b      	subs	r3, r3, r1
 800371a:	42ab      	cmp	r3, r5
 800371c:	dcf2      	bgt.n	8003704 <_printf_i+0x214>
 800371e:	e7eb      	b.n	80036f8 <_printf_i+0x208>
 8003720:	2500      	movs	r5, #0
 8003722:	f104 0619 	add.w	r6, r4, #25
 8003726:	e7f5      	b.n	8003714 <_printf_i+0x224>
 8003728:	08003d90 	.word	0x08003d90
 800372c:	08003da1 	.word	0x08003da1

08003730 <__sflush_r>:
 8003730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	0716      	lsls	r6, r2, #28
 8003738:	4605      	mov	r5, r0
 800373a:	460c      	mov	r4, r1
 800373c:	d454      	bmi.n	80037e8 <__sflush_r+0xb8>
 800373e:	684b      	ldr	r3, [r1, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	dc02      	bgt.n	800374a <__sflush_r+0x1a>
 8003744:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	dd48      	ble.n	80037dc <__sflush_r+0xac>
 800374a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800374c:	2e00      	cmp	r6, #0
 800374e:	d045      	beq.n	80037dc <__sflush_r+0xac>
 8003750:	2300      	movs	r3, #0
 8003752:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003756:	682f      	ldr	r7, [r5, #0]
 8003758:	6a21      	ldr	r1, [r4, #32]
 800375a:	602b      	str	r3, [r5, #0]
 800375c:	d030      	beq.n	80037c0 <__sflush_r+0x90>
 800375e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003760:	89a3      	ldrh	r3, [r4, #12]
 8003762:	0759      	lsls	r1, r3, #29
 8003764:	d505      	bpl.n	8003772 <__sflush_r+0x42>
 8003766:	6863      	ldr	r3, [r4, #4]
 8003768:	1ad2      	subs	r2, r2, r3
 800376a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800376c:	b10b      	cbz	r3, 8003772 <__sflush_r+0x42>
 800376e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003770:	1ad2      	subs	r2, r2, r3
 8003772:	2300      	movs	r3, #0
 8003774:	4628      	mov	r0, r5
 8003776:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003778:	6a21      	ldr	r1, [r4, #32]
 800377a:	47b0      	blx	r6
 800377c:	1c43      	adds	r3, r0, #1
 800377e:	89a3      	ldrh	r3, [r4, #12]
 8003780:	d106      	bne.n	8003790 <__sflush_r+0x60>
 8003782:	6829      	ldr	r1, [r5, #0]
 8003784:	291d      	cmp	r1, #29
 8003786:	d82b      	bhi.n	80037e0 <__sflush_r+0xb0>
 8003788:	4a28      	ldr	r2, [pc, #160]	@ (800382c <__sflush_r+0xfc>)
 800378a:	410a      	asrs	r2, r1
 800378c:	07d6      	lsls	r6, r2, #31
 800378e:	d427      	bmi.n	80037e0 <__sflush_r+0xb0>
 8003790:	2200      	movs	r2, #0
 8003792:	6062      	str	r2, [r4, #4]
 8003794:	6922      	ldr	r2, [r4, #16]
 8003796:	04d9      	lsls	r1, r3, #19
 8003798:	6022      	str	r2, [r4, #0]
 800379a:	d504      	bpl.n	80037a6 <__sflush_r+0x76>
 800379c:	1c42      	adds	r2, r0, #1
 800379e:	d101      	bne.n	80037a4 <__sflush_r+0x74>
 80037a0:	682b      	ldr	r3, [r5, #0]
 80037a2:	b903      	cbnz	r3, 80037a6 <__sflush_r+0x76>
 80037a4:	6560      	str	r0, [r4, #84]	@ 0x54
 80037a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037a8:	602f      	str	r7, [r5, #0]
 80037aa:	b1b9      	cbz	r1, 80037dc <__sflush_r+0xac>
 80037ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037b0:	4299      	cmp	r1, r3
 80037b2:	d002      	beq.n	80037ba <__sflush_r+0x8a>
 80037b4:	4628      	mov	r0, r5
 80037b6:	f7ff fbf3 	bl	8002fa0 <_free_r>
 80037ba:	2300      	movs	r3, #0
 80037bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80037be:	e00d      	b.n	80037dc <__sflush_r+0xac>
 80037c0:	2301      	movs	r3, #1
 80037c2:	4628      	mov	r0, r5
 80037c4:	47b0      	blx	r6
 80037c6:	4602      	mov	r2, r0
 80037c8:	1c50      	adds	r0, r2, #1
 80037ca:	d1c9      	bne.n	8003760 <__sflush_r+0x30>
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0c6      	beq.n	8003760 <__sflush_r+0x30>
 80037d2:	2b1d      	cmp	r3, #29
 80037d4:	d001      	beq.n	80037da <__sflush_r+0xaa>
 80037d6:	2b16      	cmp	r3, #22
 80037d8:	d11d      	bne.n	8003816 <__sflush_r+0xe6>
 80037da:	602f      	str	r7, [r5, #0]
 80037dc:	2000      	movs	r0, #0
 80037de:	e021      	b.n	8003824 <__sflush_r+0xf4>
 80037e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037e4:	b21b      	sxth	r3, r3
 80037e6:	e01a      	b.n	800381e <__sflush_r+0xee>
 80037e8:	690f      	ldr	r7, [r1, #16]
 80037ea:	2f00      	cmp	r7, #0
 80037ec:	d0f6      	beq.n	80037dc <__sflush_r+0xac>
 80037ee:	0793      	lsls	r3, r2, #30
 80037f0:	bf18      	it	ne
 80037f2:	2300      	movne	r3, #0
 80037f4:	680e      	ldr	r6, [r1, #0]
 80037f6:	bf08      	it	eq
 80037f8:	694b      	ldreq	r3, [r1, #20]
 80037fa:	1bf6      	subs	r6, r6, r7
 80037fc:	600f      	str	r7, [r1, #0]
 80037fe:	608b      	str	r3, [r1, #8]
 8003800:	2e00      	cmp	r6, #0
 8003802:	ddeb      	ble.n	80037dc <__sflush_r+0xac>
 8003804:	4633      	mov	r3, r6
 8003806:	463a      	mov	r2, r7
 8003808:	4628      	mov	r0, r5
 800380a:	6a21      	ldr	r1, [r4, #32]
 800380c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003810:	47e0      	blx	ip
 8003812:	2800      	cmp	r0, #0
 8003814:	dc07      	bgt.n	8003826 <__sflush_r+0xf6>
 8003816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800381a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800381e:	f04f 30ff 	mov.w	r0, #4294967295
 8003822:	81a3      	strh	r3, [r4, #12]
 8003824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003826:	4407      	add	r7, r0
 8003828:	1a36      	subs	r6, r6, r0
 800382a:	e7e9      	b.n	8003800 <__sflush_r+0xd0>
 800382c:	dfbffffe 	.word	0xdfbffffe

08003830 <_fflush_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	690b      	ldr	r3, [r1, #16]
 8003834:	4605      	mov	r5, r0
 8003836:	460c      	mov	r4, r1
 8003838:	b913      	cbnz	r3, 8003840 <_fflush_r+0x10>
 800383a:	2500      	movs	r5, #0
 800383c:	4628      	mov	r0, r5
 800383e:	bd38      	pop	{r3, r4, r5, pc}
 8003840:	b118      	cbz	r0, 800384a <_fflush_r+0x1a>
 8003842:	6a03      	ldr	r3, [r0, #32]
 8003844:	b90b      	cbnz	r3, 800384a <_fflush_r+0x1a>
 8003846:	f7ff fa8f 	bl	8002d68 <__sinit>
 800384a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f3      	beq.n	800383a <_fflush_r+0xa>
 8003852:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003854:	07d0      	lsls	r0, r2, #31
 8003856:	d404      	bmi.n	8003862 <_fflush_r+0x32>
 8003858:	0599      	lsls	r1, r3, #22
 800385a:	d402      	bmi.n	8003862 <_fflush_r+0x32>
 800385c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800385e:	f7ff fb96 	bl	8002f8e <__retarget_lock_acquire_recursive>
 8003862:	4628      	mov	r0, r5
 8003864:	4621      	mov	r1, r4
 8003866:	f7ff ff63 	bl	8003730 <__sflush_r>
 800386a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800386c:	4605      	mov	r5, r0
 800386e:	07da      	lsls	r2, r3, #31
 8003870:	d4e4      	bmi.n	800383c <_fflush_r+0xc>
 8003872:	89a3      	ldrh	r3, [r4, #12]
 8003874:	059b      	lsls	r3, r3, #22
 8003876:	d4e1      	bmi.n	800383c <_fflush_r+0xc>
 8003878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800387a:	f7ff fb89 	bl	8002f90 <__retarget_lock_release_recursive>
 800387e:	e7dd      	b.n	800383c <_fflush_r+0xc>

08003880 <__swbuf_r>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	460e      	mov	r6, r1
 8003884:	4614      	mov	r4, r2
 8003886:	4605      	mov	r5, r0
 8003888:	b118      	cbz	r0, 8003892 <__swbuf_r+0x12>
 800388a:	6a03      	ldr	r3, [r0, #32]
 800388c:	b90b      	cbnz	r3, 8003892 <__swbuf_r+0x12>
 800388e:	f7ff fa6b 	bl	8002d68 <__sinit>
 8003892:	69a3      	ldr	r3, [r4, #24]
 8003894:	60a3      	str	r3, [r4, #8]
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	071a      	lsls	r2, r3, #28
 800389a:	d501      	bpl.n	80038a0 <__swbuf_r+0x20>
 800389c:	6923      	ldr	r3, [r4, #16]
 800389e:	b943      	cbnz	r3, 80038b2 <__swbuf_r+0x32>
 80038a0:	4621      	mov	r1, r4
 80038a2:	4628      	mov	r0, r5
 80038a4:	f000 f82a 	bl	80038fc <__swsetup_r>
 80038a8:	b118      	cbz	r0, 80038b2 <__swbuf_r+0x32>
 80038aa:	f04f 37ff 	mov.w	r7, #4294967295
 80038ae:	4638      	mov	r0, r7
 80038b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	6922      	ldr	r2, [r4, #16]
 80038b6:	b2f6      	uxtb	r6, r6
 80038b8:	1a98      	subs	r0, r3, r2
 80038ba:	6963      	ldr	r3, [r4, #20]
 80038bc:	4637      	mov	r7, r6
 80038be:	4283      	cmp	r3, r0
 80038c0:	dc05      	bgt.n	80038ce <__swbuf_r+0x4e>
 80038c2:	4621      	mov	r1, r4
 80038c4:	4628      	mov	r0, r5
 80038c6:	f7ff ffb3 	bl	8003830 <_fflush_r>
 80038ca:	2800      	cmp	r0, #0
 80038cc:	d1ed      	bne.n	80038aa <__swbuf_r+0x2a>
 80038ce:	68a3      	ldr	r3, [r4, #8]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	60a3      	str	r3, [r4, #8]
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	6022      	str	r2, [r4, #0]
 80038da:	701e      	strb	r6, [r3, #0]
 80038dc:	6962      	ldr	r2, [r4, #20]
 80038de:	1c43      	adds	r3, r0, #1
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d004      	beq.n	80038ee <__swbuf_r+0x6e>
 80038e4:	89a3      	ldrh	r3, [r4, #12]
 80038e6:	07db      	lsls	r3, r3, #31
 80038e8:	d5e1      	bpl.n	80038ae <__swbuf_r+0x2e>
 80038ea:	2e0a      	cmp	r6, #10
 80038ec:	d1df      	bne.n	80038ae <__swbuf_r+0x2e>
 80038ee:	4621      	mov	r1, r4
 80038f0:	4628      	mov	r0, r5
 80038f2:	f7ff ff9d 	bl	8003830 <_fflush_r>
 80038f6:	2800      	cmp	r0, #0
 80038f8:	d0d9      	beq.n	80038ae <__swbuf_r+0x2e>
 80038fa:	e7d6      	b.n	80038aa <__swbuf_r+0x2a>

080038fc <__swsetup_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	4b29      	ldr	r3, [pc, #164]	@ (80039a4 <__swsetup_r+0xa8>)
 8003900:	4605      	mov	r5, r0
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	460c      	mov	r4, r1
 8003906:	b118      	cbz	r0, 8003910 <__swsetup_r+0x14>
 8003908:	6a03      	ldr	r3, [r0, #32]
 800390a:	b90b      	cbnz	r3, 8003910 <__swsetup_r+0x14>
 800390c:	f7ff fa2c 	bl	8002d68 <__sinit>
 8003910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003914:	0719      	lsls	r1, r3, #28
 8003916:	d422      	bmi.n	800395e <__swsetup_r+0x62>
 8003918:	06da      	lsls	r2, r3, #27
 800391a:	d407      	bmi.n	800392c <__swsetup_r+0x30>
 800391c:	2209      	movs	r2, #9
 800391e:	602a      	str	r2, [r5, #0]
 8003920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	81a3      	strh	r3, [r4, #12]
 800392a:	e033      	b.n	8003994 <__swsetup_r+0x98>
 800392c:	0758      	lsls	r0, r3, #29
 800392e:	d512      	bpl.n	8003956 <__swsetup_r+0x5a>
 8003930:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003932:	b141      	cbz	r1, 8003946 <__swsetup_r+0x4a>
 8003934:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003938:	4299      	cmp	r1, r3
 800393a:	d002      	beq.n	8003942 <__swsetup_r+0x46>
 800393c:	4628      	mov	r0, r5
 800393e:	f7ff fb2f 	bl	8002fa0 <_free_r>
 8003942:	2300      	movs	r3, #0
 8003944:	6363      	str	r3, [r4, #52]	@ 0x34
 8003946:	89a3      	ldrh	r3, [r4, #12]
 8003948:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800394c:	81a3      	strh	r3, [r4, #12]
 800394e:	2300      	movs	r3, #0
 8003950:	6063      	str	r3, [r4, #4]
 8003952:	6923      	ldr	r3, [r4, #16]
 8003954:	6023      	str	r3, [r4, #0]
 8003956:	89a3      	ldrh	r3, [r4, #12]
 8003958:	f043 0308 	orr.w	r3, r3, #8
 800395c:	81a3      	strh	r3, [r4, #12]
 800395e:	6923      	ldr	r3, [r4, #16]
 8003960:	b94b      	cbnz	r3, 8003976 <__swsetup_r+0x7a>
 8003962:	89a3      	ldrh	r3, [r4, #12]
 8003964:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800396c:	d003      	beq.n	8003976 <__swsetup_r+0x7a>
 800396e:	4621      	mov	r1, r4
 8003970:	4628      	mov	r0, r5
 8003972:	f000 f8a0 	bl	8003ab6 <__smakebuf_r>
 8003976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800397a:	f013 0201 	ands.w	r2, r3, #1
 800397e:	d00a      	beq.n	8003996 <__swsetup_r+0x9a>
 8003980:	2200      	movs	r2, #0
 8003982:	60a2      	str	r2, [r4, #8]
 8003984:	6962      	ldr	r2, [r4, #20]
 8003986:	4252      	negs	r2, r2
 8003988:	61a2      	str	r2, [r4, #24]
 800398a:	6922      	ldr	r2, [r4, #16]
 800398c:	b942      	cbnz	r2, 80039a0 <__swsetup_r+0xa4>
 800398e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003992:	d1c5      	bne.n	8003920 <__swsetup_r+0x24>
 8003994:	bd38      	pop	{r3, r4, r5, pc}
 8003996:	0799      	lsls	r1, r3, #30
 8003998:	bf58      	it	pl
 800399a:	6962      	ldrpl	r2, [r4, #20]
 800399c:	60a2      	str	r2, [r4, #8]
 800399e:	e7f4      	b.n	800398a <__swsetup_r+0x8e>
 80039a0:	2000      	movs	r0, #0
 80039a2:	e7f7      	b.n	8003994 <__swsetup_r+0x98>
 80039a4:	200000b8 	.word	0x200000b8

080039a8 <_raise_r>:
 80039a8:	291f      	cmp	r1, #31
 80039aa:	b538      	push	{r3, r4, r5, lr}
 80039ac:	4605      	mov	r5, r0
 80039ae:	460c      	mov	r4, r1
 80039b0:	d904      	bls.n	80039bc <_raise_r+0x14>
 80039b2:	2316      	movs	r3, #22
 80039b4:	6003      	str	r3, [r0, #0]
 80039b6:	f04f 30ff 	mov.w	r0, #4294967295
 80039ba:	bd38      	pop	{r3, r4, r5, pc}
 80039bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80039be:	b112      	cbz	r2, 80039c6 <_raise_r+0x1e>
 80039c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80039c4:	b94b      	cbnz	r3, 80039da <_raise_r+0x32>
 80039c6:	4628      	mov	r0, r5
 80039c8:	f000 f830 	bl	8003a2c <_getpid_r>
 80039cc:	4622      	mov	r2, r4
 80039ce:	4601      	mov	r1, r0
 80039d0:	4628      	mov	r0, r5
 80039d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039d6:	f000 b817 	b.w	8003a08 <_kill_r>
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d00a      	beq.n	80039f4 <_raise_r+0x4c>
 80039de:	1c59      	adds	r1, r3, #1
 80039e0:	d103      	bne.n	80039ea <_raise_r+0x42>
 80039e2:	2316      	movs	r3, #22
 80039e4:	6003      	str	r3, [r0, #0]
 80039e6:	2001      	movs	r0, #1
 80039e8:	e7e7      	b.n	80039ba <_raise_r+0x12>
 80039ea:	2100      	movs	r1, #0
 80039ec:	4620      	mov	r0, r4
 80039ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80039f2:	4798      	blx	r3
 80039f4:	2000      	movs	r0, #0
 80039f6:	e7e0      	b.n	80039ba <_raise_r+0x12>

080039f8 <raise>:
 80039f8:	4b02      	ldr	r3, [pc, #8]	@ (8003a04 <raise+0xc>)
 80039fa:	4601      	mov	r1, r0
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	f7ff bfd3 	b.w	80039a8 <_raise_r>
 8003a02:	bf00      	nop
 8003a04:	200000b8 	.word	0x200000b8

08003a08 <_kill_r>:
 8003a08:	b538      	push	{r3, r4, r5, lr}
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	4d06      	ldr	r5, [pc, #24]	@ (8003a28 <_kill_r+0x20>)
 8003a0e:	4604      	mov	r4, r0
 8003a10:	4608      	mov	r0, r1
 8003a12:	4611      	mov	r1, r2
 8003a14:	602b      	str	r3, [r5, #0]
 8003a16:	f7fd fbb0 	bl	800117a <_kill>
 8003a1a:	1c43      	adds	r3, r0, #1
 8003a1c:	d102      	bne.n	8003a24 <_kill_r+0x1c>
 8003a1e:	682b      	ldr	r3, [r5, #0]
 8003a20:	b103      	cbz	r3, 8003a24 <_kill_r+0x1c>
 8003a22:	6023      	str	r3, [r4, #0]
 8003a24:	bd38      	pop	{r3, r4, r5, pc}
 8003a26:	bf00      	nop
 8003a28:	20000874 	.word	0x20000874

08003a2c <_getpid_r>:
 8003a2c:	f7fd bb9e 	b.w	800116c <_getpid>

08003a30 <_sbrk_r>:
 8003a30:	b538      	push	{r3, r4, r5, lr}
 8003a32:	2300      	movs	r3, #0
 8003a34:	4d05      	ldr	r5, [pc, #20]	@ (8003a4c <_sbrk_r+0x1c>)
 8003a36:	4604      	mov	r4, r0
 8003a38:	4608      	mov	r0, r1
 8003a3a:	602b      	str	r3, [r5, #0]
 8003a3c:	f7fd fc22 	bl	8001284 <_sbrk>
 8003a40:	1c43      	adds	r3, r0, #1
 8003a42:	d102      	bne.n	8003a4a <_sbrk_r+0x1a>
 8003a44:	682b      	ldr	r3, [r5, #0]
 8003a46:	b103      	cbz	r3, 8003a4a <_sbrk_r+0x1a>
 8003a48:	6023      	str	r3, [r4, #0]
 8003a4a:	bd38      	pop	{r3, r4, r5, pc}
 8003a4c:	20000874 	.word	0x20000874

08003a50 <memchr>:
 8003a50:	4603      	mov	r3, r0
 8003a52:	b510      	push	{r4, lr}
 8003a54:	b2c9      	uxtb	r1, r1
 8003a56:	4402      	add	r2, r0
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	d101      	bne.n	8003a62 <memchr+0x12>
 8003a5e:	2000      	movs	r0, #0
 8003a60:	e003      	b.n	8003a6a <memchr+0x1a>
 8003a62:	7804      	ldrb	r4, [r0, #0]
 8003a64:	3301      	adds	r3, #1
 8003a66:	428c      	cmp	r4, r1
 8003a68:	d1f6      	bne.n	8003a58 <memchr+0x8>
 8003a6a:	bd10      	pop	{r4, pc}

08003a6c <__swhatbuf_r>:
 8003a6c:	b570      	push	{r4, r5, r6, lr}
 8003a6e:	460c      	mov	r4, r1
 8003a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a74:	4615      	mov	r5, r2
 8003a76:	2900      	cmp	r1, #0
 8003a78:	461e      	mov	r6, r3
 8003a7a:	b096      	sub	sp, #88	@ 0x58
 8003a7c:	da0c      	bge.n	8003a98 <__swhatbuf_r+0x2c>
 8003a7e:	89a3      	ldrh	r3, [r4, #12]
 8003a80:	2100      	movs	r1, #0
 8003a82:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003a86:	bf14      	ite	ne
 8003a88:	2340      	movne	r3, #64	@ 0x40
 8003a8a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003a8e:	2000      	movs	r0, #0
 8003a90:	6031      	str	r1, [r6, #0]
 8003a92:	602b      	str	r3, [r5, #0]
 8003a94:	b016      	add	sp, #88	@ 0x58
 8003a96:	bd70      	pop	{r4, r5, r6, pc}
 8003a98:	466a      	mov	r2, sp
 8003a9a:	f000 f849 	bl	8003b30 <_fstat_r>
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	dbed      	blt.n	8003a7e <__swhatbuf_r+0x12>
 8003aa2:	9901      	ldr	r1, [sp, #4]
 8003aa4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003aa8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003aac:	4259      	negs	r1, r3
 8003aae:	4159      	adcs	r1, r3
 8003ab0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ab4:	e7eb      	b.n	8003a8e <__swhatbuf_r+0x22>

08003ab6 <__smakebuf_r>:
 8003ab6:	898b      	ldrh	r3, [r1, #12]
 8003ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003aba:	079d      	lsls	r5, r3, #30
 8003abc:	4606      	mov	r6, r0
 8003abe:	460c      	mov	r4, r1
 8003ac0:	d507      	bpl.n	8003ad2 <__smakebuf_r+0x1c>
 8003ac2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003ac6:	6023      	str	r3, [r4, #0]
 8003ac8:	6123      	str	r3, [r4, #16]
 8003aca:	2301      	movs	r3, #1
 8003acc:	6163      	str	r3, [r4, #20]
 8003ace:	b003      	add	sp, #12
 8003ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad2:	466a      	mov	r2, sp
 8003ad4:	ab01      	add	r3, sp, #4
 8003ad6:	f7ff ffc9 	bl	8003a6c <__swhatbuf_r>
 8003ada:	9f00      	ldr	r7, [sp, #0]
 8003adc:	4605      	mov	r5, r0
 8003ade:	4639      	mov	r1, r7
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	f7ff fac7 	bl	8003074 <_malloc_r>
 8003ae6:	b948      	cbnz	r0, 8003afc <__smakebuf_r+0x46>
 8003ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aec:	059a      	lsls	r2, r3, #22
 8003aee:	d4ee      	bmi.n	8003ace <__smakebuf_r+0x18>
 8003af0:	f023 0303 	bic.w	r3, r3, #3
 8003af4:	f043 0302 	orr.w	r3, r3, #2
 8003af8:	81a3      	strh	r3, [r4, #12]
 8003afa:	e7e2      	b.n	8003ac2 <__smakebuf_r+0xc>
 8003afc:	89a3      	ldrh	r3, [r4, #12]
 8003afe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b06:	81a3      	strh	r3, [r4, #12]
 8003b08:	9b01      	ldr	r3, [sp, #4]
 8003b0a:	6020      	str	r0, [r4, #0]
 8003b0c:	b15b      	cbz	r3, 8003b26 <__smakebuf_r+0x70>
 8003b0e:	4630      	mov	r0, r6
 8003b10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b14:	f000 f81e 	bl	8003b54 <_isatty_r>
 8003b18:	b128      	cbz	r0, 8003b26 <__smakebuf_r+0x70>
 8003b1a:	89a3      	ldrh	r3, [r4, #12]
 8003b1c:	f023 0303 	bic.w	r3, r3, #3
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	81a3      	strh	r3, [r4, #12]
 8003b26:	89a3      	ldrh	r3, [r4, #12]
 8003b28:	431d      	orrs	r5, r3
 8003b2a:	81a5      	strh	r5, [r4, #12]
 8003b2c:	e7cf      	b.n	8003ace <__smakebuf_r+0x18>
	...

08003b30 <_fstat_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	2300      	movs	r3, #0
 8003b34:	4d06      	ldr	r5, [pc, #24]	@ (8003b50 <_fstat_r+0x20>)
 8003b36:	4604      	mov	r4, r0
 8003b38:	4608      	mov	r0, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	602b      	str	r3, [r5, #0]
 8003b3e:	f7fd fb7b 	bl	8001238 <_fstat>
 8003b42:	1c43      	adds	r3, r0, #1
 8003b44:	d102      	bne.n	8003b4c <_fstat_r+0x1c>
 8003b46:	682b      	ldr	r3, [r5, #0]
 8003b48:	b103      	cbz	r3, 8003b4c <_fstat_r+0x1c>
 8003b4a:	6023      	str	r3, [r4, #0]
 8003b4c:	bd38      	pop	{r3, r4, r5, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000874 	.word	0x20000874

08003b54 <_isatty_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	2300      	movs	r3, #0
 8003b58:	4d05      	ldr	r5, [pc, #20]	@ (8003b70 <_isatty_r+0x1c>)
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	602b      	str	r3, [r5, #0]
 8003b60:	f7fd fb79 	bl	8001256 <_isatty>
 8003b64:	1c43      	adds	r3, r0, #1
 8003b66:	d102      	bne.n	8003b6e <_isatty_r+0x1a>
 8003b68:	682b      	ldr	r3, [r5, #0]
 8003b6a:	b103      	cbz	r3, 8003b6e <_isatty_r+0x1a>
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	bd38      	pop	{r3, r4, r5, pc}
 8003b70:	20000874 	.word	0x20000874

08003b74 <_init>:
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	bf00      	nop
 8003b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7a:	bc08      	pop	{r3}
 8003b7c:	469e      	mov	lr, r3
 8003b7e:	4770      	bx	lr

08003b80 <_fini>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr

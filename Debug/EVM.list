
EVM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ef4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  08008008  08008008  00009008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085b4  080085b4  0000a2a0  2**0
                  CONTENTS
  4 .ARM          00000008  080085b4  080085b4  000095b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085bc  080085bc  0000a2a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085bc  080085bc  000095bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085c0  080085c0  000095c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a0  20000000  080085c4  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e4  200002a0  08008864  0000a2a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a84  08008864  0000aa84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a2a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bee7  00000000  00000000  0000a2c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ece  00000000  00000000  000161b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00018080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b40  00000000  00000000  00018ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a98  00000000  00000000  00019a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8c7  00000000  00000000  000324c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d265  00000000  00000000  00041d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ceff4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005080  00000000  00000000  000cf038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000d40b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002a0 	.word	0x200002a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007fec 	.word	0x08007fec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002a4 	.word	0x200002a4
 800014c:	08007fec 	.word	0x08007fec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800103a:	4a38      	ldr	r2, [pc, #224]	@ (800111c <HD44780_Init+0xec>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001040:	4b37      	ldr	r3, [pc, #220]	@ (8001120 <HD44780_Init+0xf0>)
 8001042:	2208      	movs	r2, #8
 8001044:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001046:	4b37      	ldr	r3, [pc, #220]	@ (8001124 <HD44780_Init+0xf4>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800104c:	4b33      	ldr	r3, [pc, #204]	@ (800111c <HD44780_Init+0xec>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d907      	bls.n	8001064 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001054:	4b33      	ldr	r3, [pc, #204]	@ (8001124 <HD44780_Init+0xf4>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b31      	ldr	r3, [pc, #196]	@ (8001124 <HD44780_Init+0xf4>)
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	e006      	b.n	8001072 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001064:	4b2f      	ldr	r3, [pc, #188]	@ (8001124 <HD44780_Init+0xf4>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b2d      	ldr	r3, [pc, #180]	@ (8001124 <HD44780_Init+0xf4>)
 8001070:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8001072:	f000 f985 	bl	8001380 <DelayInit>
  HAL_Delay(50);
 8001076:	2032      	movs	r0, #50	@ 0x32
 8001078:	f001 fd48 	bl	8002b0c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800107c:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <HD44780_Init+0xf0>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f000 f943 	bl	800130c <ExpanderWrite>
  HAL_Delay(1000);
 8001086:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800108a:	f001 fd3f 	bl	8002b0c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800108e:	2030      	movs	r0, #48	@ 0x30
 8001090:	f000 f92b 	bl	80012ea <Write4Bits>
  DelayUS(4500);
 8001094:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001098:	f000 f99a 	bl	80013d0 <DelayUS>

  Write4Bits(0x03 << 4);
 800109c:	2030      	movs	r0, #48	@ 0x30
 800109e:	f000 f924 	bl	80012ea <Write4Bits>
  DelayUS(4500);
 80010a2:	f241 1094 	movw	r0, #4500	@ 0x1194
 80010a6:	f000 f993 	bl	80013d0 <DelayUS>

  Write4Bits(0x03 << 4);
 80010aa:	2030      	movs	r0, #48	@ 0x30
 80010ac:	f000 f91d 	bl	80012ea <Write4Bits>
  DelayUS(4500);
 80010b0:	f241 1094 	movw	r0, #4500	@ 0x1194
 80010b4:	f000 f98c 	bl	80013d0 <DelayUS>

  Write4Bits(0x02 << 4);
 80010b8:	2020      	movs	r0, #32
 80010ba:	f000 f916 	bl	80012ea <Write4Bits>
  DelayUS(100);
 80010be:	2064      	movs	r0, #100	@ 0x64
 80010c0:	f000 f986 	bl	80013d0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80010c4:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <HD44780_Init+0xf4>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	f043 0320 	orr.w	r3, r3, #32
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f8ce 	bl	8001270 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <HD44780_Init+0xf8>)
 80010d6:	2204      	movs	r2, #4
 80010d8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80010da:	f000 f875 	bl	80011c8 <HD44780_Display>
  HD44780_Clear();
 80010de:	f000 f82b 	bl	8001138 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80010e2:	4b12      	ldr	r3, [pc, #72]	@ (800112c <HD44780_Init+0xfc>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80010e8:	4b10      	ldr	r3, [pc, #64]	@ (800112c <HD44780_Init+0xfc>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f8bc 	bl	8001270 <SendCommand>
  DelayUS(4500);
 80010f8:	f241 1094 	movw	r0, #4500	@ 0x1194
 80010fc:	f000 f968 	bl	80013d0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001100:	490b      	ldr	r1, [pc, #44]	@ (8001130 <HD44780_Init+0x100>)
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f876 	bl	80011f4 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001108:	490a      	ldr	r1, [pc, #40]	@ (8001134 <HD44780_Init+0x104>)
 800110a:	2001      	movs	r0, #1
 800110c:	f000 f872 	bl	80011f4 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001110:	f000 f81d 	bl	800114e <HD44780_Home>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200002bf 	.word	0x200002bf
 8001120:	200002c0 	.word	0x200002c0
 8001124:	200002bc 	.word	0x200002bc
 8001128:	200002bd 	.word	0x200002bd
 800112c:	200002be 	.word	0x200002be
 8001130:	20000000 	.word	0x20000000
 8001134:	20000008 	.word	0x20000008

08001138 <HD44780_Clear>:

void HD44780_Clear()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800113c:	2001      	movs	r0, #1
 800113e:	f000 f897 	bl	8001270 <SendCommand>
  DelayUS(2000);
 8001142:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001146:	f000 f943 	bl	80013d0 <DelayUS>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}

0800114e <HD44780_Home>:

void HD44780_Home()
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8001152:	2002      	movs	r0, #2
 8001154:	f000 f88c 	bl	8001270 <SendCommand>
  DelayUS(2000);
 8001158:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800115c:	f000 f938 	bl	80013d0 <DelayUS>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	460a      	mov	r2, r1
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	4613      	mov	r3, r2
 8001172:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HD44780_SetCursor+0x5c>)
 8001176:	f107 0408 	add.w	r4, r7, #8
 800117a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HD44780_SetCursor+0x60>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	79ba      	ldrb	r2, [r7, #6]
 8001186:	429a      	cmp	r2, r3
 8001188:	d303      	bcc.n	8001192 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <HD44780_SetCursor+0x60>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	3b01      	subs	r3, #1
 8001190:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	3318      	adds	r3, #24
 8001198:	443b      	add	r3, r7
 800119a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4413      	add	r3, r2
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 f85d 	bl	8001270 <SendCommand>
}
 80011b6:	bf00      	nop
 80011b8:	371c      	adds	r7, #28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd90      	pop	{r4, r7, pc}
 80011be:	bf00      	nop
 80011c0:	08008008 	.word	0x08008008
 80011c4:	200002bf 	.word	0x200002bf

080011c8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <HD44780_Display+0x28>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HD44780_Display+0x28>)
 80011d8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80011da:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <HD44780_Display+0x28>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	f043 0308 	orr.w	r3, r3, #8
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f843 	bl	8001270 <SendCommand>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200002bd 	.word	0x200002bd

080011f4 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	b25b      	sxtb	r3, r3
 800120e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001212:	b25b      	sxtb	r3, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f82a 	bl	8001270 <SendCommand>
  for (int i=0; i<8; i++)
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	e009      	b.n	8001236 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	4413      	add	r3, r2
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f82e 	bl	800128c <SendChar>
  for (int i=0; i<8; i++)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3301      	adds	r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2b07      	cmp	r3, #7
 800123a:	ddf2      	ble.n	8001222 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800124e:	e006      	b.n	800125e <HD44780_PrintStr+0x18>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f000 f817 	bl	800128c <SendChar>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f4      	bne.n	8001250 <HD44780_PrintStr+0xa>
}
 8001266:	bf00      	nop
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f812 	bl	80012a8 <Send>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <SendChar>:

static void SendChar(uint8_t ch)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2101      	movs	r1, #1
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f804 	bl	80012a8 <Send>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	460a      	mov	r2, r1
 80012b2:	71fb      	strb	r3, [r7, #7]
 80012b4:	4613      	mov	r3, r2
 80012b6:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f023 030f 	bic.w	r3, r3, #15
 80012be:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80012c6:	7bfa      	ldrb	r2, [r7, #15]
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f80b 	bl	80012ea <Write4Bits>
  Write4Bits((lownib)|mode);
 80012d4:	7bba      	ldrb	r2, [r7, #14]
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	4313      	orrs	r3, r2
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f804 	bl	80012ea <Write4Bits>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f808 	bl	800130c <ExpanderWrite>
  PulseEnable(value);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f820 	bl	8001344 <PulseEnable>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af02      	add	r7, sp, #8
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <ExpanderWrite+0x30>)
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	4313      	orrs	r3, r2
 800131e:	b2db      	uxtb	r3, r3
 8001320:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001322:	f107 020f 	add.w	r2, r7, #15
 8001326:	230a      	movs	r3, #10
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2301      	movs	r3, #1
 800132c:	214e      	movs	r1, #78	@ 0x4e
 800132e:	4804      	ldr	r0, [pc, #16]	@ (8001340 <ExpanderWrite+0x34>)
 8001330:	f002 f82e 	bl	8003390 <HAL_I2C_Master_Transmit>
}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200002c0 	.word	0x200002c0
 8001340:	200002c4 	.word	0x200002c4

08001344 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ffd8 	bl	800130c <ExpanderWrite>
  DelayUS(20);
 800135c:	2014      	movs	r0, #20
 800135e:	f000 f837 	bl	80013d0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f023 0304 	bic.w	r3, r3, #4
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ffce 	bl	800130c <ExpanderWrite>
  DelayUS(20);
 8001370:	2014      	movs	r0, #20
 8001372:	f000 f82d 	bl	80013d0 <DelayUS>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <DelayInit>:

static void DelayInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001384:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <DelayInit+0x48>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4a0f      	ldr	r2, [pc, #60]	@ (80013c8 <DelayInit+0x48>)
 800138a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800138e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001390:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <DelayInit+0x48>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	4a0c      	ldr	r2, [pc, #48]	@ (80013c8 <DelayInit+0x48>)
 8001396:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800139a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800139c:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <DelayInit+0x4c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <DelayInit+0x4c>)
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80013a8:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <DelayInit+0x4c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a07      	ldr	r2, [pc, #28]	@ (80013cc <DelayInit+0x4c>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <DelayInit+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80013ba:	bf00      	nop
  __ASM volatile ("NOP");
 80013bc:	bf00      	nop
  __ASM volatile ("NOP");
 80013be:	bf00      	nop
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	e000edf0 	.word	0xe000edf0
 80013cc:	e0001000 	.word	0xe0001000

080013d0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80013d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <DelayUS+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001414 <DelayUS+0x44>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	0c9a      	lsrs	r2, r3, #18
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	fb02 f303 	mul.w	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <DelayUS+0x48>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <DelayUS+0x48>)
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	429a      	cmp	r2, r3
 8001402:	d8f6      	bhi.n	80013f2 <DelayUS+0x22>
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	200000b8 	.word	0x200000b8
 8001414:	431bde83 	.word	0x431bde83
 8001418:	e0001000 	.word	0xe0001000

0800141c <clear_console>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void clear_console() {
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	HD44780_Clear();
 8001420:	f7ff fe8a 	bl	8001138 <HD44780_Clear>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <show_text>:

void show_text(int x, int y, const char *text, int clear) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
	if (clear) {
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <show_text+0x18>
		clear_console();
 800143c:	f7ff ffee 	bl	800141c <clear_console>
	}

	HD44780_SetCursor(x, y);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fe8a 	bl	8001164 <HD44780_SetCursor>
	HD44780_PrintStr(text);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fef8 	bl	8001246 <HD44780_PrintStr>
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <stack_size>:
int admin_authorized = 0;

int transition_stack[100] = { 0 };
int stack_ptr = 1;

int stack_size() {
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
	return stack_ptr;
 8001464:	4b02      	ldr	r3, [pc, #8]	@ (8001470 <stack_size+0x10>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	20000010 	.word	0x20000010

08001474 <stack_top>:
int stack_top() {
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	assert(stack_size() > 0);
 8001478:	f7ff fff2 	bl	8001460 <stack_size>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	dc05      	bgt.n	800148e <stack_top+0x1a>
 8001482:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <stack_top+0x2c>)
 8001484:	4a07      	ldr	r2, [pc, #28]	@ (80014a4 <stack_top+0x30>)
 8001486:	217e      	movs	r1, #126	@ 0x7e
 8001488:	4807      	ldr	r0, [pc, #28]	@ (80014a8 <stack_top+0x34>)
 800148a:	f004 f8a9 	bl	80055e0 <__assert_func>
	return transition_stack[stack_ptr - 1];
 800148e:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <stack_top+0x38>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3b01      	subs	r3, #1
 8001494:	4a06      	ldr	r2, [pc, #24]	@ (80014b0 <stack_top+0x3c>)
 8001496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	08008018 	.word	0x08008018
 80014a4:	080081b4 	.word	0x080081b4
 80014a8:	0800802c 	.word	0x0800802c
 80014ac:	20000010 	.word	0x20000010
 80014b0:	200003a0 	.word	0x200003a0

080014b4 <stack_push>:

void stack_push(int value) {
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	transition_stack[stack_ptr++] = value;
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <stack_push+0x24>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	4905      	ldr	r1, [pc, #20]	@ (80014d8 <stack_push+0x24>)
 80014c4:	600a      	str	r2, [r1, #0]
 80014c6:	4905      	ldr	r1, [pc, #20]	@ (80014dc <stack_push+0x28>)
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	20000010 	.word	0x20000010
 80014dc:	200003a0 	.word	0x200003a0

080014e0 <stack_pop>:

void stack_pop() {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	if (stack_size() <= 1) {
 80014e4:	f7ff ffbc 	bl	8001460 <stack_size>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	dd05      	ble.n	80014fa <stack_pop+0x1a>
		return;
	}
	--stack_ptr;
 80014ee:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <stack_pop+0x20>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	4a02      	ldr	r2, [pc, #8]	@ (8001500 <stack_pop+0x20>)
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	e000      	b.n	80014fc <stack_pop+0x1c>
		return;
 80014fa:	bf00      	nop
}
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000010 	.word	0x20000010

08001504 <stack_reset>:

void stack_reset() {
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
	stack_ptr = 1;
 8001508:	4b03      	ldr	r3, [pc, #12]	@ (8001518 <stack_reset+0x14>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000010 	.word	0x20000010

0800151c <cast_vote>:
				"Voting finished", "Winner: " }, { "Temp: ", "Humidity: " } };

int counts[4];
int selected_candidate = 0;

void cast_vote(int option) {
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	++counts[option - 1];
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	4a05      	ldr	r2, [pc, #20]	@ (8001540 <cast_vote+0x24>)
 800152a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800152e:	3201      	adds	r2, #1
 8001530:	4903      	ldr	r1, [pc, #12]	@ (8001540 <cast_vote+0x24>)
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000530 	.word	0x20000530

08001544 <get_winner>:
char get_winner() {
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
	int max_val = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
	char winner = '?';
 800154e:	233f      	movs	r3, #63	@ 0x3f
 8001550:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < 4; ++i) {
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	e012      	b.n	800157e <get_winner+0x3a>
		if (counts[i] > max_val) {
 8001558:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <get_winner+0x4c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	429a      	cmp	r2, r3
 8001564:	da08      	bge.n	8001578 <get_winner+0x34>
			max_val = counts[i];
 8001566:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <get_winner+0x4c>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156e:	60fb      	str	r3, [r7, #12]
			winner = (char) ('A' + i);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	3341      	adds	r3, #65	@ 0x41
 8001576:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < 4; ++i) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3301      	adds	r3, #1
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b03      	cmp	r3, #3
 8001582:	dde9      	ble.n	8001558 <get_winner+0x14>
		}
	}
	return winner;
 8001584:	7afb      	ldrb	r3, [r7, #11]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	20000530 	.word	0x20000530

08001594 <reverse>:
	current_state = HOME_STATE;
	counts[0] = counts[1] = counts[2] = counts[3] = 1;
	stack_reset();
}

void reverse(char *str, int len) {
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
	int i = 0, j = len - 1, temp;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	613b      	str	r3, [r7, #16]
	while (i < j) {
 80015a8:	e018      	b.n	80015dc <reverse+0x48>
		temp = str[i];
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	60fb      	str	r3, [r7, #12]
		str[i] = str[j];
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	441a      	add	r2, r3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	440b      	add	r3, r1
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	701a      	strb	r2, [r3, #0]
		str[j] = temp;
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	701a      	strb	r2, [r3, #0]
		i++;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3301      	adds	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
		j--;
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	3b01      	subs	r3, #1
 80015da:	613b      	str	r3, [r7, #16]
	while (i < j) {
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dbe2      	blt.n	80015aa <reverse+0x16>
	}
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <int_to_str>:

int int_to_str(int x, char str[], int d) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
	int i = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
	while (x > 0) {
 8001600:	e01d      	b.n	800163e <int_to_str+0x4e>
		str[i++] = (x % 10) + '0';
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <int_to_str+0x8c>)
 8001606:	fb83 1302 	smull	r1, r3, r3, r2
 800160a:	1099      	asrs	r1, r3, #2
 800160c:	17d3      	asrs	r3, r2, #31
 800160e:	1ac9      	subs	r1, r1, r3
 8001610:	460b      	mov	r3, r1
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	1ad1      	subs	r1, r2, r3
 800161a:	b2ca      	uxtb	r2, r1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	1c59      	adds	r1, r3, #1
 8001620:	6179      	str	r1, [r7, #20]
 8001622:	4619      	mov	r1, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	440b      	add	r3, r1
 8001628:	3230      	adds	r2, #48	@ 0x30
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]
		x = x / 10;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4a12      	ldr	r2, [pc, #72]	@ (800167c <int_to_str+0x8c>)
 8001632:	fb82 1203 	smull	r1, r2, r2, r3
 8001636:	1092      	asrs	r2, r2, #2
 8001638:	17db      	asrs	r3, r3, #31
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	60fb      	str	r3, [r7, #12]
	while (x > 0) {
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	dcde      	bgt.n	8001602 <int_to_str+0x12>
	}
	while (i < d)
 8001644:	e007      	b.n	8001656 <int_to_str+0x66>
		str[i++] = '0';
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	617a      	str	r2, [r7, #20]
 800164c:	461a      	mov	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	4413      	add	r3, r2
 8001652:	2230      	movs	r2, #48	@ 0x30
 8001654:	701a      	strb	r2, [r3, #0]
	while (i < d)
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	429a      	cmp	r2, r3
 800165c:	dbf3      	blt.n	8001646 <int_to_str+0x56>
	reverse(str, i);
 800165e:	6979      	ldr	r1, [r7, #20]
 8001660:	68b8      	ldr	r0, [r7, #8]
 8001662:	f7ff ff97 	bl	8001594 <reverse>
	str[i] = '\0';
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	4413      	add	r3, r2
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
	return i;
 8001670:	697b      	ldr	r3, [r7, #20]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	66666667 	.word	0x66666667

08001680 <ftoa>:

void ftoa(float n, char *res, int afterpoint) {
 8001680:	b5b0      	push	{r4, r5, r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	int ipart = (int) n;
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f7ff fca9 	bl	8000fe4 <__aeabi_f2iz>
 8001692:	4603      	mov	r3, r0
 8001694:	61fb      	str	r3, [r7, #28]
	float fpart = n - (float) ipart;
 8001696:	69f8      	ldr	r0, [r7, #28]
 8001698:	f7ff fb00 	bl	8000c9c <__aeabi_i2f>
 800169c:	4603      	mov	r3, r0
 800169e:	4619      	mov	r1, r3
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f7ff fa45 	bl	8000b30 <__aeabi_fsub>
 80016a6:	4603      	mov	r3, r0
 80016a8:	61bb      	str	r3, [r7, #24]
	int i = int_to_str(ipart, res, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	69f8      	ldr	r0, [r7, #28]
 80016b0:	f7ff ff9e 	bl	80015f0 <int_to_str>
 80016b4:	6178      	str	r0, [r7, #20]
	if (afterpoint != 0) {
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d02c      	beq.n	8001716 <ftoa+0x96>
		res[i] = '.';
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	4413      	add	r3, r2
 80016c2:	222e      	movs	r2, #46	@ 0x2e
 80016c4:	701a      	strb	r2, [r3, #0]
		fpart = fpart * pow(10, afterpoint);
 80016c6:	69b8      	ldr	r0, [r7, #24]
 80016c8:	f7fe feae 	bl	8000428 <__aeabi_f2d>
 80016cc:	4604      	mov	r4, r0
 80016ce:	460d      	mov	r5, r1
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7fe fe97 	bl	8000404 <__aeabi_i2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	f04f 0000 	mov.w	r0, #0
 80016de:	4910      	ldr	r1, [pc, #64]	@ (8001720 <ftoa+0xa0>)
 80016e0:	f003 f86e 	bl	80047c0 <pow>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4620      	mov	r0, r4
 80016ea:	4629      	mov	r1, r5
 80016ec:	f7fe fef4 	bl	80004d8 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff f9c6 	bl	8000a88 <__aeabi_d2f>
 80016fc:	4603      	mov	r3, r0
 80016fe:	61bb      	str	r3, [r7, #24]
		int_to_str((int) fpart, res + i + 1, afterpoint);
 8001700:	69b8      	ldr	r0, [r7, #24]
 8001702:	f7ff fc6f 	bl	8000fe4 <__aeabi_f2iz>
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	4413      	add	r3, r2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4619      	mov	r1, r3
 8001712:	f7ff ff6d 	bl	80015f0 <int_to_str>
	}
}
 8001716:	bf00      	nop
 8001718:	3720      	adds	r7, #32
 800171a:	46bd      	mov	sp, r7
 800171c:	bdb0      	pop	{r4, r5, r7, pc}
 800171e:	bf00      	nop
 8001720:	40240000 	.word	0x40240000

08001724 <show_heading>:

void show_heading() {
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b0cf      	sub	sp, #316	@ 0x13c
 8001728:	af00      	add	r7, sp, #0
	if (current_state == CONFIRMATION_STATE) {
 800172a:	4bc6      	ldr	r3, [pc, #792]	@ (8001a44 <show_heading+0x320>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b0a      	cmp	r3, #10
 8001730:	d145      	bne.n	80017be <show_heading+0x9a>
		char conf_text[50] = "Vote: ";
 8001732:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001736:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 800173a:	4ac3      	ldr	r2, [pc, #780]	@ (8001a48 <show_heading+0x324>)
 800173c:	460b      	mov	r3, r1
 800173e:	6810      	ldr	r0, [r2, #0]
 8001740:	6018      	str	r0, [r3, #0]
 8001742:	8890      	ldrh	r0, [r2, #4]
 8001744:	7992      	ldrb	r2, [r2, #6]
 8001746:	8098      	strh	r0, [r3, #4]
 8001748:	719a      	strb	r2, [r3, #6]
 800174a:	1dcb      	adds	r3, r1, #7
 800174c:	222b      	movs	r2, #43	@ 0x2b
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f004 fd44 	bl	80061de <memset>
		char selected[2] = {(char) (selected_candidate + '0')};
 8001756:	2300      	movs	r3, #0
 8001758:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 800175c:	4bbb      	ldr	r3, [pc, #748]	@ (8001a4c <show_heading+0x328>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	3330      	adds	r3, #48	@ 0x30
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134
		strcat(conf_text, selected);
 800176a:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 800176e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f004 fd3a 	bl	80061ee <strcat>
		strcat(conf_text, "?");
 800177a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fce6 	bl	8000150 <strlen>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800178c:	4413      	add	r3, r2
 800178e:	49b0      	ldr	r1, [pc, #704]	@ (8001a50 <show_heading+0x32c>)
 8001790:	461a      	mov	r2, r3
 8001792:	460b      	mov	r3, r1
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	8013      	strh	r3, [r2, #0]
		show_text(0, 0, conf_text, 0);
 8001798:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800179c:	2300      	movs	r3, #0
 800179e:	2100      	movs	r1, #0
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7ff fe41 	bl	8001428 <show_text>
		show_text(0, 1, headings[current_state][1], 0);
 80017a6:	4ba7      	ldr	r3, [pc, #668]	@ (8001a44 <show_heading+0x320>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4aaa      	ldr	r2, [pc, #680]	@ (8001a54 <show_heading+0x330>)
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	2300      	movs	r3, #0
 80017b4:	2101      	movs	r1, #1
 80017b6:	2000      	movs	r0, #0
 80017b8:	f7ff fe36 	bl	8001428 <show_text>
		} else {
			show_text(0, 0, headings[current_state][0], 0);
			show_text(0, 1, headings[current_state][1], 0);
		}
	}
}
 80017bc:	e17d      	b.n	8001aba <show_heading+0x396>
	} else if (current_state == TEMPERATURE_STATE) {
 80017be:	4ba1      	ldr	r3, [pc, #644]	@ (8001a44 <show_heading+0x320>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b09      	cmp	r3, #9
 80017c4:	d171      	bne.n	80018aa <show_heading+0x186>
		char temp_text[50] = "Temp: ";
 80017c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80017ca:	f5a3 719a 	sub.w	r1, r3, #308	@ 0x134
 80017ce:	4aa2      	ldr	r2, [pc, #648]	@ (8001a58 <show_heading+0x334>)
 80017d0:	460b      	mov	r3, r1
 80017d2:	6810      	ldr	r0, [r2, #0]
 80017d4:	6018      	str	r0, [r3, #0]
 80017d6:	8890      	ldrh	r0, [r2, #4]
 80017d8:	7992      	ldrb	r2, [r2, #6]
 80017da:	8098      	strh	r0, [r3, #4]
 80017dc:	719a      	strb	r2, [r3, #6]
 80017de:	1dcb      	adds	r3, r1, #7
 80017e0:	222b      	movs	r2, #43	@ 0x2b
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f004 fcfa 	bl	80061de <memset>
		ftoa(tCelsius, temp, 1);
 80017ea:	4b9c      	ldr	r3, [pc, #624]	@ (8001a5c <show_heading+0x338>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 80017f2:	2201      	movs	r2, #1
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff43 	bl	8001680 <ftoa>
		strcat(temp_text, temp);
 80017fa:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	4611      	mov	r1, r2
 8001802:	4618      	mov	r0, r3
 8001804:	f004 fcf3 	bl	80061ee <strcat>
		strcat(temp_text, " C");
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fca0 	bl	8000150 <strlen>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	4413      	add	r3, r2
 8001818:	4a91      	ldr	r2, [pc, #580]	@ (8001a60 <show_heading+0x33c>)
 800181a:	8811      	ldrh	r1, [r2, #0]
 800181c:	7892      	ldrb	r2, [r2, #2]
 800181e:	8019      	strh	r1, [r3, #0]
 8001820:	709a      	strb	r2, [r3, #2]
		show_text(0, 0, temp_text, 0);
 8001822:	1d3a      	adds	r2, r7, #4
 8001824:	2300      	movs	r3, #0
 8001826:	2100      	movs	r1, #0
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fdfd 	bl	8001428 <show_text>
		char hmd_text[50] = "Humidity: ";
 800182e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001832:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 8001836:	4a8b      	ldr	r2, [pc, #556]	@ (8001a64 <show_heading+0x340>)
 8001838:	4623      	mov	r3, r4
 800183a:	6810      	ldr	r0, [r2, #0]
 800183c:	6851      	ldr	r1, [r2, #4]
 800183e:	c303      	stmia	r3!, {r0, r1}
 8001840:	8911      	ldrh	r1, [r2, #8]
 8001842:	7a92      	ldrb	r2, [r2, #10]
 8001844:	8019      	strh	r1, [r3, #0]
 8001846:	709a      	strb	r2, [r3, #2]
 8001848:	f104 030b 	add.w	r3, r4, #11
 800184c:	2227      	movs	r2, #39	@ 0x27
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f004 fcc4 	bl	80061de <memset>
		itoa((int) RH, hmd, 10);
 8001856:	4b84      	ldr	r3, [pc, #528]	@ (8001a68 <show_heading+0x344>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fbc2 	bl	8000fe4 <__aeabi_f2iz>
 8001860:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001864:	220a      	movs	r2, #10
 8001866:	4619      	mov	r1, r3
 8001868:	f003 ff02 	bl	8005670 <itoa>
		strcat(hmd_text, hmd);
 800186c:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8001870:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f004 fcb9 	bl	80061ee <strcat>
		strcat(hmd_text, " %");
 800187c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fc65 	bl	8000150 <strlen>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800188e:	4413      	add	r3, r2
 8001890:	4a76      	ldr	r2, [pc, #472]	@ (8001a6c <show_heading+0x348>)
 8001892:	8811      	ldrh	r1, [r2, #0]
 8001894:	7892      	ldrb	r2, [r2, #2]
 8001896:	8019      	strh	r1, [r3, #0]
 8001898:	709a      	strb	r2, [r3, #2]
		show_text(0, 1, hmd_text, 0);
 800189a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800189e:	2300      	movs	r3, #0
 80018a0:	2101      	movs	r1, #1
 80018a2:	2000      	movs	r0, #0
 80018a4:	f7ff fdc0 	bl	8001428 <show_text>
}
 80018a8:	e107      	b.n	8001aba <show_heading+0x396>
	} else if (current_state == PUBLISH_STATE) {
 80018aa:	4b66      	ldr	r3, [pc, #408]	@ (8001a44 <show_heading+0x320>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b07      	cmp	r3, #7
 80018b0:	d124      	bne.n	80018fc <show_heading+0x1d8>
		char winner[2] = { get_winner() };
 80018b2:	2300      	movs	r3, #0
 80018b4:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0
 80018b8:	f7ff fe44 	bl	8001544 <get_winner>
 80018bc:	4603      	mov	r3, r0
 80018be:	f887 30f0 	strb.w	r3, [r7, #240]	@ 0xf0
		char text[20] = "Winner: ";
 80018c2:	4a6b      	ldr	r2, [pc, #428]	@ (8001a70 <show_heading+0x34c>)
 80018c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80018ca:	c303      	stmia	r3!, {r0, r1}
 80018cc:	701a      	strb	r2, [r3, #0]
 80018ce:	f107 03e5 	add.w	r3, r7, #229	@ 0xe5
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	f8c3 2007 	str.w	r2, [r3, #7]
		strcat(text, winner);
 80018dc:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 80018e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018e4:	4611      	mov	r1, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 fc81 	bl	80061ee <strcat>
		show_text(0, 1, text, 0);
 80018ec:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 80018f0:	2300      	movs	r3, #0
 80018f2:	2101      	movs	r1, #1
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff fd97 	bl	8001428 <show_text>
}
 80018fa:	e0de      	b.n	8001aba <show_heading+0x396>
	} else if (current_state == COUNT_STATE) {
 80018fc:	4b51      	ldr	r3, [pc, #324]	@ (8001a44 <show_heading+0x320>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b04      	cmp	r3, #4
 8001902:	f040 8084 	bne.w	8001a0e <show_heading+0x2ea>
		char a_label[20] = "A: ";
 8001906:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <show_heading+0x350>)
 8001908:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800190c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
		itoa(counts[0], a_count, 10);
 800191a:	4b57      	ldr	r3, [pc, #348]	@ (8001a78 <show_heading+0x354>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8001922:	220a      	movs	r2, #10
 8001924:	4618      	mov	r0, r3
 8001926:	f003 fea3 	bl	8005670 <itoa>
		strcat(a_label, a_count);
 800192a:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 800192e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f004 fc5a 	bl	80061ee <strcat>
		show_text(0, 0, a_label, 0);
 800193a:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 800193e:	2300      	movs	r3, #0
 8001940:	2100      	movs	r1, #0
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff fd70 	bl	8001428 <show_text>
		char b_label[20] = "B: ";
 8001948:	4b4c      	ldr	r3, [pc, #304]	@ (8001a7c <show_heading+0x358>)
 800194a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800194e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
		itoa(counts[1], b_count, 10);
 800195c:	4b46      	ldr	r3, [pc, #280]	@ (8001a78 <show_heading+0x354>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8001964:	220a      	movs	r2, #10
 8001966:	4618      	mov	r0, r3
 8001968:	f003 fe82 	bl	8005670 <itoa>
		strcat(b_label, b_count);
 800196c:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8001970:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f004 fc39 	bl	80061ee <strcat>
		show_text(8, 0, b_label, 0);
 800197c:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8001980:	2300      	movs	r3, #0
 8001982:	2100      	movs	r1, #0
 8001984:	2008      	movs	r0, #8
 8001986:	f7ff fd4f 	bl	8001428 <show_text>
		char c_label[20] = "C: ";
 800198a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a80 <show_heading+0x35c>)
 800198c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001990:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
		itoa(counts[2], c_count, 10);
 800199e:	4b36      	ldr	r3, [pc, #216]	@ (8001a78 <show_heading+0x354>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80019a6:	220a      	movs	r2, #10
 80019a8:	4618      	mov	r0, r3
 80019aa:	f003 fe61 	bl	8005670 <itoa>
		strcat(c_label, c_count);
 80019ae:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80019b2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f004 fc18 	bl	80061ee <strcat>
		show_text(0, 1, c_label, 0);
 80019be:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80019c2:	2300      	movs	r3, #0
 80019c4:	2101      	movs	r1, #1
 80019c6:	2000      	movs	r0, #0
 80019c8:	f7ff fd2e 	bl	8001428 <show_text>
		char d_label[20] = "D: ";
 80019cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001a84 <show_heading+0x360>)
 80019ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80019d0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
		itoa(counts[3], d_count, 10);
 80019de:	4b26      	ldr	r3, [pc, #152]	@ (8001a78 <show_heading+0x354>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80019e6:	220a      	movs	r2, #10
 80019e8:	4618      	mov	r0, r3
 80019ea:	f003 fe41 	bl	8005670 <itoa>
		strcat(d_label, d_count);
 80019ee:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80019f2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f004 fbf8 	bl	80061ee <strcat>
		show_text(8, 1, d_label, 0);
 80019fe:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001a02:	2300      	movs	r3, #0
 8001a04:	2101      	movs	r1, #1
 8001a06:	2008      	movs	r0, #8
 8001a08:	f7ff fd0e 	bl	8001428 <show_text>
}
 8001a0c:	e055      	b.n	8001aba <show_heading+0x396>
		if (admin_authorized) {
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a88 <show_heading+0x364>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d03c      	beq.n	8001a90 <show_heading+0x36c>
			show_text(0, 0, headings_admin[current_state][0], 0);
 8001a16:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <show_heading+0x320>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a8c <show_heading+0x368>)
 8001a1c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001a20:	2300      	movs	r3, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7ff fcff 	bl	8001428 <show_text>
			show_text(0, 1, headings_admin[current_state][1], 0);
 8001a2a:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <show_heading+0x320>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a17      	ldr	r2, [pc, #92]	@ (8001a8c <show_heading+0x368>)
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4413      	add	r3, r2
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	2300      	movs	r3, #0
 8001a38:	2101      	movs	r1, #1
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff fcf4 	bl	8001428 <show_text>
}
 8001a40:	e03b      	b.n	8001aba <show_heading+0x396>
 8001a42:	bf00      	nop
 8001a44:	20000014 	.word	0x20000014
 8001a48:	08008198 	.word	0x08008198
 8001a4c:	20000540 	.word	0x20000540
 8001a50:	0800818c 	.word	0x0800818c
 8001a54:	20000018 	.word	0x20000018
 8001a58:	08008178 	.word	0x08008178
 8001a5c:	20000390 	.word	0x20000390
 8001a60:	08008190 	.word	0x08008190
 8001a64:	08008180 	.word	0x08008180
 8001a68:	20000398 	.word	0x20000398
 8001a6c:	08008194 	.word	0x08008194
 8001a70:	080081a0 	.word	0x080081a0
 8001a74:	00203a41 	.word	0x00203a41
 8001a78:	20000530 	.word	0x20000530
 8001a7c:	00203a42 	.word	0x00203a42
 8001a80:	00203a43 	.word	0x00203a43
 8001a84:	00203a44 	.word	0x00203a44
 8001a88:	2000039c 	.word	0x2000039c
 8001a8c:	20000070 	.word	0x20000070
			show_text(0, 0, headings[current_state][0], 0);
 8001a90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <show_heading+0x3a0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac8 <show_heading+0x3a4>)
 8001a96:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7ff fcc2 	bl	8001428 <show_text>
			show_text(0, 1, headings[current_state][1], 0);
 8001aa4:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <show_heading+0x3a0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a07      	ldr	r2, [pc, #28]	@ (8001ac8 <show_heading+0x3a4>)
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7ff fcb7 	bl	8001428 <show_text>
}
 8001aba:	bf00      	nop
 8001abc:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd90      	pop	{r4, r7, pc}
 8001ac4:	20000014 	.word	0x20000014
 8001ac8:	20000018 	.word	0x20000018

08001acc <go_back>:

void go_back() {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	stack_pop();
 8001ad0:	f7ff fd06 	bl	80014e0 <stack_pop>
	current_state = stack_top();
 8001ad4:	f7ff fcce 	bl	8001474 <stack_top>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a02      	ldr	r2, [pc, #8]	@ (8001ae4 <go_back+0x18>)
 8001adc:	6013      	str	r3, [r2, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000014 	.word	0x20000014

08001ae8 <scan_for_admin>:

char key_presses[1000];
int key_press_count = 0;

int scan_for_admin() {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
	char pass[] = "699";
 8001aee:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <scan_for_admin+0x60>)
 8001af0:	607b      	str	r3, [r7, #4]
	if (key_press_count < strlen(pass)) {
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fb2b 	bl	8000150 <strlen>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4a13      	ldr	r2, [pc, #76]	@ (8001b4c <scan_for_admin+0x64>)
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <scan_for_admin+0x20>
		return 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	e01a      	b.n	8001b3e <scan_for_admin+0x56>
	}
	if (key_presses[key_press_count - 1] == pass[2]
 8001b08:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <scan_for_admin+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	4a10      	ldr	r2, [pc, #64]	@ (8001b50 <scan_for_admin+0x68>)
 8001b10:	5cd2      	ldrb	r2, [r2, r3]
 8001b12:	79bb      	ldrb	r3, [r7, #6]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d111      	bne.n	8001b3c <scan_for_admin+0x54>
			&& key_presses[key_press_count - 2] == pass[1]
 8001b18:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <scan_for_admin+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	3b02      	subs	r3, #2
 8001b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b50 <scan_for_admin+0x68>)
 8001b20:	5cd2      	ldrb	r2, [r2, r3]
 8001b22:	797b      	ldrb	r3, [r7, #5]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d109      	bne.n	8001b3c <scan_for_admin+0x54>
			&& key_presses[key_press_count - 3] == pass[0]) {
 8001b28:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <scan_for_admin+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3b03      	subs	r3, #3
 8001b2e:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <scan_for_admin+0x68>)
 8001b30:	5cd2      	ldrb	r2, [r2, r3]
 8001b32:	793b      	ldrb	r3, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d101      	bne.n	8001b3c <scan_for_admin+0x54>
		return 1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <scan_for_admin+0x56>
	}
	return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	00393936 	.word	0x00393936
 8001b4c:	2000092c 	.word	0x2000092c
 8001b50:	20000544 	.word	0x20000544

08001b54 <transition>:

void transition(char key_pressed) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
	char pressed[2] = { key_pressed };
 8001b5e:	2300      	movs	r3, #0
 8001b60:	81bb      	strh	r3, [r7, #12]
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	733b      	strb	r3, [r7, #12]
	show_text(15, 0, pressed, 0);
 8001b66:	f107 020c 	add.w	r2, r7, #12
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	200f      	movs	r0, #15
 8001b70:	f7ff fc5a 	bl	8001428 <show_text>
	HAL_Delay(100);
 8001b74:	2064      	movs	r0, #100	@ 0x64
 8001b76:	f000 ffc9 	bl	8002b0c <HAL_Delay>

	char old_state = current_state;
 8001b7a:	4b5f      	ldr	r3, [pc, #380]	@ (8001cf8 <transition+0x1a4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	73fb      	strb	r3, [r7, #15]

	if (scan_for_admin()) {
 8001b80:	f7ff ffb2 	bl	8001ae8 <scan_for_admin>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00a      	beq.n	8001ba0 <transition+0x4c>
		current_state = HOME_STATE;
 8001b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8001cf8 <transition+0x1a4>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
		admin_authorized = 1;
 8001b90:	4b5a      	ldr	r3, [pc, #360]	@ (8001cfc <transition+0x1a8>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
		clear_console();
 8001b96:	f7ff fc41 	bl	800141c <clear_console>
		stack_reset();
 8001b9a:	f7ff fcb3 	bl	8001504 <stack_reset>
		return;
 8001b9e:	e0a7      	b.n	8001cf0 <transition+0x19c>
	}

	if (key_pressed == '?') {
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ba4:	d102      	bne.n	8001bac <transition+0x58>
		exit(0);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f003 fd38 	bl	800561c <exit>
		return;
	}
	if (key_pressed == '*') {
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	2b2a      	cmp	r3, #42	@ 0x2a
 8001bb0:	d10e      	bne.n	8001bd0 <transition+0x7c>
		if (current_state == SUCCESS_STATE || current_state == PROLOGUE_STATE)
 8001bb2:	4b51      	ldr	r3, [pc, #324]	@ (8001cf8 <transition+0x1a4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b05      	cmp	r3, #5
 8001bb8:	f000 8099 	beq.w	8001cee <transition+0x19a>
 8001bbc:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf8 <transition+0x1a4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	f000 8094 	beq.w	8001cee <transition+0x19a>
			return;
		go_back();
 8001bc6:	f7ff ff81 	bl	8001acc <go_back>
		clear_console();
 8001bca:	f7ff fc27 	bl	800141c <clear_console>
		return;
 8001bce:	e08f      	b.n	8001cf0 <transition+0x19c>
	}

	if (key_pressed == '#') {
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	2b23      	cmp	r3, #35	@ 0x23
 8001bd4:	d10f      	bne.n	8001bf6 <transition+0xa2>
		if (current_state != PROLOGUE_STATE && current_state != SUCCESS_STATE) {
 8001bd6:	4b48      	ldr	r3, [pc, #288]	@ (8001cf8 <transition+0x1a4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d006      	beq.n	8001bec <transition+0x98>
 8001bde:	4b46      	ldr	r3, [pc, #280]	@ (8001cf8 <transition+0x1a4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d002      	beq.n	8001bec <transition+0x98>
			current_state = HOME_STATE;
 8001be6:	4b44      	ldr	r3, [pc, #272]	@ (8001cf8 <transition+0x1a4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
		}
		clear_console();
 8001bec:	f7ff fc16 	bl	800141c <clear_console>
		stack_reset();
 8001bf0:	f7ff fc88 	bl	8001504 <stack_reset>
		return;
 8001bf4:	e07c      	b.n	8001cf0 <transition+0x19c>
	}
	if (current_state == HOME_STATE) {
 8001bf6:	4b40      	ldr	r3, [pc, #256]	@ (8001cf8 <transition+0x1a4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d113      	bne.n	8001c26 <transition+0xd2>
		if (key_pressed == '1') {
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	2b31      	cmp	r3, #49	@ 0x31
 8001c02:	d109      	bne.n	8001c18 <transition+0xc4>
			current_state = admin_authorized ? MENU_STATE : VOTE_STATE;
 8001c04:	4b3d      	ldr	r3, [pc, #244]	@ (8001cfc <transition+0x1a8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <transition+0xbc>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <transition+0xbe>
 8001c10:	2302      	movs	r3, #2
 8001c12:	4a39      	ldr	r2, [pc, #228]	@ (8001cf8 <transition+0x1a4>)
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e05d      	b.n	8001cd4 <transition+0x180>
		} else if (key_pressed == '#') {
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	2b23      	cmp	r3, #35	@ 0x23
 8001c1c:	d15a      	bne.n	8001cd4 <transition+0x180>
			current_state = HOME_STATE;
 8001c1e:	4b36      	ldr	r3, [pc, #216]	@ (8001cf8 <transition+0x1a4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e056      	b.n	8001cd4 <transition+0x180>
		}
	} else if (current_state == MENU_STATE) {
 8001c26:	4b34      	ldr	r3, [pc, #208]	@ (8001cf8 <transition+0x1a4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d125      	bne.n	8001c7a <transition+0x126>
		if (key_pressed == '1') {
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	2b31      	cmp	r3, #49	@ 0x31
 8001c32:	d103      	bne.n	8001c3c <transition+0xe8>
			current_state = STAT_STATE;
 8001c34:	4b30      	ldr	r3, [pc, #192]	@ (8001cf8 <transition+0x1a4>)
 8001c36:	2203      	movs	r2, #3
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e04b      	b.n	8001cd4 <transition+0x180>
		} else if (key_pressed == '#') {
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	2b23      	cmp	r3, #35	@ 0x23
 8001c40:	d103      	bne.n	8001c4a <transition+0xf6>
			current_state = HOME_STATE;
 8001c42:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf8 <transition+0x1a4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e044      	b.n	8001cd4 <transition+0x180>
		} else if (key_pressed == '2') {
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	2b32      	cmp	r3, #50	@ 0x32
 8001c4e:	d106      	bne.n	8001c5e <transition+0x10a>
			current_state = HOME_STATE;
 8001c50:	4b29      	ldr	r3, [pc, #164]	@ (8001cf8 <transition+0x1a4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
			admin_authorized = 0;
 8001c56:	4b29      	ldr	r3, [pc, #164]	@ (8001cfc <transition+0x1a8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e03a      	b.n	8001cd4 <transition+0x180>
		} else if (key_pressed == '3') {
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	2b33      	cmp	r3, #51	@ 0x33
 8001c62:	d103      	bne.n	8001c6c <transition+0x118>
			current_state = PUBLISH_STATE;
 8001c64:	4b24      	ldr	r3, [pc, #144]	@ (8001cf8 <transition+0x1a4>)
 8001c66:	2207      	movs	r2, #7
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e033      	b.n	8001cd4 <transition+0x180>
		} else if (key_pressed == '4') {
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	2b34      	cmp	r3, #52	@ 0x34
 8001c70:	d130      	bne.n	8001cd4 <transition+0x180>
			current_state = TEMPERATURE_STATE;
 8001c72:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <transition+0x1a4>)
 8001c74:	2209      	movs	r2, #9
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e02c      	b.n	8001cd4 <transition+0x180>
		}
	} else if (current_state == VOTE_STATE) {
 8001c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf8 <transition+0x1a4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d107      	bne.n	8001c92 <transition+0x13e>
		selected_candidate = key_pressed - '0';
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	3b30      	subs	r3, #48	@ 0x30
 8001c86:	4a1e      	ldr	r2, [pc, #120]	@ (8001d00 <transition+0x1ac>)
 8001c88:	6013      	str	r3, [r2, #0]
		current_state = CONFIRMATION_STATE;
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf8 <transition+0x1a4>)
 8001c8c:	220a      	movs	r2, #10
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	e020      	b.n	8001cd4 <transition+0x180>

	} else if (current_state == STAT_STATE) {
 8001c92:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <transition+0x1a4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d10d      	bne.n	8001cb6 <transition+0x162>
		if (key_pressed == '1') {
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	2b31      	cmp	r3, #49	@ 0x31
 8001c9e:	d103      	bne.n	8001ca8 <transition+0x154>
			current_state = COUNT_STATE;
 8001ca0:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <transition+0x1a4>)
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	e015      	b.n	8001cd4 <transition+0x180>
		} else if (key_pressed == '#') {
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	2b23      	cmp	r3, #35	@ 0x23
 8001cac:	d112      	bne.n	8001cd4 <transition+0x180>
			current_state = HOME_STATE;
 8001cae:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <transition+0x1a4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	e00e      	b.n	8001cd4 <transition+0x180>
		}
	} else if (current_state == CONFIRMATION_STATE) {
 8001cb6:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <transition+0x1a4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b0a      	cmp	r3, #10
 8001cbc:	d10a      	bne.n	8001cd4 <transition+0x180>
		if (key_pressed == '1') {
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	2b31      	cmp	r3, #49	@ 0x31
 8001cc2:	d107      	bne.n	8001cd4 <transition+0x180>
			cast_vote(selected_candidate);
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <transition+0x1ac>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fc27 	bl	800151c <cast_vote>
			current_state = SUCCESS_STATE;
 8001cce:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <transition+0x1a4>)
 8001cd0:	2205      	movs	r2, #5
 8001cd2:	601a      	str	r2, [r3, #0]
		}

	}
	stack_push(current_state);
 8001cd4:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <transition+0x1a4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fbeb 	bl	80014b4 <stack_push>
	if (current_state != old_state) {
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	4b05      	ldr	r3, [pc, #20]	@ (8001cf8 <transition+0x1a4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d003      	beq.n	8001cf0 <transition+0x19c>
		clear_console();
 8001ce8:	f7ff fb98 	bl	800141c <clear_console>
 8001cec:	e000      	b.n	8001cf0 <transition+0x19c>
			return;
 8001cee:	bf00      	nop
	}
}
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000014 	.word	0x20000014
 8001cfc:	2000039c 	.word	0x2000039c
 8001d00:	20000540 	.word	0x20000540

08001d04 <microDelay>:

void microDelay(uint16_t delay) {
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001d0e:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <microDelay+0x2c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 8001d16:	bf00      	nop
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <microDelay+0x2c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d3f9      	bcc.n	8001d18 <microDelay+0x14>
		;
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	20000318 	.word	0x20000318

08001d34 <DHT11_Start>:

uint8_t DHT11_Start(void) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
	GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8001d4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d4e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001d50:	2301      	movs	r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2302      	movs	r3, #2
 8001d56:	613b      	str	r3, [r7, #16]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	4619      	mov	r1, r3
 8001d60:	482c      	ldr	r0, [pc, #176]	@ (8001e14 <DHT11_Start+0xe0>)
 8001d62:	f001 f805 	bl	8002d70 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);       // pull the pin low
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d6c:	4829      	ldr	r0, [pc, #164]	@ (8001e14 <DHT11_Start+0xe0>)
 8001d6e:	f001 f99a 	bl	80030a6 <HAL_GPIO_WritePin>
	HAL_Delay(20);                                     // wait for 20ms
 8001d72:	2014      	movs	r0, #20
 8001d74:	f000 feca 	bl	8002b0c <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);       // pull the pin high
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d7e:	4825      	ldr	r0, [pc, #148]	@ (8001e14 <DHT11_Start+0xe0>)
 8001d80:	f001 f991 	bl	80030a6 <HAL_GPIO_WritePin>
	microDelay(30);                                    // wait for 30us
 8001d84:	201e      	movs	r0, #30
 8001d86:	f7ff ffbd 	bl	8001d04 <microDelay>
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate);  // set the pin as input
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	4619      	mov	r1, r3
 8001d96:	481f      	ldr	r0, [pc, #124]	@ (8001e14 <DHT11_Start+0xe0>)
 8001d98:	f000 ffea 	bl	8002d70 <HAL_GPIO_Init>
	microDelay(40);
 8001d9c:	2028      	movs	r0, #40	@ 0x28
 8001d9e:	f7ff ffb1 	bl	8001d04 <microDelay>
	if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8001da2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001da6:	481b      	ldr	r0, [pc, #108]	@ (8001e14 <DHT11_Start+0xe0>)
 8001da8:	f001 f966 	bl	8003078 <HAL_GPIO_ReadPin>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10c      	bne.n	8001dcc <DHT11_Start+0x98>
		microDelay(80);
 8001db2:	2050      	movs	r0, #80	@ 0x50
 8001db4:	f7ff ffa6 	bl	8001d04 <microDelay>
		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8001db8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001dbc:	4815      	ldr	r0, [pc, #84]	@ (8001e14 <DHT11_Start+0xe0>)
 8001dbe:	f001 f95b 	bl	8003078 <HAL_GPIO_ReadPin>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <DHT11_Start+0x98>
			Response = 1;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	75fb      	strb	r3, [r7, #23]
	}
	pMillis = HAL_GetTick();
 8001dcc:	f000 fe94 	bl	8002af8 <HAL_GetTick>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4a11      	ldr	r2, [pc, #68]	@ (8001e18 <DHT11_Start+0xe4>)
 8001dd4:	6013      	str	r3, [r2, #0]
	cMillis = HAL_GetTick();
 8001dd6:	f000 fe8f 	bl	8002af8 <HAL_GetTick>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4a0f      	ldr	r2, [pc, #60]	@ (8001e1c <DHT11_Start+0xe8>)
 8001dde:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 8001de0:	e004      	b.n	8001dec <DHT11_Start+0xb8>
		cMillis = HAL_GetTick();
 8001de2:	f000 fe89 	bl	8002af8 <HAL_GetTick>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a0c      	ldr	r2, [pc, #48]	@ (8001e1c <DHT11_Start+0xe8>)
 8001dea:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 8001dec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001df0:	4808      	ldr	r0, [pc, #32]	@ (8001e14 <DHT11_Start+0xe0>)
 8001df2:	f001 f941 	bl	8003078 <HAL_GPIO_ReadPin>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d006      	beq.n	8001e0a <DHT11_Start+0xd6>
 8001dfc:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <DHT11_Start+0xe4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	1c9a      	adds	r2, r3, #2
 8001e02:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <DHT11_Start+0xe8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d8eb      	bhi.n	8001de2 <DHT11_Start+0xae>
	}
	return Response;
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40010c00 	.word	0x40010c00
 8001e18:	20000388 	.word	0x20000388
 8001e1c:	2000038c 	.word	0x2000038c

08001e20 <DHT11_Read>:

uint8_t DHT11_Read(void) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
	uint8_t a, b;
	for (a = 0; a < 8; a++) {
 8001e26:	2300      	movs	r3, #0
 8001e28:	71fb      	strb	r3, [r7, #7]
 8001e2a:	e066      	b.n	8001efa <DHT11_Read+0xda>
		pMillis = HAL_GetTick();
 8001e2c:	f000 fe64 	bl	8002af8 <HAL_GetTick>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a36      	ldr	r2, [pc, #216]	@ (8001f0c <DHT11_Read+0xec>)
 8001e34:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 8001e36:	f000 fe5f 	bl	8002af8 <HAL_GetTick>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a34      	ldr	r2, [pc, #208]	@ (8001f10 <DHT11_Read+0xf0>)
 8001e3e:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001e40:	e004      	b.n	8001e4c <DHT11_Read+0x2c>
				&& pMillis + 2 > cMillis) {       // wait for the pin to go high
			cMillis = HAL_GetTick();
 8001e42:	f000 fe59 	bl	8002af8 <HAL_GetTick>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4a31      	ldr	r2, [pc, #196]	@ (8001f10 <DHT11_Read+0xf0>)
 8001e4a:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001e4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e50:	4830      	ldr	r0, [pc, #192]	@ (8001f14 <DHT11_Read+0xf4>)
 8001e52:	f001 f911 	bl	8003078 <HAL_GPIO_ReadPin>
 8001e56:	4603      	mov	r3, r0
				&& pMillis + 2 > cMillis) {       // wait for the pin to go high
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d106      	bne.n	8001e6a <DHT11_Read+0x4a>
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f0c <DHT11_Read+0xec>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	1c9a      	adds	r2, r3, #2
 8001e62:	4b2b      	ldr	r3, [pc, #172]	@ (8001f10 <DHT11_Read+0xf0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d8eb      	bhi.n	8001e42 <DHT11_Read+0x22>
		}
		microDelay(40);                                // wait for 40 us
 8001e6a:	2028      	movs	r0, #40	@ 0x28
 8001e6c:	f7ff ff4a 	bl	8001d04 <microDelay>
		if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))     // if the pin is low
 8001e70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e74:	4827      	ldr	r0, [pc, #156]	@ (8001f14 <DHT11_Read+0xf4>)
 8001e76:	f001 f8ff 	bl	8003078 <HAL_GPIO_ReadPin>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10e      	bne.n	8001e9e <DHT11_Read+0x7e>
			b &= ~(1 << (7 - a));
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	f1c3 0307 	rsb	r3, r3, #7
 8001e86:	2201      	movs	r2, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	b25b      	sxtb	r3, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	b25a      	sxtb	r2, r3
 8001e92:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e96:	4013      	ands	r3, r2
 8001e98:	b25b      	sxtb	r3, r3
 8001e9a:	71bb      	strb	r3, [r7, #6]
 8001e9c:	e00b      	b.n	8001eb6 <DHT11_Read+0x96>
		else
			b |= (1 << (7 - a));
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f1c3 0307 	rsb	r3, r3, #7
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	b25a      	sxtb	r2, r3
 8001eac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	b25b      	sxtb	r3, r3
 8001eb4:	71bb      	strb	r3, [r7, #6]
		pMillis = HAL_GetTick();
 8001eb6:	f000 fe1f 	bl	8002af8 <HAL_GetTick>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4a13      	ldr	r2, [pc, #76]	@ (8001f0c <DHT11_Read+0xec>)
 8001ebe:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 8001ec0:	f000 fe1a 	bl	8002af8 <HAL_GetTick>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4a12      	ldr	r2, [pc, #72]	@ (8001f10 <DHT11_Read+0xf0>)
 8001ec8:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001eca:	e004      	b.n	8001ed6 <DHT11_Read+0xb6>
				&& pMillis + 2 > cMillis) {        // wait for the pin to go low
			cMillis = HAL_GetTick();
 8001ecc:	f000 fe14 	bl	8002af8 <HAL_GetTick>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8001f10 <DHT11_Read+0xf0>)
 8001ed4:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001ed6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001eda:	480e      	ldr	r0, [pc, #56]	@ (8001f14 <DHT11_Read+0xf4>)
 8001edc:	f001 f8cc 	bl	8003078 <HAL_GPIO_ReadPin>
 8001ee0:	4603      	mov	r3, r0
				&& pMillis + 2 > cMillis) {        // wait for the pin to go low
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d006      	beq.n	8001ef4 <DHT11_Read+0xd4>
 8001ee6:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <DHT11_Read+0xec>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	1c9a      	adds	r2, r3, #2
 8001eec:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <DHT11_Read+0xf0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d8eb      	bhi.n	8001ecc <DHT11_Read+0xac>
	for (a = 0; a < 8; a++) {
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	71fb      	strb	r3, [r7, #7]
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	2b07      	cmp	r3, #7
 8001efe:	d995      	bls.n	8001e2c <DHT11_Read+0xc>
		}
	}
	return b;
 8001f00:	79bb      	ldrb	r3, [r7, #6]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000388 	.word	0x20000388
 8001f10:	2000038c 	.word	0x2000038c
 8001f14:	40010c00 	.word	0x40010c00

08001f18 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001f1e:	f000 fd93 	bl	8002a48 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001f22:	f000 f8ed 	bl	8002100 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001f26:	f000 f9af 	bl	8002288 <MX_GPIO_Init>
	MX_I2C2_Init();
 8001f2a:	f000 f92f 	bl	800218c <MX_I2C2_Init>
	MX_TIM1_Init();
 8001f2e:	f000 f95b 	bl	80021e8 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HD44780_Init(2);
 8001f32:	2002      	movs	r0, #2
 8001f34:	f7ff f87c 	bl	8001030 <HD44780_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f3e:	485d      	ldr	r0, [pc, #372]	@ (80020b4 <main+0x19c>)
 8001f40:	f001 f8b1 	bl	80030a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8001f44:	2201      	movs	r2, #1
 8001f46:	2108      	movs	r1, #8
 8001f48:	485b      	ldr	r0, [pc, #364]	@ (80020b8 <main+0x1a0>)
 8001f4a:	f001 f8ac 	bl	80030a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001f4e:	2201      	movs	r2, #1
 8001f50:	2110      	movs	r1, #16
 8001f52:	4859      	ldr	r0, [pc, #356]	@ (80020b8 <main+0x1a0>)
 8001f54:	f001 f8a7 	bl	80030a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2120      	movs	r1, #32
 8001f5c:	4856      	ldr	r0, [pc, #344]	@ (80020b8 <main+0x1a0>)
 8001f5e:	f001 f8a2 	bl	80030a6 <HAL_GPIO_WritePin>

	HAL_TIM_Base_Start(&htim1);
 8001f62:	4856      	ldr	r0, [pc, #344]	@ (80020bc <main+0x1a4>)
 8001f64:	f002 f9b8 	bl	80042d8 <HAL_TIM_Base_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		show_heading();
 8001f68:	f7ff fbdc 	bl	8001724 <show_heading>
		char c = keyPressed;
 8001f6c:	4b54      	ldr	r3, [pc, #336]	@ (80020c0 <main+0x1a8>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	71fb      	strb	r3, [r7, #7]
		if (currentMillis > last_when_pressed + 500) {
 8001f72:	4b54      	ldr	r3, [pc, #336]	@ (80020c4 <main+0x1ac>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b52      	ldr	r3, [pc, #328]	@ (80020c8 <main+0x1b0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d210      	bcs.n	8001fa6 <main+0x8e>
			key_presses[key_press_count++] = c;
 8001f84:	4b51      	ldr	r3, [pc, #324]	@ (80020cc <main+0x1b4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	4950      	ldr	r1, [pc, #320]	@ (80020cc <main+0x1b4>)
 8001f8c:	600a      	str	r2, [r1, #0]
 8001f8e:	4950      	ldr	r1, [pc, #320]	@ (80020d0 <main+0x1b8>)
 8001f90:	79fa      	ldrb	r2, [r7, #7]
 8001f92:	54ca      	strb	r2, [r1, r3]
			transition(c);
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fddc 	bl	8001b54 <transition>
			last_when_pressed = currentMillis;
 8001f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80020c8 <main+0x1b0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b48      	ldr	r3, [pc, #288]	@ (80020c4 <main+0x1ac>)
 8001fa4:	601a      	str	r2, [r3, #0]
		}

		//		if (current_state == TEMPERATURE_STATE) {
		//				HAL_Delay(1000);
		//		}
		if (DHT11_Start()) {
 8001fa6:	f7ff fec5 	bl	8001d34 <DHT11_Start>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0db      	beq.n	8001f68 <main+0x50>
			RHI = DHT11_Read();        // Relative humidity integral
 8001fb0:	f7ff ff36 	bl	8001e20 <DHT11_Read>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b46      	ldr	r3, [pc, #280]	@ (80020d4 <main+0x1bc>)
 8001fba:	701a      	strb	r2, [r3, #0]
			RHD = DHT11_Read();        // Relative humidity decimal
 8001fbc:	f7ff ff30 	bl	8001e20 <DHT11_Read>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b44      	ldr	r3, [pc, #272]	@ (80020d8 <main+0x1c0>)
 8001fc6:	701a      	strb	r2, [r3, #0]
			TCI = DHT11_Read();        // Celsius integral
 8001fc8:	f7ff ff2a 	bl	8001e20 <DHT11_Read>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b42      	ldr	r3, [pc, #264]	@ (80020dc <main+0x1c4>)
 8001fd2:	701a      	strb	r2, [r3, #0]
			TCD = DHT11_Read();        // Celsius decimal
 8001fd4:	f7ff ff24 	bl	8001e20 <DHT11_Read>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b40      	ldr	r3, [pc, #256]	@ (80020e0 <main+0x1c8>)
 8001fde:	701a      	strb	r2, [r3, #0]
			SUM = DHT11_Read();        // Check sum
 8001fe0:	f7ff ff1e 	bl	8001e20 <DHT11_Read>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80020e4 <main+0x1cc>)
 8001fea:	701a      	strb	r2, [r3, #0]
			if (RHI + RHD + TCI + TCD == SUM) {
 8001fec:	4b39      	ldr	r3, [pc, #228]	@ (80020d4 <main+0x1bc>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b39      	ldr	r3, [pc, #228]	@ (80020d8 <main+0x1c0>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a38      	ldr	r2, [pc, #224]	@ (80020dc <main+0x1c4>)
 8001ffa:	7812      	ldrb	r2, [r2, #0]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a38      	ldr	r2, [pc, #224]	@ (80020e0 <main+0x1c8>)
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a37      	ldr	r2, [pc, #220]	@ (80020e4 <main+0x1cc>)
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	4293      	cmp	r3, r2
 800200a:	d1ad      	bne.n	8001f68 <main+0x50>
				// Can use RHI and TCI for any purposes if whole number only needed
				tCelsius = (float) TCI + (float) (TCD / 10.0);
 800200c:	4b33      	ldr	r3, [pc, #204]	@ (80020dc <main+0x1c4>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fe3f 	bl	8000c94 <__aeabi_ui2f>
 8002016:	4604      	mov	r4, r0
 8002018:	4b31      	ldr	r3, [pc, #196]	@ (80020e0 <main+0x1c8>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe f9f1 	bl	8000404 <__aeabi_i2d>
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	4b30      	ldr	r3, [pc, #192]	@ (80020e8 <main+0x1d0>)
 8002028:	f7fe fb80 	bl	800072c <__aeabi_ddiv>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f7fe fd28 	bl	8000a88 <__aeabi_d2f>
 8002038:	4603      	mov	r3, r0
 800203a:	4619      	mov	r1, r3
 800203c:	4620      	mov	r0, r4
 800203e:	f7fe fd79 	bl	8000b34 <__addsf3>
 8002042:	4603      	mov	r3, r0
 8002044:	461a      	mov	r2, r3
 8002046:	4b29      	ldr	r3, [pc, #164]	@ (80020ec <main+0x1d4>)
 8002048:	601a      	str	r2, [r3, #0]
				tFahrenheit = tCelsius * 9 / 5 + 32;
 800204a:	4b28      	ldr	r3, [pc, #160]	@ (80020ec <main+0x1d4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4928      	ldr	r1, [pc, #160]	@ (80020f0 <main+0x1d8>)
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fe77 	bl	8000d44 <__aeabi_fmul>
 8002056:	4603      	mov	r3, r0
 8002058:	4926      	ldr	r1, [pc, #152]	@ (80020f4 <main+0x1dc>)
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe ff26 	bl	8000eac <__aeabi_fdiv>
 8002060:	4603      	mov	r3, r0
 8002062:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fd64 	bl	8000b34 <__addsf3>
 800206c:	4603      	mov	r3, r0
 800206e:	461a      	mov	r2, r3
 8002070:	4b21      	ldr	r3, [pc, #132]	@ (80020f8 <main+0x1e0>)
 8002072:	601a      	str	r2, [r3, #0]
				RH = (float) RHI + (float) (RHD / 10.0);
 8002074:	4b17      	ldr	r3, [pc, #92]	@ (80020d4 <main+0x1bc>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fe0b 	bl	8000c94 <__aeabi_ui2f>
 800207e:	4604      	mov	r4, r0
 8002080:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <main+0x1c0>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe f9bd 	bl	8000404 <__aeabi_i2d>
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <main+0x1d0>)
 8002090:	f7fe fb4c 	bl	800072c <__aeabi_ddiv>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f7fe fcf4 	bl	8000a88 <__aeabi_d2f>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4619      	mov	r1, r3
 80020a4:	4620      	mov	r0, r4
 80020a6:	f7fe fd45 	bl	8000b34 <__addsf3>
 80020aa:	4603      	mov	r3, r0
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <main+0x1e4>)
 80020b0:	601a      	str	r2, [r3, #0]
	while (1) {
 80020b2:	e759      	b.n	8001f68 <main+0x50>
 80020b4:	40010800 	.word	0x40010800
 80020b8:	40010c00 	.word	0x40010c00
 80020bc:	20000318 	.word	0x20000318
 80020c0:	20000378 	.word	0x20000378
 80020c4:	2000037c 	.word	0x2000037c
 80020c8:	20000374 	.word	0x20000374
 80020cc:	2000092c 	.word	0x2000092c
 80020d0:	20000544 	.word	0x20000544
 80020d4:	20000380 	.word	0x20000380
 80020d8:	20000381 	.word	0x20000381
 80020dc:	20000382 	.word	0x20000382
 80020e0:	20000383 	.word	0x20000383
 80020e4:	20000384 	.word	0x20000384
 80020e8:	40240000 	.word	0x40240000
 80020ec:	20000390 	.word	0x20000390
 80020f0:	41100000 	.word	0x41100000
 80020f4:	40a00000 	.word	0x40a00000
 80020f8:	20000394 	.word	0x20000394
 80020fc:	20000398 	.word	0x20000398

08002100 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b090      	sub	sp, #64	@ 0x40
 8002104:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002106:	f107 0318 	add.w	r3, r7, #24
 800210a:	2228      	movs	r2, #40	@ 0x28
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f004 f865 	bl	80061de <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
 8002120:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002122:	2301      	movs	r3, #1
 8002124:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002126:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800212a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002130:	2301      	movs	r3, #1
 8002132:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002134:	2302      	movs	r3, #2
 8002136:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002138:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800213c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800213e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002142:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002144:	f107 0318 	add.w	r3, r7, #24
 8002148:	4618      	mov	r0, r3
 800214a:	f001 fc79 	bl	8003a40 <HAL_RCC_OscConfig>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <SystemClock_Config+0x58>
		Error_Handler();
 8002154:	f000 fab6 	bl	80026c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002158:	230f      	movs	r3, #15
 800215a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800215c:	2302      	movs	r3, #2
 800215e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002164:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002168:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	2102      	movs	r1, #2
 8002172:	4618      	mov	r0, r3
 8002174:	f001 fee6 	bl	8003f44 <HAL_RCC_ClockConfig>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <SystemClock_Config+0x82>
		Error_Handler();
 800217e:	f000 faa1 	bl	80026c4 <Error_Handler>
	}
}
 8002182:	bf00      	nop
 8002184:	3740      	adds	r7, #64	@ 0x40
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002190:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <MX_I2C2_Init+0x50>)
 8002192:	4a13      	ldr	r2, [pc, #76]	@ (80021e0 <MX_I2C2_Init+0x54>)
 8002194:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8002196:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <MX_I2C2_Init+0x50>)
 8002198:	4a12      	ldr	r2, [pc, #72]	@ (80021e4 <MX_I2C2_Init+0x58>)
 800219a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800219c:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <MX_I2C2_Init+0x50>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80021a2:	4b0e      	ldr	r3, [pc, #56]	@ (80021dc <MX_I2C2_Init+0x50>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021a8:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <MX_I2C2_Init+0x50>)
 80021aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021ae:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b0:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <MX_I2C2_Init+0x50>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80021b6:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <MX_I2C2_Init+0x50>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021bc:	4b07      	ldr	r3, [pc, #28]	@ (80021dc <MX_I2C2_Init+0x50>)
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021c2:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <MX_I2C2_Init+0x50>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80021c8:	4804      	ldr	r0, [pc, #16]	@ (80021dc <MX_I2C2_Init+0x50>)
 80021ca:	f000 ff9d 	bl	8003108 <HAL_I2C_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_I2C2_Init+0x4c>
		Error_Handler();
 80021d4:	f000 fa76 	bl	80026c4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200002c4 	.word	0x200002c4
 80021e0:	40005800 	.word	0x40005800
 80021e4:	000186a0 	.word	0x000186a0

080021e8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80021fc:	463b      	mov	r3, r7
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002204:	4b1e      	ldr	r3, [pc, #120]	@ (8002280 <MX_TIM1_Init+0x98>)
 8002206:	4a1f      	ldr	r2, [pc, #124]	@ (8002284 <MX_TIM1_Init+0x9c>)
 8002208:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 800220a:	4b1d      	ldr	r3, [pc, #116]	@ (8002280 <MX_TIM1_Init+0x98>)
 800220c:	2247      	movs	r2, #71	@ 0x47
 800220e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002210:	4b1b      	ldr	r3, [pc, #108]	@ (8002280 <MX_TIM1_Init+0x98>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8002216:	4b1a      	ldr	r3, [pc, #104]	@ (8002280 <MX_TIM1_Init+0x98>)
 8002218:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800221c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221e:	4b18      	ldr	r3, [pc, #96]	@ (8002280 <MX_TIM1_Init+0x98>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002224:	4b16      	ldr	r3, [pc, #88]	@ (8002280 <MX_TIM1_Init+0x98>)
 8002226:	2200      	movs	r2, #0
 8002228:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222a:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <MX_TIM1_Init+0x98>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002230:	4813      	ldr	r0, [pc, #76]	@ (8002280 <MX_TIM1_Init+0x98>)
 8002232:	f002 f801 	bl	8004238 <HAL_TIM_Base_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM1_Init+0x58>
		Error_Handler();
 800223c:	f000 fa42 	bl	80026c4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002240:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002244:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002246:	f107 0308 	add.w	r3, r7, #8
 800224a:	4619      	mov	r1, r3
 800224c:	480c      	ldr	r0, [pc, #48]	@ (8002280 <MX_TIM1_Init+0x98>)
 800224e:	f002 f88d 	bl	800436c <HAL_TIM_ConfigClockSource>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM1_Init+0x74>
		Error_Handler();
 8002258:	f000 fa34 	bl	80026c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225c:	2300      	movs	r3, #0
 800225e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002264:	463b      	mov	r3, r7
 8002266:	4619      	mov	r1, r3
 8002268:	4805      	ldr	r0, [pc, #20]	@ (8002280 <MX_TIM1_Init+0x98>)
 800226a:	f002 fa4b 	bl	8004704 <HAL_TIMEx_MasterConfigSynchronization>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8002274:	f000 fa26 	bl	80026c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
}
 8002278:	bf00      	nop
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000318 	.word	0x20000318
 8002284:	40012c00 	.word	0x40012c00

08002288 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800228e:	f107 0310 	add.w	r3, r7, #16
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800229c:	4b33      	ldr	r3, [pc, #204]	@ (800236c <MX_GPIO_Init+0xe4>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4a32      	ldr	r2, [pc, #200]	@ (800236c <MX_GPIO_Init+0xe4>)
 80022a2:	f043 0320 	orr.w	r3, r3, #32
 80022a6:	6193      	str	r3, [r2, #24]
 80022a8:	4b30      	ldr	r3, [pc, #192]	@ (800236c <MX_GPIO_Init+0xe4>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022b4:	4b2d      	ldr	r3, [pc, #180]	@ (800236c <MX_GPIO_Init+0xe4>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	4a2c      	ldr	r2, [pc, #176]	@ (800236c <MX_GPIO_Init+0xe4>)
 80022ba:	f043 0308 	orr.w	r3, r3, #8
 80022be:	6193      	str	r3, [r2, #24]
 80022c0:	4b2a      	ldr	r3, [pc, #168]	@ (800236c <MX_GPIO_Init+0xe4>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80022cc:	4b27      	ldr	r3, [pc, #156]	@ (800236c <MX_GPIO_Init+0xe4>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	4a26      	ldr	r2, [pc, #152]	@ (800236c <MX_GPIO_Init+0xe4>)
 80022d2:	f043 0304 	orr.w	r3, r3, #4
 80022d6:	6193      	str	r3, [r2, #24]
 80022d8:	4b24      	ldr	r3, [pc, #144]	@ (800236c <MX_GPIO_Init+0xe4>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5,
 80022e4:	2200      	movs	r2, #0
 80022e6:	f241 0138 	movw	r1, #4152	@ 0x1038
 80022ea:	4821      	ldr	r0, [pc, #132]	@ (8002370 <MX_GPIO_Init+0xe8>)
 80022ec:	f000 fedb 	bl	80030a6 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80022f0:	2200      	movs	r2, #0
 80022f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022f6:	481f      	ldr	r0, [pc, #124]	@ (8002374 <MX_GPIO_Init+0xec>)
 80022f8:	f000 fed5 	bl	80030a6 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB12 PB3 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80022fc:	f241 0338 	movw	r3, #4152	@ 0x1038
 8002300:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002302:	2301      	movs	r3, #1
 8002304:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2302      	movs	r3, #2
 800230c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230e:	f107 0310 	add.w	r3, r7, #16
 8002312:	4619      	mov	r1, r3
 8002314:	4816      	ldr	r0, [pc, #88]	@ (8002370 <MX_GPIO_Init+0xe8>)
 8002316:	f000 fd2b 	bl	8002d70 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 800231a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800231e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002320:	2301      	movs	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2302      	movs	r3, #2
 800232a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232c:	f107 0310 	add.w	r3, r7, #16
 8002330:	4619      	mov	r1, r3
 8002332:	4810      	ldr	r0, [pc, #64]	@ (8002374 <MX_GPIO_Init+0xec>)
 8002334:	f000 fd1c 	bl	8002d70 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB6 PB7 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8002338:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800233c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800233e:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <MX_GPIO_Init+0xf0>)
 8002340:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002346:	f107 0310 	add.w	r3, r7, #16
 800234a:	4619      	mov	r1, r3
 800234c:	4808      	ldr	r0, [pc, #32]	@ (8002370 <MX_GPIO_Init+0xe8>)
 800234e:	f000 fd0f 	bl	8002d70 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	2017      	movs	r0, #23
 8002358:	f000 fcd3 	bl	8002d02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800235c:	2017      	movs	r0, #23
 800235e:	f000 fcec 	bl	8002d3a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002362:	bf00      	nop
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	40010c00 	.word	0x40010c00
 8002374:	40010800 	.word	0x40010800
 8002378:	10110000 	.word	0x10110000

0800237c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8002386:	f000 fbb7 	bl	8002af8 <HAL_GetTick>
 800238a:	4603      	mov	r3, r0
 800238c:	4aa5      	ldr	r2, [pc, #660]	@ (8002624 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800238e:	6013      	str	r3, [r2, #0]
	if (currentMillis - previousMillis > 10) {
 8002390:	4ba4      	ldr	r3, [pc, #656]	@ (8002624 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4ba4      	ldr	r3, [pc, #656]	@ (8002628 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b0a      	cmp	r3, #10
 800239c:	f240 8180 	bls.w	80026a0 <HAL_GPIO_EXTI_Callback+0x324>
		/*Configure GPIO pins : PB6 PB7 PB8 PB9 to GPIO_INPUT*/
		GPIO_InitStructPrivate.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
 80023a0:	4ba2      	ldr	r3, [pc, #648]	@ (800262c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80023a2:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 80023a6:	601a      	str	r2, [r3, #0]
				| GPIO_PIN_9;
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80023a8:	4ba0      	ldr	r3, [pc, #640]	@ (800262c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80023ae:	4b9f      	ldr	r3, [pc, #636]	@ (800262c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80023b4:	4b9d      	ldr	r3, [pc, #628]	@ (800262c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80023b6:	2202      	movs	r2, #2
 80023b8:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 80023ba:	499c      	ldr	r1, [pc, #624]	@ (800262c <HAL_GPIO_EXTI_Callback+0x2b0>)
 80023bc:	489c      	ldr	r0, [pc, #624]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80023be:	f000 fcd7 	bl	8002d70 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80023c2:	2201      	movs	r2, #1
 80023c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023c8:	489a      	ldr	r0, [pc, #616]	@ (8002634 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80023ca:	f000 fe6c 	bl	80030a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80023ce:	2200      	movs	r2, #0
 80023d0:	2108      	movs	r1, #8
 80023d2:	4897      	ldr	r0, [pc, #604]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80023d4:	f000 fe67 	bl	80030a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80023d8:	2200      	movs	r2, #0
 80023da:	2110      	movs	r1, #16
 80023dc:	4894      	ldr	r0, [pc, #592]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80023de:	f000 fe62 	bl	80030a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2120      	movs	r1, #32
 80023e6:	4892      	ldr	r0, [pc, #584]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80023e8:	f000 fe5d 	bl	80030a6 <HAL_GPIO_WritePin>
		if (GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	2b40      	cmp	r3, #64	@ 0x40
 80023f0:	d10a      	bne.n	8002408 <HAL_GPIO_EXTI_Callback+0x8c>
 80023f2:	2140      	movs	r1, #64	@ 0x40
 80023f4:	488e      	ldr	r0, [pc, #568]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80023f6:	f000 fe3f 	bl	8003078 <HAL_GPIO_ReadPin>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_EXTI_Callback+0x8c>
			keyPressed = 68;        //ASCII value of D
 8002400:	4b8d      	ldr	r3, [pc, #564]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002402:	2244      	movs	r2, #68	@ 0x44
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	e02c      	b.n	8002462 <HAL_GPIO_EXTI_Callback+0xe6>
		} else if (GPIO_Pin == GPIO_PIN_7
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	2b80      	cmp	r3, #128	@ 0x80
 800240c:	d10a      	bne.n	8002424 <HAL_GPIO_EXTI_Callback+0xa8>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)) {
 800240e:	2180      	movs	r1, #128	@ 0x80
 8002410:	4887      	ldr	r0, [pc, #540]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002412:	f000 fe31 	bl	8003078 <HAL_GPIO_ReadPin>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_EXTI_Callback+0xa8>
			keyPressed = 67;        //ASCII value of C
 800241c:	4b86      	ldr	r3, [pc, #536]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800241e:	2243      	movs	r2, #67	@ 0x43
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	e01e      	b.n	8002462 <HAL_GPIO_EXTI_Callback+0xe6>
		} else if (GPIO_Pin == GPIO_PIN_8
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800242a:	d10b      	bne.n	8002444 <HAL_GPIO_EXTI_Callback+0xc8>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 800242c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002430:	487f      	ldr	r0, [pc, #508]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002432:	f000 fe21 	bl	8003078 <HAL_GPIO_ReadPin>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_EXTI_Callback+0xc8>
			keyPressed = 66;        //ASCII value of B
 800243c:	4b7e      	ldr	r3, [pc, #504]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800243e:	2242      	movs	r2, #66	@ 0x42
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	e00e      	b.n	8002462 <HAL_GPIO_EXTI_Callback+0xe6>
		} else if (GPIO_Pin == GPIO_PIN_9
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800244a:	d10a      	bne.n	8002462 <HAL_GPIO_EXTI_Callback+0xe6>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)) {
 800244c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002450:	4877      	ldr	r0, [pc, #476]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002452:	f000 fe11 	bl	8003078 <HAL_GPIO_ReadPin>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <HAL_GPIO_EXTI_Callback+0xe6>
			keyPressed = 65;        //ASCII value of A
 800245c:	4b76      	ldr	r3, [pc, #472]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800245e:	2241      	movs	r2, #65	@ 0x41
 8002460:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002468:	4872      	ldr	r0, [pc, #456]	@ (8002634 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800246a:	f000 fe1c 	bl	80030a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800246e:	2201      	movs	r2, #1
 8002470:	2108      	movs	r1, #8
 8002472:	486f      	ldr	r0, [pc, #444]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002474:	f000 fe17 	bl	80030a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8002478:	2200      	movs	r2, #0
 800247a:	2110      	movs	r1, #16
 800247c:	486c      	ldr	r0, [pc, #432]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 800247e:	f000 fe12 	bl	80030a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8002482:	2200      	movs	r2, #0
 8002484:	2120      	movs	r1, #32
 8002486:	486a      	ldr	r0, [pc, #424]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002488:	f000 fe0d 	bl	80030a6 <HAL_GPIO_WritePin>
		if (GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	2b40      	cmp	r3, #64	@ 0x40
 8002490:	d10a      	bne.n	80024a8 <HAL_GPIO_EXTI_Callback+0x12c>
 8002492:	2140      	movs	r1, #64	@ 0x40
 8002494:	4866      	ldr	r0, [pc, #408]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002496:	f000 fdef 	bl	8003078 <HAL_GPIO_ReadPin>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_EXTI_Callback+0x12c>
			keyPressed = 35;        //ASCII value of #
 80024a0:	4b65      	ldr	r3, [pc, #404]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80024a2:	2223      	movs	r2, #35	@ 0x23
 80024a4:	701a      	strb	r2, [r3, #0]
 80024a6:	e02c      	b.n	8002502 <HAL_GPIO_EXTI_Callback+0x186>
		} else if (GPIO_Pin == GPIO_PIN_7
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	2b80      	cmp	r3, #128	@ 0x80
 80024ac:	d10a      	bne.n	80024c4 <HAL_GPIO_EXTI_Callback+0x148>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)) {
 80024ae:	2180      	movs	r1, #128	@ 0x80
 80024b0:	485f      	ldr	r0, [pc, #380]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80024b2:	f000 fde1 	bl	8003078 <HAL_GPIO_ReadPin>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_EXTI_Callback+0x148>
			keyPressed = 57;        //ASCII value of 9
 80024bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80024be:	2239      	movs	r2, #57	@ 0x39
 80024c0:	701a      	strb	r2, [r3, #0]
 80024c2:	e01e      	b.n	8002502 <HAL_GPIO_EXTI_Callback+0x186>
		} else if (GPIO_Pin == GPIO_PIN_8
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024ca:	d10b      	bne.n	80024e4 <HAL_GPIO_EXTI_Callback+0x168>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 80024cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024d0:	4857      	ldr	r0, [pc, #348]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80024d2:	f000 fdd1 	bl	8003078 <HAL_GPIO_ReadPin>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_EXTI_Callback+0x168>
			keyPressed = 54;        //ASCII value of 6
 80024dc:	4b56      	ldr	r3, [pc, #344]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80024de:	2236      	movs	r2, #54	@ 0x36
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e00e      	b.n	8002502 <HAL_GPIO_EXTI_Callback+0x186>
		} else if (GPIO_Pin == GPIO_PIN_9
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024ea:	d10a      	bne.n	8002502 <HAL_GPIO_EXTI_Callback+0x186>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)) {
 80024ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024f0:	484f      	ldr	r0, [pc, #316]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80024f2:	f000 fdc1 	bl	8003078 <HAL_GPIO_ReadPin>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <HAL_GPIO_EXTI_Callback+0x186>
			keyPressed = 51;        //ASCII value of 3
 80024fc:	4b4e      	ldr	r3, [pc, #312]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80024fe:	2233      	movs	r2, #51	@ 0x33
 8002500:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002508:	484a      	ldr	r0, [pc, #296]	@ (8002634 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800250a:	f000 fdcc 	bl	80030a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 800250e:	2200      	movs	r2, #0
 8002510:	2108      	movs	r1, #8
 8002512:	4847      	ldr	r0, [pc, #284]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002514:	f000 fdc7 	bl	80030a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8002518:	2201      	movs	r2, #1
 800251a:	2110      	movs	r1, #16
 800251c:	4844      	ldr	r0, [pc, #272]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 800251e:	f000 fdc2 	bl	80030a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2120      	movs	r1, #32
 8002526:	4842      	ldr	r0, [pc, #264]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002528:	f000 fdbd 	bl	80030a6 <HAL_GPIO_WritePin>
		if (GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	2b40      	cmp	r3, #64	@ 0x40
 8002530:	d10a      	bne.n	8002548 <HAL_GPIO_EXTI_Callback+0x1cc>
 8002532:	2140      	movs	r1, #64	@ 0x40
 8002534:	483e      	ldr	r0, [pc, #248]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002536:	f000 fd9f 	bl	8003078 <HAL_GPIO_ReadPin>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_EXTI_Callback+0x1cc>
			keyPressed = 48;        //ASCII value of 0
 8002540:	4b3d      	ldr	r3, [pc, #244]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002542:	2230      	movs	r2, #48	@ 0x30
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e02c      	b.n	80025a2 <HAL_GPIO_EXTI_Callback+0x226>
		} else if (GPIO_Pin == GPIO_PIN_7
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	2b80      	cmp	r3, #128	@ 0x80
 800254c:	d10a      	bne.n	8002564 <HAL_GPIO_EXTI_Callback+0x1e8>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)) {
 800254e:	2180      	movs	r1, #128	@ 0x80
 8002550:	4837      	ldr	r0, [pc, #220]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002552:	f000 fd91 	bl	8003078 <HAL_GPIO_ReadPin>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_EXTI_Callback+0x1e8>
			keyPressed = 56;        //ASCII value of 8
 800255c:	4b36      	ldr	r3, [pc, #216]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800255e:	2238      	movs	r2, #56	@ 0x38
 8002560:	701a      	strb	r2, [r3, #0]
 8002562:	e01e      	b.n	80025a2 <HAL_GPIO_EXTI_Callback+0x226>
		} else if (GPIO_Pin == GPIO_PIN_8
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800256a:	d10b      	bne.n	8002584 <HAL_GPIO_EXTI_Callback+0x208>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 800256c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002570:	482f      	ldr	r0, [pc, #188]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002572:	f000 fd81 	bl	8003078 <HAL_GPIO_ReadPin>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_EXTI_Callback+0x208>
			keyPressed = 53;        //ASCII value of 5
 800257c:	4b2e      	ldr	r3, [pc, #184]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800257e:	2235      	movs	r2, #53	@ 0x35
 8002580:	701a      	strb	r2, [r3, #0]
 8002582:	e00e      	b.n	80025a2 <HAL_GPIO_EXTI_Callback+0x226>
		} else if (GPIO_Pin == GPIO_PIN_9
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800258a:	d10a      	bne.n	80025a2 <HAL_GPIO_EXTI_Callback+0x226>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)) {
 800258c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002590:	4827      	ldr	r0, [pc, #156]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002592:	f000 fd71 	bl	8003078 <HAL_GPIO_ReadPin>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <HAL_GPIO_EXTI_Callback+0x226>
			keyPressed = 50;        //ASCII value of 2
 800259c:	4b26      	ldr	r3, [pc, #152]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800259e:	2232      	movs	r2, #50	@ 0x32
 80025a0:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025a8:	4822      	ldr	r0, [pc, #136]	@ (8002634 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80025aa:	f000 fd7c 	bl	80030a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2108      	movs	r1, #8
 80025b2:	481f      	ldr	r0, [pc, #124]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80025b4:	f000 fd77 	bl	80030a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2110      	movs	r1, #16
 80025bc:	481c      	ldr	r0, [pc, #112]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80025be:	f000 fd72 	bl	80030a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80025c2:	2201      	movs	r2, #1
 80025c4:	2120      	movs	r1, #32
 80025c6:	481a      	ldr	r0, [pc, #104]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80025c8:	f000 fd6d 	bl	80030a6 <HAL_GPIO_WritePin>
		if (GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	2b40      	cmp	r3, #64	@ 0x40
 80025d0:	d10a      	bne.n	80025e8 <HAL_GPIO_EXTI_Callback+0x26c>
 80025d2:	2140      	movs	r1, #64	@ 0x40
 80025d4:	4816      	ldr	r0, [pc, #88]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80025d6:	f000 fd4f 	bl	8003078 <HAL_GPIO_ReadPin>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_EXTI_Callback+0x26c>
			keyPressed = 42;        //ASCII value of *
 80025e0:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80025e2:	222a      	movs	r2, #42	@ 0x2a
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	e038      	b.n	800265a <HAL_GPIO_EXTI_Callback+0x2de>
		} else if (GPIO_Pin == GPIO_PIN_7
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	2b80      	cmp	r3, #128	@ 0x80
 80025ec:	d10a      	bne.n	8002604 <HAL_GPIO_EXTI_Callback+0x288>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)) {
 80025ee:	2180      	movs	r1, #128	@ 0x80
 80025f0:	480f      	ldr	r0, [pc, #60]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80025f2:	f000 fd41 	bl	8003078 <HAL_GPIO_ReadPin>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_EXTI_Callback+0x288>
			keyPressed = 55;        //ASCII value of 7
 80025fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80025fe:	2237      	movs	r2, #55	@ 0x37
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	e02a      	b.n	800265a <HAL_GPIO_EXTI_Callback+0x2de>
		} else if (GPIO_Pin == GPIO_PIN_8
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800260a:	d117      	bne.n	800263c <HAL_GPIO_EXTI_Callback+0x2c0>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 800260c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002610:	4807      	ldr	r0, [pc, #28]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002612:	f000 fd31 	bl	8003078 <HAL_GPIO_ReadPin>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00f      	beq.n	800263c <HAL_GPIO_EXTI_Callback+0x2c0>
			keyPressed = 52;        //ASCII value of 4
 800261c:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800261e:	2234      	movs	r2, #52	@ 0x34
 8002620:	701a      	strb	r2, [r3, #0]
 8002622:	e01a      	b.n	800265a <HAL_GPIO_EXTI_Callback+0x2de>
 8002624:	20000374 	.word	0x20000374
 8002628:	20000370 	.word	0x20000370
 800262c:	20000360 	.word	0x20000360
 8002630:	40010c00 	.word	0x40010c00
 8002634:	40010800 	.word	0x40010800
 8002638:	20000378 	.word	0x20000378
		} else if (GPIO_Pin == GPIO_PIN_9
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002642:	d10a      	bne.n	800265a <HAL_GPIO_EXTI_Callback+0x2de>
				&& HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)) {
 8002644:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002648:	4817      	ldr	r0, [pc, #92]	@ (80026a8 <HAL_GPIO_EXTI_Callback+0x32c>)
 800264a:	f000 fd15 	bl	8003078 <HAL_GPIO_ReadPin>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <HAL_GPIO_EXTI_Callback+0x2de>
			keyPressed = 49;        //ASCII value of 1
 8002654:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <HAL_GPIO_EXTI_Callback+0x330>)
 8002656:	2231      	movs	r2, #49	@ 0x31
 8002658:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800265a:	2201      	movs	r2, #1
 800265c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002660:	4813      	ldr	r0, [pc, #76]	@ (80026b0 <HAL_GPIO_EXTI_Callback+0x334>)
 8002662:	f000 fd20 	bl	80030a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8002666:	2201      	movs	r2, #1
 8002668:	2108      	movs	r1, #8
 800266a:	480f      	ldr	r0, [pc, #60]	@ (80026a8 <HAL_GPIO_EXTI_Callback+0x32c>)
 800266c:	f000 fd1b 	bl	80030a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8002670:	2201      	movs	r2, #1
 8002672:	2110      	movs	r1, #16
 8002674:	480c      	ldr	r0, [pc, #48]	@ (80026a8 <HAL_GPIO_EXTI_Callback+0x32c>)
 8002676:	f000 fd16 	bl	80030a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800267a:	2201      	movs	r2, #1
 800267c:	2120      	movs	r1, #32
 800267e:	480a      	ldr	r0, [pc, #40]	@ (80026a8 <HAL_GPIO_EXTI_Callback+0x32c>)
 8002680:	f000 fd11 	bl	80030a6 <HAL_GPIO_WritePin>
		/*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8002684:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <HAL_GPIO_EXTI_Callback+0x338>)
 8002686:	4a0c      	ldr	r2, [pc, #48]	@ (80026b8 <HAL_GPIO_EXTI_Callback+0x33c>)
 8002688:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 800268a:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <HAL_GPIO_EXTI_Callback+0x338>)
 800268c:	2202      	movs	r2, #2
 800268e:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8002690:	4908      	ldr	r1, [pc, #32]	@ (80026b4 <HAL_GPIO_EXTI_Callback+0x338>)
 8002692:	4805      	ldr	r0, [pc, #20]	@ (80026a8 <HAL_GPIO_EXTI_Callback+0x32c>)
 8002694:	f000 fb6c 	bl	8002d70 <HAL_GPIO_Init>
		previousMillis = currentMillis;
 8002698:	4b08      	ldr	r3, [pc, #32]	@ (80026bc <HAL_GPIO_EXTI_Callback+0x340>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a08      	ldr	r2, [pc, #32]	@ (80026c0 <HAL_GPIO_EXTI_Callback+0x344>)
 800269e:	6013      	str	r3, [r2, #0]
	}
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40010c00 	.word	0x40010c00
 80026ac:	20000378 	.word	0x20000378
 80026b0:	40010800 	.word	0x40010800
 80026b4:	20000360 	.word	0x20000360
 80026b8:	10110000 	.word	0x10110000
 80026bc:	20000374 	.word	0x20000374
 80026c0:	20000370 	.word	0x20000370

080026c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c8:	b672      	cpsid	i
}
 80026ca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80026cc:	bf00      	nop
 80026ce:	e7fd      	b.n	80026cc <Error_Handler+0x8>

080026d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026d6:	4b15      	ldr	r3, [pc, #84]	@ (800272c <HAL_MspInit+0x5c>)
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	4a14      	ldr	r2, [pc, #80]	@ (800272c <HAL_MspInit+0x5c>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6193      	str	r3, [r2, #24]
 80026e2:	4b12      	ldr	r3, [pc, #72]	@ (800272c <HAL_MspInit+0x5c>)
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ee:	4b0f      	ldr	r3, [pc, #60]	@ (800272c <HAL_MspInit+0x5c>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	4a0e      	ldr	r2, [pc, #56]	@ (800272c <HAL_MspInit+0x5c>)
 80026f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f8:	61d3      	str	r3, [r2, #28]
 80026fa:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <HAL_MspInit+0x5c>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002706:	4b0a      	ldr	r3, [pc, #40]	@ (8002730 <HAL_MspInit+0x60>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	4a04      	ldr	r2, [pc, #16]	@ (8002730 <HAL_MspInit+0x60>)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	40021000 	.word	0x40021000
 8002730:	40010000 	.word	0x40010000

08002734 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 0310 	add.w	r3, r7, #16
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a16      	ldr	r2, [pc, #88]	@ (80027a8 <HAL_I2C_MspInit+0x74>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d124      	bne.n	800279e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002754:	4b15      	ldr	r3, [pc, #84]	@ (80027ac <HAL_I2C_MspInit+0x78>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	4a14      	ldr	r2, [pc, #80]	@ (80027ac <HAL_I2C_MspInit+0x78>)
 800275a:	f043 0308 	orr.w	r3, r3, #8
 800275e:	6193      	str	r3, [r2, #24]
 8002760:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <HAL_I2C_MspInit+0x78>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800276c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002770:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002772:	2312      	movs	r3, #18
 8002774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002776:	2303      	movs	r3, #3
 8002778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277a:	f107 0310 	add.w	r3, r7, #16
 800277e:	4619      	mov	r1, r3
 8002780:	480b      	ldr	r0, [pc, #44]	@ (80027b0 <HAL_I2C_MspInit+0x7c>)
 8002782:	f000 faf5 	bl	8002d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002786:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <HAL_I2C_MspInit+0x78>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	4a08      	ldr	r2, [pc, #32]	@ (80027ac <HAL_I2C_MspInit+0x78>)
 800278c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002790:	61d3      	str	r3, [r2, #28]
 8002792:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <HAL_I2C_MspInit+0x78>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800279e:	bf00      	nop
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40005800 	.word	0x40005800
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40010c00 	.word	0x40010c00

080027b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a09      	ldr	r2, [pc, #36]	@ (80027e8 <HAL_TIM_Base_MspInit+0x34>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d10b      	bne.n	80027de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027c6:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <HAL_TIM_Base_MspInit+0x38>)
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	4a08      	ldr	r2, [pc, #32]	@ (80027ec <HAL_TIM_Base_MspInit+0x38>)
 80027cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027d0:	6193      	str	r3, [r2, #24]
 80027d2:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <HAL_TIM_Base_MspInit+0x38>)
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr
 80027e8:	40012c00 	.word	0x40012c00
 80027ec:	40021000 	.word	0x40021000

080027f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027f4:	bf00      	nop
 80027f6:	e7fd      	b.n	80027f4 <NMI_Handler+0x4>

080027f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <HardFault_Handler+0x4>

08002800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002804:	bf00      	nop
 8002806:	e7fd      	b.n	8002804 <MemManage_Handler+0x4>

08002808 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800280c:	bf00      	nop
 800280e:	e7fd      	b.n	800280c <BusFault_Handler+0x4>

08002810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <UsageFault_Handler+0x4>

08002818 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002840:	f000 f948 	bl	8002ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}

08002848 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800284c:	2040      	movs	r0, #64	@ 0x40
 800284e:	f000 fc43 	bl	80030d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002852:	2080      	movs	r0, #128	@ 0x80
 8002854:	f000 fc40 	bl	80030d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002858:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800285c:	f000 fc3c 	bl	80030d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002860:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002864:	f000 fc38 	bl	80030d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}

0800286c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return 1;
 8002870:	2301      	movs	r3, #1
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <_kill>:

int _kill(int pid, int sig)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002884:	f003 fd0c 	bl	80062a0 <__errno>
 8002888:	4603      	mov	r3, r0
 800288a:	2216      	movs	r2, #22
 800288c:	601a      	str	r2, [r3, #0]
  return -1;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <_exit>:

void _exit (int status)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028a2:	f04f 31ff 	mov.w	r1, #4294967295
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff ffe7 	bl	800287a <_kill>
  while (1) {}    /* Make sure we hang here */
 80028ac:	bf00      	nop
 80028ae:	e7fd      	b.n	80028ac <_exit+0x12>

080028b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	e00a      	b.n	80028d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028c2:	f3af 8000 	nop.w
 80028c6:	4601      	mov	r1, r0
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	60ba      	str	r2, [r7, #8]
 80028ce:	b2ca      	uxtb	r2, r1
 80028d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	3301      	adds	r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	429a      	cmp	r2, r3
 80028de:	dbf0      	blt.n	80028c2 <_read+0x12>
  }

  return len;
 80028e0:	687b      	ldr	r3, [r7, #4]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b086      	sub	sp, #24
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	e009      	b.n	8002910 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	60ba      	str	r2, [r7, #8]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	3301      	adds	r3, #1
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	429a      	cmp	r2, r3
 8002916:	dbf1      	blt.n	80028fc <_write+0x12>
  }
  return len;
 8002918:	687b      	ldr	r3, [r7, #4]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <_close>:

int _close(int file)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800292a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002948:	605a      	str	r2, [r3, #4]
  return 0;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <_isatty>:

int _isatty(int file)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800295e:	2301      	movs	r3, #1
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800296a:	b480      	push	{r7}
 800296c:	b085      	sub	sp, #20
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
	...

08002984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800298c:	4a14      	ldr	r2, [pc, #80]	@ (80029e0 <_sbrk+0x5c>)
 800298e:	4b15      	ldr	r3, [pc, #84]	@ (80029e4 <_sbrk+0x60>)
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002998:	4b13      	ldr	r3, [pc, #76]	@ (80029e8 <_sbrk+0x64>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d102      	bne.n	80029a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029a0:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <_sbrk+0x64>)
 80029a2:	4a12      	ldr	r2, [pc, #72]	@ (80029ec <_sbrk+0x68>)
 80029a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029a6:	4b10      	ldr	r3, [pc, #64]	@ (80029e8 <_sbrk+0x64>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d207      	bcs.n	80029c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029b4:	f003 fc74 	bl	80062a0 <__errno>
 80029b8:	4603      	mov	r3, r0
 80029ba:	220c      	movs	r2, #12
 80029bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029be:	f04f 33ff 	mov.w	r3, #4294967295
 80029c2:	e009      	b.n	80029d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029c4:	4b08      	ldr	r3, [pc, #32]	@ (80029e8 <_sbrk+0x64>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ca:	4b07      	ldr	r3, [pc, #28]	@ (80029e8 <_sbrk+0x64>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	4a05      	ldr	r2, [pc, #20]	@ (80029e8 <_sbrk+0x64>)
 80029d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029d6:	68fb      	ldr	r3, [r7, #12]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20005000 	.word	0x20005000
 80029e4:	00000400 	.word	0x00000400
 80029e8:	20000930 	.word	0x20000930
 80029ec:	20000a88 	.word	0x20000a88

080029f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029fc:	f7ff fff8 	bl	80029f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a00:	480b      	ldr	r0, [pc, #44]	@ (8002a30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a02:	490c      	ldr	r1, [pc, #48]	@ (8002a34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a04:	4a0c      	ldr	r2, [pc, #48]	@ (8002a38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a08:	e002      	b.n	8002a10 <LoopCopyDataInit>

08002a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a0e:	3304      	adds	r3, #4

08002a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a14:	d3f9      	bcc.n	8002a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a16:	4a09      	ldr	r2, [pc, #36]	@ (8002a3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a18:	4c09      	ldr	r4, [pc, #36]	@ (8002a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a1c:	e001      	b.n	8002a22 <LoopFillZerobss>

08002a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a20:	3204      	adds	r2, #4

08002a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a24:	d3fb      	bcc.n	8002a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a26:	f003 fc41 	bl	80062ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a2a:	f7ff fa75 	bl	8001f18 <main>
  bx lr
 8002a2e:	4770      	bx	lr
  ldr r0, =_sdata
 8002a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a34:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 8002a38:	080085c4 	.word	0x080085c4
  ldr r2, =_sbss
 8002a3c:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8002a40:	20000a84 	.word	0x20000a84

08002a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a44:	e7fe      	b.n	8002a44 <ADC1_2_IRQHandler>
	...

08002a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a4c:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <HAL_Init+0x28>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a07      	ldr	r2, [pc, #28]	@ (8002a70 <HAL_Init+0x28>)
 8002a52:	f043 0310 	orr.w	r3, r3, #16
 8002a56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a58:	2003      	movs	r0, #3
 8002a5a:	f000 f947 	bl	8002cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a5e:	200f      	movs	r0, #15
 8002a60:	f000 f808 	bl	8002a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a64:	f7ff fe34 	bl	80026d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40022000 	.word	0x40022000

08002a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a7c:	4b12      	ldr	r3, [pc, #72]	@ (8002ac8 <HAL_InitTick+0x54>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b12      	ldr	r3, [pc, #72]	@ (8002acc <HAL_InitTick+0x58>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f95f 	bl	8002d56 <HAL_SYSTICK_Config>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e00e      	b.n	8002ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b0f      	cmp	r3, #15
 8002aa6:	d80a      	bhi.n	8002abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab0:	f000 f927 	bl	8002d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ab4:	4a06      	ldr	r2, [pc, #24]	@ (8002ad0 <HAL_InitTick+0x5c>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	e000      	b.n	8002ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	200000b8 	.word	0x200000b8
 8002acc:	200000c0 	.word	0x200000c0
 8002ad0:	200000bc 	.word	0x200000bc

08002ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ad8:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <HAL_IncTick+0x1c>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b05      	ldr	r3, [pc, #20]	@ (8002af4 <HAL_IncTick+0x20>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	4a03      	ldr	r2, [pc, #12]	@ (8002af4 <HAL_IncTick+0x20>)
 8002ae6:	6013      	str	r3, [r2, #0]
}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	200000c0 	.word	0x200000c0
 8002af4:	20000934 	.word	0x20000934

08002af8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return uwTick;
 8002afc:	4b02      	ldr	r3, [pc, #8]	@ (8002b08 <HAL_GetTick+0x10>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	20000934 	.word	0x20000934

08002b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b14:	f7ff fff0 	bl	8002af8 <HAL_GetTick>
 8002b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d005      	beq.n	8002b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b26:	4b0a      	ldr	r3, [pc, #40]	@ (8002b50 <HAL_Delay+0x44>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b32:	bf00      	nop
 8002b34:	f7ff ffe0 	bl	8002af8 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d8f7      	bhi.n	8002b34 <HAL_Delay+0x28>
  {
  }
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	200000c0 	.word	0x200000c0

08002b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b64:	4b0c      	ldr	r3, [pc, #48]	@ (8002b98 <__NVIC_SetPriorityGrouping+0x44>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b70:	4013      	ands	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b86:	4a04      	ldr	r2, [pc, #16]	@ (8002b98 <__NVIC_SetPriorityGrouping+0x44>)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	60d3      	str	r3, [r2, #12]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba0:	4b04      	ldr	r3, [pc, #16]	@ (8002bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	0a1b      	lsrs	r3, r3, #8
 8002ba6:	f003 0307 	and.w	r3, r3, #7
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	db0b      	blt.n	8002be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	f003 021f 	and.w	r2, r3, #31
 8002bd0:	4906      	ldr	r1, [pc, #24]	@ (8002bec <__NVIC_EnableIRQ+0x34>)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	2001      	movs	r0, #1
 8002bda:	fa00 f202 	lsl.w	r2, r0, r2
 8002bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	e000e100 	.word	0xe000e100

08002bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	6039      	str	r1, [r7, #0]
 8002bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	db0a      	blt.n	8002c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	490c      	ldr	r1, [pc, #48]	@ (8002c3c <__NVIC_SetPriority+0x4c>)
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	0112      	lsls	r2, r2, #4
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	440b      	add	r3, r1
 8002c14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c18:	e00a      	b.n	8002c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4908      	ldr	r1, [pc, #32]	@ (8002c40 <__NVIC_SetPriority+0x50>)
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	3b04      	subs	r3, #4
 8002c28:	0112      	lsls	r2, r2, #4
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	761a      	strb	r2, [r3, #24]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	e000e100 	.word	0xe000e100
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	@ 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f1c3 0307 	rsb	r3, r3, #7
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	bf28      	it	cs
 8002c62:	2304      	movcs	r3, #4
 8002c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	2b06      	cmp	r3, #6
 8002c6c:	d902      	bls.n	8002c74 <NVIC_EncodePriority+0x30>
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3b03      	subs	r3, #3
 8002c72:	e000      	b.n	8002c76 <NVIC_EncodePriority+0x32>
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c78:	f04f 32ff 	mov.w	r2, #4294967295
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43da      	mvns	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	401a      	ands	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	fa01 f303 	lsl.w	r3, r1, r3
 8002c96:	43d9      	mvns	r1, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9c:	4313      	orrs	r3, r2
         );
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3724      	adds	r7, #36	@ 0x24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cb8:	d301      	bcc.n	8002cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00f      	b.n	8002cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce8 <SysTick_Config+0x40>)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cc6:	210f      	movs	r1, #15
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	f7ff ff90 	bl	8002bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cd0:	4b05      	ldr	r3, [pc, #20]	@ (8002ce8 <SysTick_Config+0x40>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cd6:	4b04      	ldr	r3, [pc, #16]	@ (8002ce8 <SysTick_Config+0x40>)
 8002cd8:	2207      	movs	r2, #7
 8002cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	e000e010 	.word	0xe000e010

08002cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ff2d 	bl	8002b54 <__NVIC_SetPriorityGrouping>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b086      	sub	sp, #24
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	4603      	mov	r3, r0
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d14:	f7ff ff42 	bl	8002b9c <__NVIC_GetPriorityGrouping>
 8002d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	6978      	ldr	r0, [r7, #20]
 8002d20:	f7ff ff90 	bl	8002c44 <NVIC_EncodePriority>
 8002d24:	4602      	mov	r2, r0
 8002d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff5f 	bl	8002bf0 <__NVIC_SetPriority>
}
 8002d32:	bf00      	nop
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	4603      	mov	r3, r0
 8002d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff35 	bl	8002bb8 <__NVIC_EnableIRQ>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff ffa2 	bl	8002ca8 <SysTick_Config>
 8002d64:	4603      	mov	r3, r0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b08b      	sub	sp, #44	@ 0x2c
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d82:	e169      	b.n	8003058 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d84:	2201      	movs	r2, #1
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	f040 8158 	bne.w	8003052 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4a9a      	ldr	r2, [pc, #616]	@ (8003010 <HAL_GPIO_Init+0x2a0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d05e      	beq.n	8002e6a <HAL_GPIO_Init+0xfa>
 8002dac:	4a98      	ldr	r2, [pc, #608]	@ (8003010 <HAL_GPIO_Init+0x2a0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d875      	bhi.n	8002e9e <HAL_GPIO_Init+0x12e>
 8002db2:	4a98      	ldr	r2, [pc, #608]	@ (8003014 <HAL_GPIO_Init+0x2a4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d058      	beq.n	8002e6a <HAL_GPIO_Init+0xfa>
 8002db8:	4a96      	ldr	r2, [pc, #600]	@ (8003014 <HAL_GPIO_Init+0x2a4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d86f      	bhi.n	8002e9e <HAL_GPIO_Init+0x12e>
 8002dbe:	4a96      	ldr	r2, [pc, #600]	@ (8003018 <HAL_GPIO_Init+0x2a8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d052      	beq.n	8002e6a <HAL_GPIO_Init+0xfa>
 8002dc4:	4a94      	ldr	r2, [pc, #592]	@ (8003018 <HAL_GPIO_Init+0x2a8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d869      	bhi.n	8002e9e <HAL_GPIO_Init+0x12e>
 8002dca:	4a94      	ldr	r2, [pc, #592]	@ (800301c <HAL_GPIO_Init+0x2ac>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d04c      	beq.n	8002e6a <HAL_GPIO_Init+0xfa>
 8002dd0:	4a92      	ldr	r2, [pc, #584]	@ (800301c <HAL_GPIO_Init+0x2ac>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d863      	bhi.n	8002e9e <HAL_GPIO_Init+0x12e>
 8002dd6:	4a92      	ldr	r2, [pc, #584]	@ (8003020 <HAL_GPIO_Init+0x2b0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d046      	beq.n	8002e6a <HAL_GPIO_Init+0xfa>
 8002ddc:	4a90      	ldr	r2, [pc, #576]	@ (8003020 <HAL_GPIO_Init+0x2b0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d85d      	bhi.n	8002e9e <HAL_GPIO_Init+0x12e>
 8002de2:	2b12      	cmp	r3, #18
 8002de4:	d82a      	bhi.n	8002e3c <HAL_GPIO_Init+0xcc>
 8002de6:	2b12      	cmp	r3, #18
 8002de8:	d859      	bhi.n	8002e9e <HAL_GPIO_Init+0x12e>
 8002dea:	a201      	add	r2, pc, #4	@ (adr r2, 8002df0 <HAL_GPIO_Init+0x80>)
 8002dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df0:	08002e6b 	.word	0x08002e6b
 8002df4:	08002e45 	.word	0x08002e45
 8002df8:	08002e57 	.word	0x08002e57
 8002dfc:	08002e99 	.word	0x08002e99
 8002e00:	08002e9f 	.word	0x08002e9f
 8002e04:	08002e9f 	.word	0x08002e9f
 8002e08:	08002e9f 	.word	0x08002e9f
 8002e0c:	08002e9f 	.word	0x08002e9f
 8002e10:	08002e9f 	.word	0x08002e9f
 8002e14:	08002e9f 	.word	0x08002e9f
 8002e18:	08002e9f 	.word	0x08002e9f
 8002e1c:	08002e9f 	.word	0x08002e9f
 8002e20:	08002e9f 	.word	0x08002e9f
 8002e24:	08002e9f 	.word	0x08002e9f
 8002e28:	08002e9f 	.word	0x08002e9f
 8002e2c:	08002e9f 	.word	0x08002e9f
 8002e30:	08002e9f 	.word	0x08002e9f
 8002e34:	08002e4d 	.word	0x08002e4d
 8002e38:	08002e61 	.word	0x08002e61
 8002e3c:	4a79      	ldr	r2, [pc, #484]	@ (8003024 <HAL_GPIO_Init+0x2b4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e42:	e02c      	b.n	8002e9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	623b      	str	r3, [r7, #32]
          break;
 8002e4a:	e029      	b.n	8002ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	3304      	adds	r3, #4
 8002e52:	623b      	str	r3, [r7, #32]
          break;
 8002e54:	e024      	b.n	8002ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	623b      	str	r3, [r7, #32]
          break;
 8002e5e:	e01f      	b.n	8002ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	330c      	adds	r3, #12
 8002e66:	623b      	str	r3, [r7, #32]
          break;
 8002e68:	e01a      	b.n	8002ea0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e72:	2304      	movs	r3, #4
 8002e74:	623b      	str	r3, [r7, #32]
          break;
 8002e76:	e013      	b.n	8002ea0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d105      	bne.n	8002e8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e80:	2308      	movs	r3, #8
 8002e82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	611a      	str	r2, [r3, #16]
          break;
 8002e8a:	e009      	b.n	8002ea0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e8c:	2308      	movs	r3, #8
 8002e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	615a      	str	r2, [r3, #20]
          break;
 8002e96:	e003      	b.n	8002ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	623b      	str	r3, [r7, #32]
          break;
 8002e9c:	e000      	b.n	8002ea0 <HAL_GPIO_Init+0x130>
          break;
 8002e9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2bff      	cmp	r3, #255	@ 0xff
 8002ea4:	d801      	bhi.n	8002eaa <HAL_GPIO_Init+0x13a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	e001      	b.n	8002eae <HAL_GPIO_Init+0x13e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3304      	adds	r3, #4
 8002eae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2bff      	cmp	r3, #255	@ 0xff
 8002eb4:	d802      	bhi.n	8002ebc <HAL_GPIO_Init+0x14c>
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	e002      	b.n	8002ec2 <HAL_GPIO_Init+0x152>
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	3b08      	subs	r3, #8
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	210f      	movs	r1, #15
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	6a39      	ldr	r1, [r7, #32]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8002edc:	431a      	orrs	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 80b1 	beq.w	8003052 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8003028 <HAL_GPIO_Init+0x2b8>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	4a4c      	ldr	r2, [pc, #304]	@ (8003028 <HAL_GPIO_Init+0x2b8>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6193      	str	r3, [r2, #24]
 8002efc:	4b4a      	ldr	r3, [pc, #296]	@ (8003028 <HAL_GPIO_Init+0x2b8>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f08:	4a48      	ldr	r2, [pc, #288]	@ (800302c <HAL_GPIO_Init+0x2bc>)
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	3302      	adds	r3, #2
 8002f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	220f      	movs	r2, #15
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a40      	ldr	r2, [pc, #256]	@ (8003030 <HAL_GPIO_Init+0x2c0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d013      	beq.n	8002f5c <HAL_GPIO_Init+0x1ec>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a3f      	ldr	r2, [pc, #252]	@ (8003034 <HAL_GPIO_Init+0x2c4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00d      	beq.n	8002f58 <HAL_GPIO_Init+0x1e8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a3e      	ldr	r2, [pc, #248]	@ (8003038 <HAL_GPIO_Init+0x2c8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d007      	beq.n	8002f54 <HAL_GPIO_Init+0x1e4>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a3d      	ldr	r2, [pc, #244]	@ (800303c <HAL_GPIO_Init+0x2cc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d101      	bne.n	8002f50 <HAL_GPIO_Init+0x1e0>
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e006      	b.n	8002f5e <HAL_GPIO_Init+0x1ee>
 8002f50:	2304      	movs	r3, #4
 8002f52:	e004      	b.n	8002f5e <HAL_GPIO_Init+0x1ee>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e002      	b.n	8002f5e <HAL_GPIO_Init+0x1ee>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <HAL_GPIO_Init+0x1ee>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f60:	f002 0203 	and.w	r2, r2, #3
 8002f64:	0092      	lsls	r2, r2, #2
 8002f66:	4093      	lsls	r3, r2
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f6e:	492f      	ldr	r1, [pc, #188]	@ (800302c <HAL_GPIO_Init+0x2bc>)
 8002f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f72:	089b      	lsrs	r3, r3, #2
 8002f74:	3302      	adds	r3, #2
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d006      	beq.n	8002f96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f88:	4b2d      	ldr	r3, [pc, #180]	@ (8003040 <HAL_GPIO_Init+0x2d0>)
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	492c      	ldr	r1, [pc, #176]	@ (8003040 <HAL_GPIO_Init+0x2d0>)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	608b      	str	r3, [r1, #8]
 8002f94:	e006      	b.n	8002fa4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f96:	4b2a      	ldr	r3, [pc, #168]	@ (8003040 <HAL_GPIO_Init+0x2d0>)
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	4928      	ldr	r1, [pc, #160]	@ (8003040 <HAL_GPIO_Init+0x2d0>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d006      	beq.n	8002fbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fb0:	4b23      	ldr	r3, [pc, #140]	@ (8003040 <HAL_GPIO_Init+0x2d0>)
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	4922      	ldr	r1, [pc, #136]	@ (8003040 <HAL_GPIO_Init+0x2d0>)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60cb      	str	r3, [r1, #12]
 8002fbc:	e006      	b.n	8002fcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fbe:	4b20      	ldr	r3, [pc, #128]	@ (8003040 <HAL_GPIO_Init+0x2d0>)
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	491e      	ldr	r1, [pc, #120]	@ (8003040 <HAL_GPIO_Init+0x2d0>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d006      	beq.n	8002fe6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fd8:	4b19      	ldr	r3, [pc, #100]	@ (8003040 <HAL_GPIO_Init+0x2d0>)
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	4918      	ldr	r1, [pc, #96]	@ (8003040 <HAL_GPIO_Init+0x2d0>)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]
 8002fe4:	e006      	b.n	8002ff4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fe6:	4b16      	ldr	r3, [pc, #88]	@ (8003040 <HAL_GPIO_Init+0x2d0>)
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	4914      	ldr	r1, [pc, #80]	@ (8003040 <HAL_GPIO_Init+0x2d0>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d021      	beq.n	8003044 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003000:	4b0f      	ldr	r3, [pc, #60]	@ (8003040 <HAL_GPIO_Init+0x2d0>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	490e      	ldr	r1, [pc, #56]	@ (8003040 <HAL_GPIO_Init+0x2d0>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	600b      	str	r3, [r1, #0]
 800300c:	e021      	b.n	8003052 <HAL_GPIO_Init+0x2e2>
 800300e:	bf00      	nop
 8003010:	10320000 	.word	0x10320000
 8003014:	10310000 	.word	0x10310000
 8003018:	10220000 	.word	0x10220000
 800301c:	10210000 	.word	0x10210000
 8003020:	10120000 	.word	0x10120000
 8003024:	10110000 	.word	0x10110000
 8003028:	40021000 	.word	0x40021000
 800302c:	40010000 	.word	0x40010000
 8003030:	40010800 	.word	0x40010800
 8003034:	40010c00 	.word	0x40010c00
 8003038:	40011000 	.word	0x40011000
 800303c:	40011400 	.word	0x40011400
 8003040:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003044:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <HAL_GPIO_Init+0x304>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	43db      	mvns	r3, r3
 800304c:	4909      	ldr	r1, [pc, #36]	@ (8003074 <HAL_GPIO_Init+0x304>)
 800304e:	4013      	ands	r3, r2
 8003050:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003054:	3301      	adds	r3, #1
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305e:	fa22 f303 	lsr.w	r3, r2, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	f47f ae8e 	bne.w	8002d84 <HAL_GPIO_Init+0x14>
  }
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	372c      	adds	r7, #44	@ 0x2c
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	40010400 	.word	0x40010400

08003078 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	887b      	ldrh	r3, [r7, #2]
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
 8003094:	e001      	b.n	800309a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003096:	2300      	movs	r3, #0
 8003098:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800309a:	7bfb      	ldrb	r3, [r7, #15]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	807b      	strh	r3, [r7, #2]
 80030b2:	4613      	mov	r3, r2
 80030b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030b6:	787b      	ldrb	r3, [r7, #1]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030bc:	887a      	ldrh	r2, [r7, #2]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030c2:	e003      	b.n	80030cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030c4:	887b      	ldrh	r3, [r7, #2]
 80030c6:	041a      	lsls	r2, r3, #16
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	611a      	str	r2, [r3, #16]
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
	...

080030d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030e2:	4b08      	ldr	r3, [pc, #32]	@ (8003104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030e4:	695a      	ldr	r2, [r3, #20]
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030ee:	4a05      	ldr	r2, [pc, #20]	@ (8003104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff f940 	bl	800237c <HAL_GPIO_EXTI_Callback>
  }
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40010400 	.word	0x40010400

08003108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e12b      	b.n	8003372 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fb00 	bl	8002734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2224      	movs	r2, #36	@ 0x24
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800315a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800316a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800316c:	f001 f832 	bl	80041d4 <HAL_RCC_GetPCLK1Freq>
 8003170:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4a81      	ldr	r2, [pc, #516]	@ (800337c <HAL_I2C_Init+0x274>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d807      	bhi.n	800318c <HAL_I2C_Init+0x84>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4a80      	ldr	r2, [pc, #512]	@ (8003380 <HAL_I2C_Init+0x278>)
 8003180:	4293      	cmp	r3, r2
 8003182:	bf94      	ite	ls
 8003184:	2301      	movls	r3, #1
 8003186:	2300      	movhi	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	e006      	b.n	800319a <HAL_I2C_Init+0x92>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4a7d      	ldr	r2, [pc, #500]	@ (8003384 <HAL_I2C_Init+0x27c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	bf94      	ite	ls
 8003194:	2301      	movls	r3, #1
 8003196:	2300      	movhi	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e0e7      	b.n	8003372 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4a78      	ldr	r2, [pc, #480]	@ (8003388 <HAL_I2C_Init+0x280>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	0c9b      	lsrs	r3, r3, #18
 80031ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4a6a      	ldr	r2, [pc, #424]	@ (800337c <HAL_I2C_Init+0x274>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d802      	bhi.n	80031dc <HAL_I2C_Init+0xd4>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	3301      	adds	r3, #1
 80031da:	e009      	b.n	80031f0 <HAL_I2C_Init+0xe8>
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	4a69      	ldr	r2, [pc, #420]	@ (800338c <HAL_I2C_Init+0x284>)
 80031e8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ec:	099b      	lsrs	r3, r3, #6
 80031ee:	3301      	adds	r3, #1
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	430b      	orrs	r3, r1
 80031f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003202:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	495c      	ldr	r1, [pc, #368]	@ (800337c <HAL_I2C_Init+0x274>)
 800320c:	428b      	cmp	r3, r1
 800320e:	d819      	bhi.n	8003244 <HAL_I2C_Init+0x13c>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1e59      	subs	r1, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	fbb1 f3f3 	udiv	r3, r1, r3
 800321e:	1c59      	adds	r1, r3, #1
 8003220:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003224:	400b      	ands	r3, r1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_I2C_Init+0x138>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1e59      	subs	r1, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fbb1 f3f3 	udiv	r3, r1, r3
 8003238:	3301      	adds	r3, #1
 800323a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323e:	e051      	b.n	80032e4 <HAL_I2C_Init+0x1dc>
 8003240:	2304      	movs	r3, #4
 8003242:	e04f      	b.n	80032e4 <HAL_I2C_Init+0x1dc>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d111      	bne.n	8003270 <HAL_I2C_Init+0x168>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1e58      	subs	r0, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	440b      	add	r3, r1
 800325a:	fbb0 f3f3 	udiv	r3, r0, r3
 800325e:	3301      	adds	r3, #1
 8003260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	e012      	b.n	8003296 <HAL_I2C_Init+0x18e>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	1e58      	subs	r0, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	0099      	lsls	r1, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	fbb0 f3f3 	udiv	r3, r0, r3
 8003286:	3301      	adds	r3, #1
 8003288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_I2C_Init+0x196>
 800329a:	2301      	movs	r3, #1
 800329c:	e022      	b.n	80032e4 <HAL_I2C_Init+0x1dc>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10e      	bne.n	80032c4 <HAL_I2C_Init+0x1bc>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1e58      	subs	r0, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6859      	ldr	r1, [r3, #4]
 80032ae:	460b      	mov	r3, r1
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	440b      	add	r3, r1
 80032b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b8:	3301      	adds	r3, #1
 80032ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032c2:	e00f      	b.n	80032e4 <HAL_I2C_Init+0x1dc>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1e58      	subs	r0, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	0099      	lsls	r1, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032da:	3301      	adds	r3, #1
 80032dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	6809      	ldr	r1, [r1, #0]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69da      	ldr	r2, [r3, #28]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003312:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6911      	ldr	r1, [r2, #16]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	68d2      	ldr	r2, [r2, #12]
 800331e:	4311      	orrs	r1, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	430b      	orrs	r3, r1
 8003326:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	000186a0 	.word	0x000186a0
 8003380:	001e847f 	.word	0x001e847f
 8003384:	003d08ff 	.word	0x003d08ff
 8003388:	431bde83 	.word	0x431bde83
 800338c:	10624dd3 	.word	0x10624dd3

08003390 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	461a      	mov	r2, r3
 800339c:	460b      	mov	r3, r1
 800339e:	817b      	strh	r3, [r7, #10]
 80033a0:	4613      	mov	r3, r2
 80033a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033a4:	f7ff fba8 	bl	8002af8 <HAL_GetTick>
 80033a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	f040 80e0 	bne.w	8003578 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	2319      	movs	r3, #25
 80033be:	2201      	movs	r2, #1
 80033c0:	4970      	ldr	r1, [pc, #448]	@ (8003584 <HAL_I2C_Master_Transmit+0x1f4>)
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f964 	bl	8003690 <I2C_WaitOnFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033ce:	2302      	movs	r3, #2
 80033d0:	e0d3      	b.n	800357a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_I2C_Master_Transmit+0x50>
 80033dc:	2302      	movs	r3, #2
 80033de:	e0cc      	b.n	800357a <HAL_I2C_Master_Transmit+0x1ea>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d007      	beq.n	8003406 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0201 	orr.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003414:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2221      	movs	r2, #33	@ 0x21
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2210      	movs	r2, #16
 8003422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	893a      	ldrh	r2, [r7, #8]
 8003436:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4a50      	ldr	r2, [pc, #320]	@ (8003588 <HAL_I2C_Master_Transmit+0x1f8>)
 8003446:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003448:	8979      	ldrh	r1, [r7, #10]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	6a3a      	ldr	r2, [r7, #32]
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f89c 	bl	800358c <I2C_MasterRequestWrite>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e08d      	b.n	800357a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003474:	e066      	b.n	8003544 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	6a39      	ldr	r1, [r7, #32]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 fa22 	bl	80038c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00d      	beq.n	80034a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	2b04      	cmp	r3, #4
 800348c:	d107      	bne.n	800349e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800349c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e06b      	b.n	800357a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a6:	781a      	ldrb	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d11b      	bne.n	8003518 <HAL_I2C_Master_Transmit+0x188>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d017      	beq.n	8003518 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	781a      	ldrb	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	6a39      	ldr	r1, [r7, #32]
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 fa19 	bl	8003954 <I2C_WaitOnBTFFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00d      	beq.n	8003544 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352c:	2b04      	cmp	r3, #4
 800352e:	d107      	bne.n	8003540 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800353e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e01a      	b.n	800357a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003548:	2b00      	cmp	r3, #0
 800354a:	d194      	bne.n	8003476 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800355a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	e000      	b.n	800357a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003578:	2302      	movs	r3, #2
  }
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	00100002 	.word	0x00100002
 8003588:	ffff0000 	.word	0xffff0000

0800358c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	607a      	str	r2, [r7, #4]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	460b      	mov	r3, r1
 800359a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d006      	beq.n	80035b6 <I2C_MasterRequestWrite+0x2a>
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d003      	beq.n	80035b6 <I2C_MasterRequestWrite+0x2a>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035b4:	d108      	bne.n	80035c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	e00b      	b.n	80035e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035cc:	2b12      	cmp	r3, #18
 80035ce:	d107      	bne.n	80035e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f84f 	bl	8003690 <I2C_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00d      	beq.n	8003614 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003606:	d103      	bne.n	8003610 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800360e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e035      	b.n	8003680 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800361c:	d108      	bne.n	8003630 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800361e:	897b      	ldrh	r3, [r7, #10]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800362c:	611a      	str	r2, [r3, #16]
 800362e:	e01b      	b.n	8003668 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003630:	897b      	ldrh	r3, [r7, #10]
 8003632:	11db      	asrs	r3, r3, #7
 8003634:	b2db      	uxtb	r3, r3
 8003636:	f003 0306 	and.w	r3, r3, #6
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f063 030f 	orn	r3, r3, #15
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	490e      	ldr	r1, [pc, #56]	@ (8003688 <I2C_MasterRequestWrite+0xfc>)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f898 	bl	8003784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e010      	b.n	8003680 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800365e:	897b      	ldrh	r3, [r7, #10]
 8003660:	b2da      	uxtb	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	4907      	ldr	r1, [pc, #28]	@ (800368c <I2C_MasterRequestWrite+0x100>)
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f888 	bl	8003784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	00010008 	.word	0x00010008
 800368c:	00010002 	.word	0x00010002

08003690 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036a0:	e048      	b.n	8003734 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a8:	d044      	beq.n	8003734 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036aa:	f7ff fa25 	bl	8002af8 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d302      	bcc.n	80036c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d139      	bne.n	8003734 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	0c1b      	lsrs	r3, r3, #16
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d10d      	bne.n	80036e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	43da      	mvns	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	4013      	ands	r3, r2
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	bf0c      	ite	eq
 80036dc:	2301      	moveq	r3, #1
 80036de:	2300      	movne	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	461a      	mov	r2, r3
 80036e4:	e00c      	b.n	8003700 <I2C_WaitOnFlagUntilTimeout+0x70>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	43da      	mvns	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4013      	ands	r3, r2
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf0c      	ite	eq
 80036f8:	2301      	moveq	r3, #1
 80036fa:	2300      	movne	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	429a      	cmp	r2, r3
 8003704:	d116      	bne.n	8003734 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	f043 0220 	orr.w	r2, r3, #32
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e023      	b.n	800377c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	0c1b      	lsrs	r3, r3, #16
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b01      	cmp	r3, #1
 800373c:	d10d      	bne.n	800375a <I2C_WaitOnFlagUntilTimeout+0xca>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	43da      	mvns	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4013      	ands	r3, r2
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	e00c      	b.n	8003774 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	43da      	mvns	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4013      	ands	r3, r2
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	429a      	cmp	r2, r3
 8003778:	d093      	beq.n	80036a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003792:	e071      	b.n	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a2:	d123      	bne.n	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d8:	f043 0204 	orr.w	r2, r3, #4
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e067      	b.n	80038bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f2:	d041      	beq.n	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f4:	f7ff f980 	bl	8002af8 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	429a      	cmp	r2, r3
 8003802:	d302      	bcc.n	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d136      	bne.n	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	0c1b      	lsrs	r3, r3, #16
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d10c      	bne.n	800382e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4013      	ands	r3, r2
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	bf14      	ite	ne
 8003826:	2301      	movne	r3, #1
 8003828:	2300      	moveq	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	e00b      	b.n	8003846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	43da      	mvns	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4013      	ands	r3, r2
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d016      	beq.n	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003864:	f043 0220 	orr.w	r2, r3, #32
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e021      	b.n	80038bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	0c1b      	lsrs	r3, r3, #16
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d10c      	bne.n	800389c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	43da      	mvns	r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	4013      	ands	r3, r2
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf14      	ite	ne
 8003894:	2301      	movne	r3, #1
 8003896:	2300      	moveq	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e00b      	b.n	80038b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	43da      	mvns	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4013      	ands	r3, r2
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bf14      	ite	ne
 80038ae:	2301      	movne	r3, #1
 80038b0:	2300      	moveq	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f47f af6d 	bne.w	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d0:	e034      	b.n	800393c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f886 	bl	80039e4 <I2C_IsAcknowledgeFailed>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e034      	b.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e8:	d028      	beq.n	800393c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ea:	f7ff f905 	bl	8002af8 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d302      	bcc.n	8003900 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d11d      	bne.n	800393c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800390a:	2b80      	cmp	r3, #128	@ 0x80
 800390c:	d016      	beq.n	800393c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003928:	f043 0220 	orr.w	r2, r3, #32
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e007      	b.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003946:	2b80      	cmp	r3, #128	@ 0x80
 8003948:	d1c3      	bne.n	80038d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003960:	e034      	b.n	80039cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f83e 	bl	80039e4 <I2C_IsAcknowledgeFailed>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e034      	b.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d028      	beq.n	80039cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397a:	f7ff f8bd 	bl	8002af8 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	429a      	cmp	r2, r3
 8003988:	d302      	bcc.n	8003990 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d11d      	bne.n	80039cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b04      	cmp	r3, #4
 800399c:	d016      	beq.n	80039cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b8:	f043 0220 	orr.w	r2, r3, #32
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e007      	b.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d1c3      	bne.n	8003962 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039fa:	d11b      	bne.n	8003a34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a20:	f043 0204 	orr.w	r2, r3, #4
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e272      	b.n	8003f38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8087 	beq.w	8003b6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a60:	4b92      	ldr	r3, [pc, #584]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d00c      	beq.n	8003a86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a6c:	4b8f      	ldr	r3, [pc, #572]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d112      	bne.n	8003a9e <HAL_RCC_OscConfig+0x5e>
 8003a78:	4b8c      	ldr	r3, [pc, #560]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a84:	d10b      	bne.n	8003a9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a86:	4b89      	ldr	r3, [pc, #548]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d06c      	beq.n	8003b6c <HAL_RCC_OscConfig+0x12c>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d168      	bne.n	8003b6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e24c      	b.n	8003f38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa6:	d106      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x76>
 8003aa8:	4b80      	ldr	r3, [pc, #512]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a7f      	ldr	r2, [pc, #508]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	e02e      	b.n	8003b14 <HAL_RCC_OscConfig+0xd4>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x98>
 8003abe:	4b7b      	ldr	r3, [pc, #492]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a7a      	ldr	r2, [pc, #488]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	4b78      	ldr	r3, [pc, #480]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a77      	ldr	r2, [pc, #476]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e01d      	b.n	8003b14 <HAL_RCC_OscConfig+0xd4>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0xbc>
 8003ae2:	4b72      	ldr	r3, [pc, #456]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a71      	ldr	r2, [pc, #452]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b6f      	ldr	r3, [pc, #444]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a6e      	ldr	r2, [pc, #440]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e00b      	b.n	8003b14 <HAL_RCC_OscConfig+0xd4>
 8003afc:	4b6b      	ldr	r3, [pc, #428]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a6a      	ldr	r2, [pc, #424]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	4b68      	ldr	r3, [pc, #416]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a67      	ldr	r2, [pc, #412]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d013      	beq.n	8003b44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fe ffec 	bl	8002af8 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b24:	f7fe ffe8 	bl	8002af8 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	@ 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e200      	b.n	8003f38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	4b5d      	ldr	r3, [pc, #372]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0xe4>
 8003b42:	e014      	b.n	8003b6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fe ffd8 	bl	8002af8 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fe ffd4 	bl	8002af8 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	@ 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e1ec      	b.n	8003f38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5e:	4b53      	ldr	r3, [pc, #332]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x10c>
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d063      	beq.n	8003c42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00b      	beq.n	8003b9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b86:	4b49      	ldr	r3, [pc, #292]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d11c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x18c>
 8003b92:	4b46      	ldr	r3, [pc, #280]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d116      	bne.n	8003bcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9e:	4b43      	ldr	r3, [pc, #268]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x176>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d001      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e1c0      	b.n	8003f38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb6:	4b3d      	ldr	r3, [pc, #244]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4939      	ldr	r1, [pc, #228]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bca:	e03a      	b.n	8003c42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d020      	beq.n	8003c16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd4:	4b36      	ldr	r3, [pc, #216]	@ (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bda:	f7fe ff8d 	bl	8002af8 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be2:	f7fe ff89 	bl	8002af8 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e1a1      	b.n	8003f38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c00:	4b2a      	ldr	r3, [pc, #168]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4927      	ldr	r1, [pc, #156]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	600b      	str	r3, [r1, #0]
 8003c14:	e015      	b.n	8003c42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c16:	4b26      	ldr	r3, [pc, #152]	@ (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1c:	f7fe ff6c 	bl	8002af8 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c24:	f7fe ff68 	bl	8002af8 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e180      	b.n	8003f38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c36:	4b1d      	ldr	r3, [pc, #116]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d03a      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d019      	beq.n	8003c8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c56:	4b17      	ldr	r3, [pc, #92]	@ (8003cb4 <HAL_RCC_OscConfig+0x274>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5c:	f7fe ff4c 	bl	8002af8 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c64:	f7fe ff48 	bl	8002af8 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e160      	b.n	8003f38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c76:	4b0d      	ldr	r3, [pc, #52]	@ (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c82:	2001      	movs	r0, #1
 8003c84:	f000 faba 	bl	80041fc <RCC_Delay>
 8003c88:	e01c      	b.n	8003cc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb4 <HAL_RCC_OscConfig+0x274>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c90:	f7fe ff32 	bl	8002af8 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c96:	e00f      	b.n	8003cb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c98:	f7fe ff2e 	bl	8002af8 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d908      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e146      	b.n	8003f38 <HAL_RCC_OscConfig+0x4f8>
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	42420000 	.word	0x42420000
 8003cb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb8:	4b92      	ldr	r3, [pc, #584]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e9      	bne.n	8003c98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80a6 	beq.w	8003e1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd6:	4b8b      	ldr	r3, [pc, #556]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10d      	bne.n	8003cfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce2:	4b88      	ldr	r3, [pc, #544]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	4a87      	ldr	r2, [pc, #540]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cec:	61d3      	str	r3, [r2, #28]
 8003cee:	4b85      	ldr	r3, [pc, #532]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfe:	4b82      	ldr	r3, [pc, #520]	@ (8003f08 <HAL_RCC_OscConfig+0x4c8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d118      	bne.n	8003d3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f08 <HAL_RCC_OscConfig+0x4c8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f08 <HAL_RCC_OscConfig+0x4c8>)
 8003d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d16:	f7fe feef 	bl	8002af8 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1e:	f7fe feeb 	bl	8002af8 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b64      	cmp	r3, #100	@ 0x64
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e103      	b.n	8003f38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d30:	4b75      	ldr	r3, [pc, #468]	@ (8003f08 <HAL_RCC_OscConfig+0x4c8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d106      	bne.n	8003d52 <HAL_RCC_OscConfig+0x312>
 8003d44:	4b6f      	ldr	r3, [pc, #444]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	4a6e      	ldr	r2, [pc, #440]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6213      	str	r3, [r2, #32]
 8003d50:	e02d      	b.n	8003dae <HAL_RCC_OscConfig+0x36e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCC_OscConfig+0x334>
 8003d5a:	4b6a      	ldr	r3, [pc, #424]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	4a69      	ldr	r2, [pc, #420]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	6213      	str	r3, [r2, #32]
 8003d66:	4b67      	ldr	r3, [pc, #412]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	4a66      	ldr	r2, [pc, #408]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	f023 0304 	bic.w	r3, r3, #4
 8003d70:	6213      	str	r3, [r2, #32]
 8003d72:	e01c      	b.n	8003dae <HAL_RCC_OscConfig+0x36e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	2b05      	cmp	r3, #5
 8003d7a:	d10c      	bne.n	8003d96 <HAL_RCC_OscConfig+0x356>
 8003d7c:	4b61      	ldr	r3, [pc, #388]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4a60      	ldr	r2, [pc, #384]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003d82:	f043 0304 	orr.w	r3, r3, #4
 8003d86:	6213      	str	r3, [r2, #32]
 8003d88:	4b5e      	ldr	r3, [pc, #376]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	4a5d      	ldr	r2, [pc, #372]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	6213      	str	r3, [r2, #32]
 8003d94:	e00b      	b.n	8003dae <HAL_RCC_OscConfig+0x36e>
 8003d96:	4b5b      	ldr	r3, [pc, #364]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	4a5a      	ldr	r2, [pc, #360]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	6213      	str	r3, [r2, #32]
 8003da2:	4b58      	ldr	r3, [pc, #352]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	4a57      	ldr	r2, [pc, #348]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003da8:	f023 0304 	bic.w	r3, r3, #4
 8003dac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d015      	beq.n	8003de2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db6:	f7fe fe9f 	bl	8002af8 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dbc:	e00a      	b.n	8003dd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dbe:	f7fe fe9b 	bl	8002af8 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e0b1      	b.n	8003f38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0ee      	beq.n	8003dbe <HAL_RCC_OscConfig+0x37e>
 8003de0:	e014      	b.n	8003e0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de2:	f7fe fe89 	bl	8002af8 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de8:	e00a      	b.n	8003e00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dea:	f7fe fe85 	bl	8002af8 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e09b      	b.n	8003f38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e00:	4b40      	ldr	r3, [pc, #256]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1ee      	bne.n	8003dea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d105      	bne.n	8003e1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e12:	4b3c      	ldr	r3, [pc, #240]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	4a3b      	ldr	r2, [pc, #236]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003e18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8087 	beq.w	8003f36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e28:	4b36      	ldr	r3, [pc, #216]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 030c 	and.w	r3, r3, #12
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d061      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d146      	bne.n	8003eca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3c:	4b33      	ldr	r3, [pc, #204]	@ (8003f0c <HAL_RCC_OscConfig+0x4cc>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e42:	f7fe fe59 	bl	8002af8 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4a:	f7fe fe55 	bl	8002af8 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e06d      	b.n	8003f38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e5c:	4b29      	ldr	r3, [pc, #164]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f0      	bne.n	8003e4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e70:	d108      	bne.n	8003e84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e72:	4b24      	ldr	r3, [pc, #144]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	4921      	ldr	r1, [pc, #132]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e84:	4b1f      	ldr	r3, [pc, #124]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a19      	ldr	r1, [r3, #32]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	430b      	orrs	r3, r1
 8003e96:	491b      	ldr	r1, [pc, #108]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f0c <HAL_RCC_OscConfig+0x4cc>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea2:	f7fe fe29 	bl	8002af8 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eaa:	f7fe fe25 	bl	8002af8 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e03d      	b.n	8003f38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ebc:	4b11      	ldr	r3, [pc, #68]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0x46a>
 8003ec8:	e035      	b.n	8003f36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eca:	4b10      	ldr	r3, [pc, #64]	@ (8003f0c <HAL_RCC_OscConfig+0x4cc>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7fe fe12 	bl	8002af8 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed8:	f7fe fe0e 	bl	8002af8 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e026      	b.n	8003f38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eea:	4b06      	ldr	r3, [pc, #24]	@ (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x498>
 8003ef6:	e01e      	b.n	8003f36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d107      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e019      	b.n	8003f38 <HAL_RCC_OscConfig+0x4f8>
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40007000 	.word	0x40007000
 8003f0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f10:	4b0b      	ldr	r3, [pc, #44]	@ (8003f40 <HAL_RCC_OscConfig+0x500>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d106      	bne.n	8003f32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d001      	beq.n	8003f36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021000 	.word	0x40021000

08003f44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0d0      	b.n	80040fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f58:	4b6a      	ldr	r3, [pc, #424]	@ (8004104 <HAL_RCC_ClockConfig+0x1c0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d910      	bls.n	8003f88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f66:	4b67      	ldr	r3, [pc, #412]	@ (8004104 <HAL_RCC_ClockConfig+0x1c0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 0207 	bic.w	r2, r3, #7
 8003f6e:	4965      	ldr	r1, [pc, #404]	@ (8004104 <HAL_RCC_ClockConfig+0x1c0>)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f76:	4b63      	ldr	r3, [pc, #396]	@ (8004104 <HAL_RCC_ClockConfig+0x1c0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d001      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0b8      	b.n	80040fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d020      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa0:	4b59      	ldr	r3, [pc, #356]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4a58      	ldr	r2, [pc, #352]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003faa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fb8:	4b53      	ldr	r3, [pc, #332]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	4a52      	ldr	r2, [pc, #328]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003fc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc4:	4b50      	ldr	r3, [pc, #320]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	494d      	ldr	r1, [pc, #308]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d040      	beq.n	8004064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d107      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fea:	4b47      	ldr	r3, [pc, #284]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d115      	bne.n	8004022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e07f      	b.n	80040fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d107      	bne.n	8004012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004002:	4b41      	ldr	r3, [pc, #260]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e073      	b.n	80040fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004012:	4b3d      	ldr	r3, [pc, #244]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e06b      	b.n	80040fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004022:	4b39      	ldr	r3, [pc, #228]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f023 0203 	bic.w	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	4936      	ldr	r1, [pc, #216]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8004030:	4313      	orrs	r3, r2
 8004032:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004034:	f7fe fd60 	bl	8002af8 <HAL_GetTick>
 8004038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403a:	e00a      	b.n	8004052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800403c:	f7fe fd5c 	bl	8002af8 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e053      	b.n	80040fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004052:	4b2d      	ldr	r3, [pc, #180]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 020c 	and.w	r2, r3, #12
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	429a      	cmp	r2, r3
 8004062:	d1eb      	bne.n	800403c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004064:	4b27      	ldr	r3, [pc, #156]	@ (8004104 <HAL_RCC_ClockConfig+0x1c0>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d210      	bcs.n	8004094 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004072:	4b24      	ldr	r3, [pc, #144]	@ (8004104 <HAL_RCC_ClockConfig+0x1c0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 0207 	bic.w	r2, r3, #7
 800407a:	4922      	ldr	r1, [pc, #136]	@ (8004104 <HAL_RCC_ClockConfig+0x1c0>)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	4313      	orrs	r3, r2
 8004080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004082:	4b20      	ldr	r3, [pc, #128]	@ (8004104 <HAL_RCC_ClockConfig+0x1c0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e032      	b.n	80040fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a0:	4b19      	ldr	r3, [pc, #100]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4916      	ldr	r1, [pc, #88]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040be:	4b12      	ldr	r3, [pc, #72]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	490e      	ldr	r1, [pc, #56]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040d2:	f000 f821 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 80040d6:	4602      	mov	r2, r0
 80040d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	091b      	lsrs	r3, r3, #4
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	490a      	ldr	r1, [pc, #40]	@ (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040e4:	5ccb      	ldrb	r3, [r1, r3]
 80040e6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ea:	4a09      	ldr	r2, [pc, #36]	@ (8004110 <HAL_RCC_ClockConfig+0x1cc>)
 80040ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040ee:	4b09      	ldr	r3, [pc, #36]	@ (8004114 <HAL_RCC_ClockConfig+0x1d0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe fcbe 	bl	8002a74 <HAL_InitTick>

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40022000 	.word	0x40022000
 8004108:	40021000 	.word	0x40021000
 800410c:	080081c0 	.word	0x080081c0
 8004110:	200000b8 	.word	0x200000b8
 8004114:	200000bc 	.word	0x200000bc

08004118 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	2300      	movs	r3, #0
 800412c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004132:	4b1e      	ldr	r3, [pc, #120]	@ (80041ac <HAL_RCC_GetSysClockFreq+0x94>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b04      	cmp	r3, #4
 8004140:	d002      	beq.n	8004148 <HAL_RCC_GetSysClockFreq+0x30>
 8004142:	2b08      	cmp	r3, #8
 8004144:	d003      	beq.n	800414e <HAL_RCC_GetSysClockFreq+0x36>
 8004146:	e027      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004148:	4b19      	ldr	r3, [pc, #100]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800414a:	613b      	str	r3, [r7, #16]
      break;
 800414c:	e027      	b.n	800419e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	0c9b      	lsrs	r3, r3, #18
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	4a17      	ldr	r2, [pc, #92]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004158:	5cd3      	ldrb	r3, [r2, r3]
 800415a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d010      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004166:	4b11      	ldr	r3, [pc, #68]	@ (80041ac <HAL_RCC_GetSysClockFreq+0x94>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	0c5b      	lsrs	r3, r3, #17
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	4a11      	ldr	r2, [pc, #68]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004172:	5cd3      	ldrb	r3, [r2, r3]
 8004174:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a0d      	ldr	r2, [pc, #52]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800417a:	fb03 f202 	mul.w	r2, r3, r2
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	e004      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a0c      	ldr	r2, [pc, #48]	@ (80041bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800418c:	fb02 f303 	mul.w	r3, r2, r3
 8004190:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	613b      	str	r3, [r7, #16]
      break;
 8004196:	e002      	b.n	800419e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004198:	4b05      	ldr	r3, [pc, #20]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800419a:	613b      	str	r3, [r7, #16]
      break;
 800419c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800419e:	693b      	ldr	r3, [r7, #16]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	371c      	adds	r7, #28
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40021000 	.word	0x40021000
 80041b0:	007a1200 	.word	0x007a1200
 80041b4:	080081d8 	.word	0x080081d8
 80041b8:	080081e8 	.word	0x080081e8
 80041bc:	003d0900 	.word	0x003d0900

080041c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c4:	4b02      	ldr	r3, [pc, #8]	@ (80041d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80041c6:	681b      	ldr	r3, [r3, #0]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr
 80041d0:	200000b8 	.word	0x200000b8

080041d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041d8:	f7ff fff2 	bl	80041c0 <HAL_RCC_GetHCLKFreq>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b05      	ldr	r3, [pc, #20]	@ (80041f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	0a1b      	lsrs	r3, r3, #8
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	4903      	ldr	r1, [pc, #12]	@ (80041f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ea:	5ccb      	ldrb	r3, [r1, r3]
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000
 80041f8:	080081d0 	.word	0x080081d0

080041fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004204:	4b0a      	ldr	r3, [pc, #40]	@ (8004230 <RCC_Delay+0x34>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a0a      	ldr	r2, [pc, #40]	@ (8004234 <RCC_Delay+0x38>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	0a5b      	lsrs	r3, r3, #9
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	fb02 f303 	mul.w	r3, r2, r3
 8004216:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004218:	bf00      	nop
  }
  while (Delay --);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1e5a      	subs	r2, r3, #1
 800421e:	60fa      	str	r2, [r7, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f9      	bne.n	8004218 <RCC_Delay+0x1c>
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr
 8004230:	200000b8 	.word	0x200000b8
 8004234:	10624dd3 	.word	0x10624dd3

08004238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e041      	b.n	80042ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fe faa8 	bl	80027b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f000 f940 	bl	80044fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d001      	beq.n	80042f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e032      	b.n	8004356 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a18      	ldr	r2, [pc, #96]	@ (8004360 <HAL_TIM_Base_Start+0x88>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00e      	beq.n	8004320 <HAL_TIM_Base_Start+0x48>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800430a:	d009      	beq.n	8004320 <HAL_TIM_Base_Start+0x48>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a14      	ldr	r2, [pc, #80]	@ (8004364 <HAL_TIM_Base_Start+0x8c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d004      	beq.n	8004320 <HAL_TIM_Base_Start+0x48>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a13      	ldr	r2, [pc, #76]	@ (8004368 <HAL_TIM_Base_Start+0x90>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d111      	bne.n	8004344 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b06      	cmp	r3, #6
 8004330:	d010      	beq.n	8004354 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0201 	orr.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004342:	e007      	b.n	8004354 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0201 	orr.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr
 8004360:	40012c00 	.word	0x40012c00
 8004364:	40000400 	.word	0x40000400
 8004368:	40000800 	.word	0x40000800

0800436c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_TIM_ConfigClockSource+0x1c>
 8004384:	2302      	movs	r3, #2
 8004386:	e0b4      	b.n	80044f2 <HAL_TIM_ConfigClockSource+0x186>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043c0:	d03e      	beq.n	8004440 <HAL_TIM_ConfigClockSource+0xd4>
 80043c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043c6:	f200 8087 	bhi.w	80044d8 <HAL_TIM_ConfigClockSource+0x16c>
 80043ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ce:	f000 8086 	beq.w	80044de <HAL_TIM_ConfigClockSource+0x172>
 80043d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043d6:	d87f      	bhi.n	80044d8 <HAL_TIM_ConfigClockSource+0x16c>
 80043d8:	2b70      	cmp	r3, #112	@ 0x70
 80043da:	d01a      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0xa6>
 80043dc:	2b70      	cmp	r3, #112	@ 0x70
 80043de:	d87b      	bhi.n	80044d8 <HAL_TIM_ConfigClockSource+0x16c>
 80043e0:	2b60      	cmp	r3, #96	@ 0x60
 80043e2:	d050      	beq.n	8004486 <HAL_TIM_ConfigClockSource+0x11a>
 80043e4:	2b60      	cmp	r3, #96	@ 0x60
 80043e6:	d877      	bhi.n	80044d8 <HAL_TIM_ConfigClockSource+0x16c>
 80043e8:	2b50      	cmp	r3, #80	@ 0x50
 80043ea:	d03c      	beq.n	8004466 <HAL_TIM_ConfigClockSource+0xfa>
 80043ec:	2b50      	cmp	r3, #80	@ 0x50
 80043ee:	d873      	bhi.n	80044d8 <HAL_TIM_ConfigClockSource+0x16c>
 80043f0:	2b40      	cmp	r3, #64	@ 0x40
 80043f2:	d058      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x13a>
 80043f4:	2b40      	cmp	r3, #64	@ 0x40
 80043f6:	d86f      	bhi.n	80044d8 <HAL_TIM_ConfigClockSource+0x16c>
 80043f8:	2b30      	cmp	r3, #48	@ 0x30
 80043fa:	d064      	beq.n	80044c6 <HAL_TIM_ConfigClockSource+0x15a>
 80043fc:	2b30      	cmp	r3, #48	@ 0x30
 80043fe:	d86b      	bhi.n	80044d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004400:	2b20      	cmp	r3, #32
 8004402:	d060      	beq.n	80044c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004404:	2b20      	cmp	r3, #32
 8004406:	d867      	bhi.n	80044d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d05c      	beq.n	80044c6 <HAL_TIM_ConfigClockSource+0x15a>
 800440c:	2b10      	cmp	r3, #16
 800440e:	d05a      	beq.n	80044c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004410:	e062      	b.n	80044d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004422:	f000 f950 	bl	80046c6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004434:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	609a      	str	r2, [r3, #8]
      break;
 800443e:	e04f      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004450:	f000 f939 	bl	80046c6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004462:	609a      	str	r2, [r3, #8]
      break;
 8004464:	e03c      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004472:	461a      	mov	r2, r3
 8004474:	f000 f8b0 	bl	80045d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2150      	movs	r1, #80	@ 0x50
 800447e:	4618      	mov	r0, r3
 8004480:	f000 f907 	bl	8004692 <TIM_ITRx_SetConfig>
      break;
 8004484:	e02c      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004492:	461a      	mov	r2, r3
 8004494:	f000 f8ce 	bl	8004634 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2160      	movs	r1, #96	@ 0x60
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 f8f7 	bl	8004692 <TIM_ITRx_SetConfig>
      break;
 80044a4:	e01c      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044b2:	461a      	mov	r2, r3
 80044b4:	f000 f890 	bl	80045d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2140      	movs	r1, #64	@ 0x40
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 f8e7 	bl	8004692 <TIM_ITRx_SetConfig>
      break;
 80044c4:	e00c      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4619      	mov	r1, r3
 80044d0:	4610      	mov	r0, r2
 80044d2:	f000 f8de 	bl	8004692 <TIM_ITRx_SetConfig>
      break;
 80044d6:	e003      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	73fb      	strb	r3, [r7, #15]
      break;
 80044dc:	e000      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a2f      	ldr	r2, [pc, #188]	@ (80045cc <TIM_Base_SetConfig+0xd0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00b      	beq.n	800452c <TIM_Base_SetConfig+0x30>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800451a:	d007      	beq.n	800452c <TIM_Base_SetConfig+0x30>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a2c      	ldr	r2, [pc, #176]	@ (80045d0 <TIM_Base_SetConfig+0xd4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d003      	beq.n	800452c <TIM_Base_SetConfig+0x30>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a2b      	ldr	r2, [pc, #172]	@ (80045d4 <TIM_Base_SetConfig+0xd8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d108      	bne.n	800453e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a22      	ldr	r2, [pc, #136]	@ (80045cc <TIM_Base_SetConfig+0xd0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00b      	beq.n	800455e <TIM_Base_SetConfig+0x62>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800454c:	d007      	beq.n	800455e <TIM_Base_SetConfig+0x62>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a1f      	ldr	r2, [pc, #124]	@ (80045d0 <TIM_Base_SetConfig+0xd4>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d003      	beq.n	800455e <TIM_Base_SetConfig+0x62>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a1e      	ldr	r2, [pc, #120]	@ (80045d4 <TIM_Base_SetConfig+0xd8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d108      	bne.n	8004570 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a0d      	ldr	r2, [pc, #52]	@ (80045cc <TIM_Base_SetConfig+0xd0>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d103      	bne.n	80045a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f023 0201 	bic.w	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	611a      	str	r2, [r3, #16]
  }
}
 80045c2:	bf00      	nop
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr
 80045cc:	40012c00 	.word	0x40012c00
 80045d0:	40000400 	.word	0x40000400
 80045d4:	40000800 	.word	0x40000800

080045d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f023 0201 	bic.w	r2, r3, #1
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f023 030a 	bic.w	r3, r3, #10
 8004614:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4313      	orrs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	621a      	str	r2, [r3, #32]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr

08004634 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f023 0210 	bic.w	r2, r3, #16
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800465e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	031b      	lsls	r3, r3, #12
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004670:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	621a      	str	r2, [r3, #32]
}
 8004688:	bf00      	nop
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr

08004692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f043 0307 	orr.w	r3, r3, #7
 80046b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	609a      	str	r2, [r3, #8]
}
 80046bc:	bf00      	nop
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bc80      	pop	{r7}
 80046c4:	4770      	bx	lr

080046c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b087      	sub	sp, #28
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	607a      	str	r2, [r7, #4]
 80046d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	021a      	lsls	r2, r3, #8
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	431a      	orrs	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	609a      	str	r2, [r3, #8]
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004718:	2302      	movs	r3, #2
 800471a:	e046      	b.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004742:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a16      	ldr	r2, [pc, #88]	@ (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00e      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004768:	d009      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a12      	ldr	r2, [pc, #72]	@ (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d004      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a10      	ldr	r2, [pc, #64]	@ (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d10c      	bne.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	4313      	orrs	r3, r2
 800478e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr
 80047b4:	40012c00 	.word	0x40012c00
 80047b8:	40000400 	.word	0x40000400
 80047bc:	40000800 	.word	0x40000800

080047c0 <pow>:
 80047c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047c4:	4614      	mov	r4, r2
 80047c6:	461d      	mov	r5, r3
 80047c8:	4680      	mov	r8, r0
 80047ca:	4689      	mov	r9, r1
 80047cc:	f000 f868 	bl	80048a0 <__ieee754_pow>
 80047d0:	4622      	mov	r2, r4
 80047d2:	4606      	mov	r6, r0
 80047d4:	460f      	mov	r7, r1
 80047d6:	462b      	mov	r3, r5
 80047d8:	4620      	mov	r0, r4
 80047da:	4629      	mov	r1, r5
 80047dc:	f7fc f916 	bl	8000a0c <__aeabi_dcmpun>
 80047e0:	bbc8      	cbnz	r0, 8004856 <pow+0x96>
 80047e2:	2200      	movs	r2, #0
 80047e4:	2300      	movs	r3, #0
 80047e6:	4640      	mov	r0, r8
 80047e8:	4649      	mov	r1, r9
 80047ea:	f7fc f8dd 	bl	80009a8 <__aeabi_dcmpeq>
 80047ee:	b1b8      	cbz	r0, 8004820 <pow+0x60>
 80047f0:	2200      	movs	r2, #0
 80047f2:	2300      	movs	r3, #0
 80047f4:	4620      	mov	r0, r4
 80047f6:	4629      	mov	r1, r5
 80047f8:	f7fc f8d6 	bl	80009a8 <__aeabi_dcmpeq>
 80047fc:	2800      	cmp	r0, #0
 80047fe:	d141      	bne.n	8004884 <pow+0xc4>
 8004800:	4620      	mov	r0, r4
 8004802:	4629      	mov	r1, r5
 8004804:	f000 f844 	bl	8004890 <finite>
 8004808:	b328      	cbz	r0, 8004856 <pow+0x96>
 800480a:	2200      	movs	r2, #0
 800480c:	2300      	movs	r3, #0
 800480e:	4620      	mov	r0, r4
 8004810:	4629      	mov	r1, r5
 8004812:	f7fc f8d3 	bl	80009bc <__aeabi_dcmplt>
 8004816:	b1f0      	cbz	r0, 8004856 <pow+0x96>
 8004818:	f001 fd42 	bl	80062a0 <__errno>
 800481c:	2322      	movs	r3, #34	@ 0x22
 800481e:	e019      	b.n	8004854 <pow+0x94>
 8004820:	4630      	mov	r0, r6
 8004822:	4639      	mov	r1, r7
 8004824:	f000 f834 	bl	8004890 <finite>
 8004828:	b9c8      	cbnz	r0, 800485e <pow+0x9e>
 800482a:	4640      	mov	r0, r8
 800482c:	4649      	mov	r1, r9
 800482e:	f000 f82f 	bl	8004890 <finite>
 8004832:	b1a0      	cbz	r0, 800485e <pow+0x9e>
 8004834:	4620      	mov	r0, r4
 8004836:	4629      	mov	r1, r5
 8004838:	f000 f82a 	bl	8004890 <finite>
 800483c:	b178      	cbz	r0, 800485e <pow+0x9e>
 800483e:	4632      	mov	r2, r6
 8004840:	463b      	mov	r3, r7
 8004842:	4630      	mov	r0, r6
 8004844:	4639      	mov	r1, r7
 8004846:	f7fc f8e1 	bl	8000a0c <__aeabi_dcmpun>
 800484a:	2800      	cmp	r0, #0
 800484c:	d0e4      	beq.n	8004818 <pow+0x58>
 800484e:	f001 fd27 	bl	80062a0 <__errno>
 8004852:	2321      	movs	r3, #33	@ 0x21
 8004854:	6003      	str	r3, [r0, #0]
 8004856:	4630      	mov	r0, r6
 8004858:	4639      	mov	r1, r7
 800485a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800485e:	2200      	movs	r2, #0
 8004860:	2300      	movs	r3, #0
 8004862:	4630      	mov	r0, r6
 8004864:	4639      	mov	r1, r7
 8004866:	f7fc f89f 	bl	80009a8 <__aeabi_dcmpeq>
 800486a:	2800      	cmp	r0, #0
 800486c:	d0f3      	beq.n	8004856 <pow+0x96>
 800486e:	4640      	mov	r0, r8
 8004870:	4649      	mov	r1, r9
 8004872:	f000 f80d 	bl	8004890 <finite>
 8004876:	2800      	cmp	r0, #0
 8004878:	d0ed      	beq.n	8004856 <pow+0x96>
 800487a:	4620      	mov	r0, r4
 800487c:	4629      	mov	r1, r5
 800487e:	f000 f807 	bl	8004890 <finite>
 8004882:	e7c8      	b.n	8004816 <pow+0x56>
 8004884:	2600      	movs	r6, #0
 8004886:	4f01      	ldr	r7, [pc, #4]	@ (800488c <pow+0xcc>)
 8004888:	e7e5      	b.n	8004856 <pow+0x96>
 800488a:	bf00      	nop
 800488c:	3ff00000 	.word	0x3ff00000

08004890 <finite>:
 8004890:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8004894:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8004898:	0fc0      	lsrs	r0, r0, #31
 800489a:	4770      	bx	lr
 800489c:	0000      	movs	r0, r0
	...

080048a0 <__ieee754_pow>:
 80048a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a4:	b091      	sub	sp, #68	@ 0x44
 80048a6:	e9cd 2300 	strd	r2, r3, [sp]
 80048aa:	468b      	mov	fp, r1
 80048ac:	e9dd 1800 	ldrd	r1, r8, [sp]
 80048b0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80048b4:	4682      	mov	sl, r0
 80048b6:	ea57 0001 	orrs.w	r0, r7, r1
 80048ba:	d112      	bne.n	80048e2 <__ieee754_pow+0x42>
 80048bc:	4653      	mov	r3, sl
 80048be:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80048c2:	18db      	adds	r3, r3, r3
 80048c4:	4152      	adcs	r2, r2
 80048c6:	4298      	cmp	r0, r3
 80048c8:	4b91      	ldr	r3, [pc, #580]	@ (8004b10 <__ieee754_pow+0x270>)
 80048ca:	4193      	sbcs	r3, r2
 80048cc:	f080 84ce 	bcs.w	800526c <__ieee754_pow+0x9cc>
 80048d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048d4:	4650      	mov	r0, sl
 80048d6:	4659      	mov	r1, fp
 80048d8:	f7fb fc48 	bl	800016c <__adddf3>
 80048dc:	b011      	add	sp, #68	@ 0x44
 80048de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e2:	4b8c      	ldr	r3, [pc, #560]	@ (8004b14 <__ieee754_pow+0x274>)
 80048e4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 80048e8:	429e      	cmp	r6, r3
 80048ea:	465d      	mov	r5, fp
 80048ec:	46d1      	mov	r9, sl
 80048ee:	d807      	bhi.n	8004900 <__ieee754_pow+0x60>
 80048f0:	d102      	bne.n	80048f8 <__ieee754_pow+0x58>
 80048f2:	f1ba 0f00 	cmp.w	sl, #0
 80048f6:	d1eb      	bne.n	80048d0 <__ieee754_pow+0x30>
 80048f8:	429f      	cmp	r7, r3
 80048fa:	d801      	bhi.n	8004900 <__ieee754_pow+0x60>
 80048fc:	d10f      	bne.n	800491e <__ieee754_pow+0x7e>
 80048fe:	b171      	cbz	r1, 800491e <__ieee754_pow+0x7e>
 8004900:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8004904:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8004908:	ea55 0509 	orrs.w	r5, r5, r9
 800490c:	d1e0      	bne.n	80048d0 <__ieee754_pow+0x30>
 800490e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004912:	18db      	adds	r3, r3, r3
 8004914:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8004918:	4152      	adcs	r2, r2
 800491a:	429d      	cmp	r5, r3
 800491c:	e7d4      	b.n	80048c8 <__ieee754_pow+0x28>
 800491e:	2d00      	cmp	r5, #0
 8004920:	4633      	mov	r3, r6
 8004922:	da39      	bge.n	8004998 <__ieee754_pow+0xf8>
 8004924:	4a7c      	ldr	r2, [pc, #496]	@ (8004b18 <__ieee754_pow+0x278>)
 8004926:	4297      	cmp	r7, r2
 8004928:	d84e      	bhi.n	80049c8 <__ieee754_pow+0x128>
 800492a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800492e:	4297      	cmp	r7, r2
 8004930:	f240 84ab 	bls.w	800528a <__ieee754_pow+0x9ea>
 8004934:	153a      	asrs	r2, r7, #20
 8004936:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800493a:	2a14      	cmp	r2, #20
 800493c:	dd0f      	ble.n	800495e <__ieee754_pow+0xbe>
 800493e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8004942:	fa21 f402 	lsr.w	r4, r1, r2
 8004946:	fa04 f202 	lsl.w	r2, r4, r2
 800494a:	428a      	cmp	r2, r1
 800494c:	f040 849d 	bne.w	800528a <__ieee754_pow+0x9ea>
 8004950:	f004 0401 	and.w	r4, r4, #1
 8004954:	f1c4 0402 	rsb	r4, r4, #2
 8004958:	2900      	cmp	r1, #0
 800495a:	d15a      	bne.n	8004a12 <__ieee754_pow+0x172>
 800495c:	e00e      	b.n	800497c <__ieee754_pow+0xdc>
 800495e:	2900      	cmp	r1, #0
 8004960:	d156      	bne.n	8004a10 <__ieee754_pow+0x170>
 8004962:	f1c2 0214 	rsb	r2, r2, #20
 8004966:	fa47 f402 	asr.w	r4, r7, r2
 800496a:	fa04 f202 	lsl.w	r2, r4, r2
 800496e:	42ba      	cmp	r2, r7
 8004970:	f040 8488 	bne.w	8005284 <__ieee754_pow+0x9e4>
 8004974:	f004 0401 	and.w	r4, r4, #1
 8004978:	f1c4 0402 	rsb	r4, r4, #2
 800497c:	4a67      	ldr	r2, [pc, #412]	@ (8004b1c <__ieee754_pow+0x27c>)
 800497e:	4297      	cmp	r7, r2
 8004980:	d130      	bne.n	80049e4 <__ieee754_pow+0x144>
 8004982:	f1b8 0f00 	cmp.w	r8, #0
 8004986:	f280 8479 	bge.w	800527c <__ieee754_pow+0x9dc>
 800498a:	4652      	mov	r2, sl
 800498c:	465b      	mov	r3, fp
 800498e:	2000      	movs	r0, #0
 8004990:	4962      	ldr	r1, [pc, #392]	@ (8004b1c <__ieee754_pow+0x27c>)
 8004992:	f7fb fecb 	bl	800072c <__aeabi_ddiv>
 8004996:	e7a1      	b.n	80048dc <__ieee754_pow+0x3c>
 8004998:	2400      	movs	r4, #0
 800499a:	2900      	cmp	r1, #0
 800499c:	d139      	bne.n	8004a12 <__ieee754_pow+0x172>
 800499e:	4a5d      	ldr	r2, [pc, #372]	@ (8004b14 <__ieee754_pow+0x274>)
 80049a0:	4297      	cmp	r7, r2
 80049a2:	d1eb      	bne.n	800497c <__ieee754_pow+0xdc>
 80049a4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 80049a8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80049ac:	ea53 0309 	orrs.w	r3, r3, r9
 80049b0:	f000 845c 	beq.w	800526c <__ieee754_pow+0x9cc>
 80049b4:	4b5a      	ldr	r3, [pc, #360]	@ (8004b20 <__ieee754_pow+0x280>)
 80049b6:	429e      	cmp	r6, r3
 80049b8:	d908      	bls.n	80049cc <__ieee754_pow+0x12c>
 80049ba:	f1b8 0f00 	cmp.w	r8, #0
 80049be:	f2c0 8459 	blt.w	8005274 <__ieee754_pow+0x9d4>
 80049c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049c6:	e789      	b.n	80048dc <__ieee754_pow+0x3c>
 80049c8:	2402      	movs	r4, #2
 80049ca:	e7e6      	b.n	800499a <__ieee754_pow+0xfa>
 80049cc:	f1b8 0f00 	cmp.w	r8, #0
 80049d0:	f04f 0000 	mov.w	r0, #0
 80049d4:	f04f 0100 	mov.w	r1, #0
 80049d8:	da80      	bge.n	80048dc <__ieee754_pow+0x3c>
 80049da:	e9dd 0300 	ldrd	r0, r3, [sp]
 80049de:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80049e2:	e77b      	b.n	80048dc <__ieee754_pow+0x3c>
 80049e4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80049e8:	d106      	bne.n	80049f8 <__ieee754_pow+0x158>
 80049ea:	4652      	mov	r2, sl
 80049ec:	465b      	mov	r3, fp
 80049ee:	4650      	mov	r0, sl
 80049f0:	4659      	mov	r1, fp
 80049f2:	f7fb fd71 	bl	80004d8 <__aeabi_dmul>
 80049f6:	e771      	b.n	80048dc <__ieee754_pow+0x3c>
 80049f8:	4a4a      	ldr	r2, [pc, #296]	@ (8004b24 <__ieee754_pow+0x284>)
 80049fa:	4590      	cmp	r8, r2
 80049fc:	d109      	bne.n	8004a12 <__ieee754_pow+0x172>
 80049fe:	2d00      	cmp	r5, #0
 8004a00:	db07      	blt.n	8004a12 <__ieee754_pow+0x172>
 8004a02:	4650      	mov	r0, sl
 8004a04:	4659      	mov	r1, fp
 8004a06:	b011      	add	sp, #68	@ 0x44
 8004a08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0c:	f000 bd12 	b.w	8005434 <__ieee754_sqrt>
 8004a10:	2400      	movs	r4, #0
 8004a12:	4650      	mov	r0, sl
 8004a14:	4659      	mov	r1, fp
 8004a16:	9302      	str	r3, [sp, #8]
 8004a18:	f000 fc6a 	bl	80052f0 <fabs>
 8004a1c:	9b02      	ldr	r3, [sp, #8]
 8004a1e:	f1b9 0f00 	cmp.w	r9, #0
 8004a22:	d127      	bne.n	8004a74 <__ieee754_pow+0x1d4>
 8004a24:	4a3d      	ldr	r2, [pc, #244]	@ (8004b1c <__ieee754_pow+0x27c>)
 8004a26:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8004a2a:	4594      	cmp	ip, r2
 8004a2c:	d000      	beq.n	8004a30 <__ieee754_pow+0x190>
 8004a2e:	bb0e      	cbnz	r6, 8004a74 <__ieee754_pow+0x1d4>
 8004a30:	f1b8 0f00 	cmp.w	r8, #0
 8004a34:	da05      	bge.n	8004a42 <__ieee754_pow+0x1a2>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	4937      	ldr	r1, [pc, #220]	@ (8004b1c <__ieee754_pow+0x27c>)
 8004a3e:	f7fb fe75 	bl	800072c <__aeabi_ddiv>
 8004a42:	2d00      	cmp	r5, #0
 8004a44:	f6bf af4a 	bge.w	80048dc <__ieee754_pow+0x3c>
 8004a48:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8004a4c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8004a50:	4326      	orrs	r6, r4
 8004a52:	d108      	bne.n	8004a66 <__ieee754_pow+0x1c6>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	f7fb fb84 	bl	8000168 <__aeabi_dsub>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	e795      	b.n	8004992 <__ieee754_pow+0xf2>
 8004a66:	2c01      	cmp	r4, #1
 8004a68:	f47f af38 	bne.w	80048dc <__ieee754_pow+0x3c>
 8004a6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004a70:	4619      	mov	r1, r3
 8004a72:	e733      	b.n	80048dc <__ieee754_pow+0x3c>
 8004a74:	0fea      	lsrs	r2, r5, #31
 8004a76:	3a01      	subs	r2, #1
 8004a78:	ea52 0c04 	orrs.w	ip, r2, r4
 8004a7c:	d102      	bne.n	8004a84 <__ieee754_pow+0x1e4>
 8004a7e:	4652      	mov	r2, sl
 8004a80:	465b      	mov	r3, fp
 8004a82:	e7e9      	b.n	8004a58 <__ieee754_pow+0x1b8>
 8004a84:	f04f 0900 	mov.w	r9, #0
 8004a88:	3c01      	subs	r4, #1
 8004a8a:	4314      	orrs	r4, r2
 8004a8c:	bf14      	ite	ne
 8004a8e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8004b1c <__ieee754_pow+0x27c>
 8004a92:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8004b28 <__ieee754_pow+0x288>
 8004a96:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8004a9a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8004a9e:	f240 8107 	bls.w	8004cb0 <__ieee754_pow+0x410>
 8004aa2:	4b22      	ldr	r3, [pc, #136]	@ (8004b2c <__ieee754_pow+0x28c>)
 8004aa4:	429f      	cmp	r7, r3
 8004aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b20 <__ieee754_pow+0x280>)
 8004aa8:	d913      	bls.n	8004ad2 <__ieee754_pow+0x232>
 8004aaa:	429e      	cmp	r6, r3
 8004aac:	d808      	bhi.n	8004ac0 <__ieee754_pow+0x220>
 8004aae:	f1b8 0f00 	cmp.w	r8, #0
 8004ab2:	da08      	bge.n	8004ac6 <__ieee754_pow+0x226>
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	b011      	add	sp, #68	@ 0x44
 8004ab8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004abc:	f000 bcb4 	b.w	8005428 <__math_oflow>
 8004ac0:	f1b8 0f00 	cmp.w	r8, #0
 8004ac4:	dcf6      	bgt.n	8004ab4 <__ieee754_pow+0x214>
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	b011      	add	sp, #68	@ 0x44
 8004aca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ace:	f000 bca6 	b.w	800541e <__math_uflow>
 8004ad2:	429e      	cmp	r6, r3
 8004ad4:	d20c      	bcs.n	8004af0 <__ieee754_pow+0x250>
 8004ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ada:	2200      	movs	r2, #0
 8004adc:	2300      	movs	r3, #0
 8004ade:	f7fb ff6d 	bl	80009bc <__aeabi_dcmplt>
 8004ae2:	3800      	subs	r0, #0
 8004ae4:	bf18      	it	ne
 8004ae6:	2001      	movne	r0, #1
 8004ae8:	f1b8 0f00 	cmp.w	r8, #0
 8004aec:	daec      	bge.n	8004ac8 <__ieee754_pow+0x228>
 8004aee:	e7e2      	b.n	8004ab6 <__ieee754_pow+0x216>
 8004af0:	4b0a      	ldr	r3, [pc, #40]	@ (8004b1c <__ieee754_pow+0x27c>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	429e      	cmp	r6, r3
 8004af6:	d91b      	bls.n	8004b30 <__ieee754_pow+0x290>
 8004af8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004afc:	2300      	movs	r3, #0
 8004afe:	f7fb ff5d 	bl	80009bc <__aeabi_dcmplt>
 8004b02:	3800      	subs	r0, #0
 8004b04:	bf18      	it	ne
 8004b06:	2001      	movne	r0, #1
 8004b08:	f1b8 0f00 	cmp.w	r8, #0
 8004b0c:	dcd3      	bgt.n	8004ab6 <__ieee754_pow+0x216>
 8004b0e:	e7db      	b.n	8004ac8 <__ieee754_pow+0x228>
 8004b10:	fff00000 	.word	0xfff00000
 8004b14:	7ff00000 	.word	0x7ff00000
 8004b18:	433fffff 	.word	0x433fffff
 8004b1c:	3ff00000 	.word	0x3ff00000
 8004b20:	3fefffff 	.word	0x3fefffff
 8004b24:	3fe00000 	.word	0x3fe00000
 8004b28:	bff00000 	.word	0xbff00000
 8004b2c:	43f00000 	.word	0x43f00000
 8004b30:	4b5b      	ldr	r3, [pc, #364]	@ (8004ca0 <__ieee754_pow+0x400>)
 8004b32:	f7fb fb19 	bl	8000168 <__aeabi_dsub>
 8004b36:	a352      	add	r3, pc, #328	@ (adr r3, 8004c80 <__ieee754_pow+0x3e0>)
 8004b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3c:	4604      	mov	r4, r0
 8004b3e:	460d      	mov	r5, r1
 8004b40:	f7fb fcca 	bl	80004d8 <__aeabi_dmul>
 8004b44:	a350      	add	r3, pc, #320	@ (adr r3, 8004c88 <__ieee754_pow+0x3e8>)
 8004b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	460f      	mov	r7, r1
 8004b4e:	4620      	mov	r0, r4
 8004b50:	4629      	mov	r1, r5
 8004b52:	f7fb fcc1 	bl	80004d8 <__aeabi_dmul>
 8004b56:	2200      	movs	r2, #0
 8004b58:	4682      	mov	sl, r0
 8004b5a:	468b      	mov	fp, r1
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	4629      	mov	r1, r5
 8004b60:	4b50      	ldr	r3, [pc, #320]	@ (8004ca4 <__ieee754_pow+0x404>)
 8004b62:	f7fb fcb9 	bl	80004d8 <__aeabi_dmul>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	a149      	add	r1, pc, #292	@ (adr r1, 8004c90 <__ieee754_pow+0x3f0>)
 8004b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b70:	f7fb fafa 	bl	8000168 <__aeabi_dsub>
 8004b74:	4622      	mov	r2, r4
 8004b76:	462b      	mov	r3, r5
 8004b78:	f7fb fcae 	bl	80004d8 <__aeabi_dmul>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	2000      	movs	r0, #0
 8004b82:	4949      	ldr	r1, [pc, #292]	@ (8004ca8 <__ieee754_pow+0x408>)
 8004b84:	f7fb faf0 	bl	8000168 <__aeabi_dsub>
 8004b88:	4622      	mov	r2, r4
 8004b8a:	4680      	mov	r8, r0
 8004b8c:	4689      	mov	r9, r1
 8004b8e:	462b      	mov	r3, r5
 8004b90:	4620      	mov	r0, r4
 8004b92:	4629      	mov	r1, r5
 8004b94:	f7fb fca0 	bl	80004d8 <__aeabi_dmul>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4640      	mov	r0, r8
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	f7fb fc9a 	bl	80004d8 <__aeabi_dmul>
 8004ba4:	a33c      	add	r3, pc, #240	@ (adr r3, 8004c98 <__ieee754_pow+0x3f8>)
 8004ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004baa:	f7fb fc95 	bl	80004d8 <__aeabi_dmul>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4650      	mov	r0, sl
 8004bb4:	4659      	mov	r1, fp
 8004bb6:	f7fb fad7 	bl	8000168 <__aeabi_dsub>
 8004bba:	2400      	movs	r4, #0
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4680      	mov	r8, r0
 8004bc2:	4689      	mov	r9, r1
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	4639      	mov	r1, r7
 8004bc8:	f7fb fad0 	bl	800016c <__adddf3>
 8004bcc:	4632      	mov	r2, r6
 8004bce:	463b      	mov	r3, r7
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	460d      	mov	r5, r1
 8004bd4:	f7fb fac8 	bl	8000168 <__aeabi_dsub>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4640      	mov	r0, r8
 8004bde:	4649      	mov	r1, r9
 8004be0:	f7fb fac2 	bl	8000168 <__aeabi_dsub>
 8004be4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004be8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004bec:	2300      	movs	r3, #0
 8004bee:	9304      	str	r3, [sp, #16]
 8004bf0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	460f      	mov	r7, r1
 8004bf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bfc:	4652      	mov	r2, sl
 8004bfe:	465b      	mov	r3, fp
 8004c00:	f7fb fab2 	bl	8000168 <__aeabi_dsub>
 8004c04:	4622      	mov	r2, r4
 8004c06:	462b      	mov	r3, r5
 8004c08:	f7fb fc66 	bl	80004d8 <__aeabi_dmul>
 8004c0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c10:	4680      	mov	r8, r0
 8004c12:	4689      	mov	r9, r1
 8004c14:	4630      	mov	r0, r6
 8004c16:	4639      	mov	r1, r7
 8004c18:	f7fb fc5e 	bl	80004d8 <__aeabi_dmul>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4640      	mov	r0, r8
 8004c22:	4649      	mov	r1, r9
 8004c24:	f7fb faa2 	bl	800016c <__adddf3>
 8004c28:	4652      	mov	r2, sl
 8004c2a:	465b      	mov	r3, fp
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	460f      	mov	r7, r1
 8004c30:	4620      	mov	r0, r4
 8004c32:	4629      	mov	r1, r5
 8004c34:	f7fb fc50 	bl	80004d8 <__aeabi_dmul>
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	4680      	mov	r8, r0
 8004c3e:	4689      	mov	r9, r1
 8004c40:	4630      	mov	r0, r6
 8004c42:	4639      	mov	r1, r7
 8004c44:	f7fb fa92 	bl	800016c <__adddf3>
 8004c48:	4b18      	ldr	r3, [pc, #96]	@ (8004cac <__ieee754_pow+0x40c>)
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4299      	cmp	r1, r3
 8004c4e:	460d      	mov	r5, r1
 8004c50:	468a      	mov	sl, r1
 8004c52:	468b      	mov	fp, r1
 8004c54:	f340 82e0 	ble.w	8005218 <__ieee754_pow+0x978>
 8004c58:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8004c5c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8004c60:	4303      	orrs	r3, r0
 8004c62:	f000 81df 	beq.w	8005024 <__ieee754_pow+0x784>
 8004c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f7fb fea5 	bl	80009bc <__aeabi_dcmplt>
 8004c72:	3800      	subs	r0, #0
 8004c74:	bf18      	it	ne
 8004c76:	2001      	movne	r0, #1
 8004c78:	e71d      	b.n	8004ab6 <__ieee754_pow+0x216>
 8004c7a:	bf00      	nop
 8004c7c:	f3af 8000 	nop.w
 8004c80:	60000000 	.word	0x60000000
 8004c84:	3ff71547 	.word	0x3ff71547
 8004c88:	f85ddf44 	.word	0xf85ddf44
 8004c8c:	3e54ae0b 	.word	0x3e54ae0b
 8004c90:	55555555 	.word	0x55555555
 8004c94:	3fd55555 	.word	0x3fd55555
 8004c98:	652b82fe 	.word	0x652b82fe
 8004c9c:	3ff71547 	.word	0x3ff71547
 8004ca0:	3ff00000 	.word	0x3ff00000
 8004ca4:	3fd00000 	.word	0x3fd00000
 8004ca8:	3fe00000 	.word	0x3fe00000
 8004cac:	408fffff 	.word	0x408fffff
 8004cb0:	4ad3      	ldr	r2, [pc, #844]	@ (8005000 <__ieee754_pow+0x760>)
 8004cb2:	402a      	ands	r2, r5
 8004cb4:	2a00      	cmp	r2, #0
 8004cb6:	f040 817a 	bne.w	8004fae <__ieee754_pow+0x70e>
 8004cba:	4bd2      	ldr	r3, [pc, #840]	@ (8005004 <__ieee754_pow+0x764>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f7fb fc0b 	bl	80004d8 <__aeabi_dmul>
 8004cc2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	151a      	asrs	r2, r3, #20
 8004cca:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8004cce:	4422      	add	r2, r4
 8004cd0:	920a      	str	r2, [sp, #40]	@ 0x28
 8004cd2:	4acd      	ldr	r2, [pc, #820]	@ (8005008 <__ieee754_pow+0x768>)
 8004cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cd8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8004ce2:	dd08      	ble.n	8004cf6 <__ieee754_pow+0x456>
 8004ce4:	4ac9      	ldr	r2, [pc, #804]	@ (800500c <__ieee754_pow+0x76c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	f340 8163 	ble.w	8004fb2 <__ieee754_pow+0x712>
 8004cec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cee:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cf6:	2600      	movs	r6, #0
 8004cf8:	00f3      	lsls	r3, r6, #3
 8004cfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004cfc:	4bc4      	ldr	r3, [pc, #784]	@ (8005010 <__ieee754_pow+0x770>)
 8004cfe:	4629      	mov	r1, r5
 8004d00:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004d04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004d0e:	4623      	mov	r3, r4
 8004d10:	4682      	mov	sl, r0
 8004d12:	f7fb fa29 	bl	8000168 <__aeabi_dsub>
 8004d16:	4652      	mov	r2, sl
 8004d18:	462b      	mov	r3, r5
 8004d1a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8004d1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d22:	f7fb fa23 	bl	800016c <__adddf3>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	49b9      	ldr	r1, [pc, #740]	@ (8005014 <__ieee754_pow+0x774>)
 8004d2e:	f7fb fcfd 	bl	800072c <__aeabi_ddiv>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004d3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d3e:	f7fb fbcb 	bl	80004d8 <__aeabi_dmul>
 8004d42:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004d46:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004d4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	2200      	movs	r2, #0
 8004d52:	46ab      	mov	fp, r5
 8004d54:	106d      	asrs	r5, r5, #1
 8004d56:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8004d5a:	9304      	str	r3, [sp, #16]
 8004d5c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8004d60:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004d64:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004d68:	4640      	mov	r0, r8
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	4614      	mov	r4, r2
 8004d6e:	461d      	mov	r5, r3
 8004d70:	f7fb fbb2 	bl	80004d8 <__aeabi_dmul>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d7c:	f7fb f9f4 	bl	8000168 <__aeabi_dsub>
 8004d80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d84:	4606      	mov	r6, r0
 8004d86:	460f      	mov	r7, r1
 8004d88:	4620      	mov	r0, r4
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	f7fb f9ec 	bl	8000168 <__aeabi_dsub>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4650      	mov	r0, sl
 8004d96:	4659      	mov	r1, fp
 8004d98:	f7fb f9e6 	bl	8000168 <__aeabi_dsub>
 8004d9c:	4642      	mov	r2, r8
 8004d9e:	464b      	mov	r3, r9
 8004da0:	f7fb fb9a 	bl	80004d8 <__aeabi_dmul>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4630      	mov	r0, r6
 8004daa:	4639      	mov	r1, r7
 8004dac:	f7fb f9dc 	bl	8000168 <__aeabi_dsub>
 8004db0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004db4:	f7fb fb90 	bl	80004d8 <__aeabi_dmul>
 8004db8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004dbc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	f7fb fb88 	bl	80004d8 <__aeabi_dmul>
 8004dc8:	a37b      	add	r3, pc, #492	@ (adr r3, 8004fb8 <__ieee754_pow+0x718>)
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	4604      	mov	r4, r0
 8004dd0:	460d      	mov	r5, r1
 8004dd2:	f7fb fb81 	bl	80004d8 <__aeabi_dmul>
 8004dd6:	a37a      	add	r3, pc, #488	@ (adr r3, 8004fc0 <__ieee754_pow+0x720>)
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	f7fb f9c6 	bl	800016c <__adddf3>
 8004de0:	4622      	mov	r2, r4
 8004de2:	462b      	mov	r3, r5
 8004de4:	f7fb fb78 	bl	80004d8 <__aeabi_dmul>
 8004de8:	a377      	add	r3, pc, #476	@ (adr r3, 8004fc8 <__ieee754_pow+0x728>)
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	f7fb f9bd 	bl	800016c <__adddf3>
 8004df2:	4622      	mov	r2, r4
 8004df4:	462b      	mov	r3, r5
 8004df6:	f7fb fb6f 	bl	80004d8 <__aeabi_dmul>
 8004dfa:	a375      	add	r3, pc, #468	@ (adr r3, 8004fd0 <__ieee754_pow+0x730>)
 8004dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e00:	f7fb f9b4 	bl	800016c <__adddf3>
 8004e04:	4622      	mov	r2, r4
 8004e06:	462b      	mov	r3, r5
 8004e08:	f7fb fb66 	bl	80004d8 <__aeabi_dmul>
 8004e0c:	a372      	add	r3, pc, #456	@ (adr r3, 8004fd8 <__ieee754_pow+0x738>)
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	f7fb f9ab 	bl	800016c <__adddf3>
 8004e16:	4622      	mov	r2, r4
 8004e18:	462b      	mov	r3, r5
 8004e1a:	f7fb fb5d 	bl	80004d8 <__aeabi_dmul>
 8004e1e:	a370      	add	r3, pc, #448	@ (adr r3, 8004fe0 <__ieee754_pow+0x740>)
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	f7fb f9a2 	bl	800016c <__adddf3>
 8004e28:	4622      	mov	r2, r4
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	460f      	mov	r7, r1
 8004e2e:	462b      	mov	r3, r5
 8004e30:	4620      	mov	r0, r4
 8004e32:	4629      	mov	r1, r5
 8004e34:	f7fb fb50 	bl	80004d8 <__aeabi_dmul>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	4639      	mov	r1, r7
 8004e40:	f7fb fb4a 	bl	80004d8 <__aeabi_dmul>
 8004e44:	4604      	mov	r4, r0
 8004e46:	460d      	mov	r5, r1
 8004e48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	464b      	mov	r3, r9
 8004e50:	f7fb f98c 	bl	800016c <__adddf3>
 8004e54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e58:	f7fb fb3e 	bl	80004d8 <__aeabi_dmul>
 8004e5c:	4622      	mov	r2, r4
 8004e5e:	462b      	mov	r3, r5
 8004e60:	f7fb f984 	bl	800016c <__adddf3>
 8004e64:	4642      	mov	r2, r8
 8004e66:	4682      	mov	sl, r0
 8004e68:	468b      	mov	fp, r1
 8004e6a:	464b      	mov	r3, r9
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	4649      	mov	r1, r9
 8004e70:	f7fb fb32 	bl	80004d8 <__aeabi_dmul>
 8004e74:	2200      	movs	r2, #0
 8004e76:	4b68      	ldr	r3, [pc, #416]	@ (8005018 <__ieee754_pow+0x778>)
 8004e78:	4606      	mov	r6, r0
 8004e7a:	460f      	mov	r7, r1
 8004e7c:	f7fb f976 	bl	800016c <__adddf3>
 8004e80:	4652      	mov	r2, sl
 8004e82:	465b      	mov	r3, fp
 8004e84:	f7fb f972 	bl	800016c <__adddf3>
 8004e88:	2400      	movs	r4, #0
 8004e8a:	460d      	mov	r5, r1
 8004e8c:	4622      	mov	r2, r4
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4640      	mov	r0, r8
 8004e92:	4649      	mov	r1, r9
 8004e94:	f7fb fb20 	bl	80004d8 <__aeabi_dmul>
 8004e98:	2200      	movs	r2, #0
 8004e9a:	4680      	mov	r8, r0
 8004e9c:	4689      	mov	r9, r1
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	4b5d      	ldr	r3, [pc, #372]	@ (8005018 <__ieee754_pow+0x778>)
 8004ea4:	f7fb f960 	bl	8000168 <__aeabi_dsub>
 8004ea8:	4632      	mov	r2, r6
 8004eaa:	463b      	mov	r3, r7
 8004eac:	f7fb f95c 	bl	8000168 <__aeabi_dsub>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4650      	mov	r0, sl
 8004eb6:	4659      	mov	r1, fp
 8004eb8:	f7fb f956 	bl	8000168 <__aeabi_dsub>
 8004ebc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ec0:	f7fb fb0a 	bl	80004d8 <__aeabi_dmul>
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	460f      	mov	r7, r1
 8004eca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004ece:	462b      	mov	r3, r5
 8004ed0:	f7fb fb02 	bl	80004d8 <__aeabi_dmul>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4630      	mov	r0, r6
 8004eda:	4639      	mov	r1, r7
 8004edc:	f7fb f946 	bl	800016c <__adddf3>
 8004ee0:	2400      	movs	r4, #0
 8004ee2:	4606      	mov	r6, r0
 8004ee4:	460f      	mov	r7, r1
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4640      	mov	r0, r8
 8004eec:	4649      	mov	r1, r9
 8004eee:	f7fb f93d 	bl	800016c <__adddf3>
 8004ef2:	a33d      	add	r3, pc, #244	@ (adr r3, 8004fe8 <__ieee754_pow+0x748>)
 8004ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef8:	4620      	mov	r0, r4
 8004efa:	460d      	mov	r5, r1
 8004efc:	f7fb faec 	bl	80004d8 <__aeabi_dmul>
 8004f00:	4642      	mov	r2, r8
 8004f02:	464b      	mov	r3, r9
 8004f04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004f08:	4620      	mov	r0, r4
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	f7fb f92c 	bl	8000168 <__aeabi_dsub>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4630      	mov	r0, r6
 8004f16:	4639      	mov	r1, r7
 8004f18:	f7fb f926 	bl	8000168 <__aeabi_dsub>
 8004f1c:	a334      	add	r3, pc, #208	@ (adr r3, 8004ff0 <__ieee754_pow+0x750>)
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	f7fb fad9 	bl	80004d8 <__aeabi_dmul>
 8004f26:	a334      	add	r3, pc, #208	@ (adr r3, 8004ff8 <__ieee754_pow+0x758>)
 8004f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2c:	4606      	mov	r6, r0
 8004f2e:	460f      	mov	r7, r1
 8004f30:	4620      	mov	r0, r4
 8004f32:	4629      	mov	r1, r5
 8004f34:	f7fb fad0 	bl	80004d8 <__aeabi_dmul>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	4639      	mov	r1, r7
 8004f40:	f7fb f914 	bl	800016c <__adddf3>
 8004f44:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004f46:	4b35      	ldr	r3, [pc, #212]	@ (800501c <__ieee754_pow+0x77c>)
 8004f48:	2400      	movs	r4, #0
 8004f4a:	4413      	add	r3, r2
 8004f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f50:	f7fb f90c 	bl	800016c <__adddf3>
 8004f54:	4682      	mov	sl, r0
 8004f56:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004f58:	468b      	mov	fp, r1
 8004f5a:	f7fb fa53 	bl	8000404 <__aeabi_i2d>
 8004f5e:	4606      	mov	r6, r0
 8004f60:	460f      	mov	r7, r1
 8004f62:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004f64:	4b2e      	ldr	r3, [pc, #184]	@ (8005020 <__ieee754_pow+0x780>)
 8004f66:	4413      	add	r3, r2
 8004f68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f6c:	4652      	mov	r2, sl
 8004f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f72:	465b      	mov	r3, fp
 8004f74:	f7fb f8fa 	bl	800016c <__adddf3>
 8004f78:	4642      	mov	r2, r8
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	f7fb f8f6 	bl	800016c <__adddf3>
 8004f80:	4632      	mov	r2, r6
 8004f82:	463b      	mov	r3, r7
 8004f84:	f7fb f8f2 	bl	800016c <__adddf3>
 8004f88:	4632      	mov	r2, r6
 8004f8a:	463b      	mov	r3, r7
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	460d      	mov	r5, r1
 8004f90:	f7fb f8ea 	bl	8000168 <__aeabi_dsub>
 8004f94:	4642      	mov	r2, r8
 8004f96:	464b      	mov	r3, r9
 8004f98:	f7fb f8e6 	bl	8000168 <__aeabi_dsub>
 8004f9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004fa0:	f7fb f8e2 	bl	8000168 <__aeabi_dsub>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4650      	mov	r0, sl
 8004faa:	4659      	mov	r1, fp
 8004fac:	e618      	b.n	8004be0 <__ieee754_pow+0x340>
 8004fae:	2400      	movs	r4, #0
 8004fb0:	e68a      	b.n	8004cc8 <__ieee754_pow+0x428>
 8004fb2:	2601      	movs	r6, #1
 8004fb4:	e6a0      	b.n	8004cf8 <__ieee754_pow+0x458>
 8004fb6:	bf00      	nop
 8004fb8:	4a454eef 	.word	0x4a454eef
 8004fbc:	3fca7e28 	.word	0x3fca7e28
 8004fc0:	93c9db65 	.word	0x93c9db65
 8004fc4:	3fcd864a 	.word	0x3fcd864a
 8004fc8:	a91d4101 	.word	0xa91d4101
 8004fcc:	3fd17460 	.word	0x3fd17460
 8004fd0:	518f264d 	.word	0x518f264d
 8004fd4:	3fd55555 	.word	0x3fd55555
 8004fd8:	db6fabff 	.word	0xdb6fabff
 8004fdc:	3fdb6db6 	.word	0x3fdb6db6
 8004fe0:	33333303 	.word	0x33333303
 8004fe4:	3fe33333 	.word	0x3fe33333
 8004fe8:	e0000000 	.word	0xe0000000
 8004fec:	3feec709 	.word	0x3feec709
 8004ff0:	dc3a03fd 	.word	0xdc3a03fd
 8004ff4:	3feec709 	.word	0x3feec709
 8004ff8:	145b01f5 	.word	0x145b01f5
 8004ffc:	be3e2fe0 	.word	0xbe3e2fe0
 8005000:	7ff00000 	.word	0x7ff00000
 8005004:	43400000 	.word	0x43400000
 8005008:	0003988e 	.word	0x0003988e
 800500c:	000bb679 	.word	0x000bb679
 8005010:	08008210 	.word	0x08008210
 8005014:	3ff00000 	.word	0x3ff00000
 8005018:	40080000 	.word	0x40080000
 800501c:	080081f0 	.word	0x080081f0
 8005020:	08008200 	.word	0x08008200
 8005024:	a39a      	add	r3, pc, #616	@ (adr r3, 8005290 <__ieee754_pow+0x9f0>)
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	4630      	mov	r0, r6
 800502c:	4639      	mov	r1, r7
 800502e:	f7fb f89d 	bl	800016c <__adddf3>
 8005032:	4642      	mov	r2, r8
 8005034:	e9cd 0100 	strd	r0, r1, [sp]
 8005038:	464b      	mov	r3, r9
 800503a:	4620      	mov	r0, r4
 800503c:	4629      	mov	r1, r5
 800503e:	f7fb f893 	bl	8000168 <__aeabi_dsub>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	e9dd 0100 	ldrd	r0, r1, [sp]
 800504a:	f7fb fcd5 	bl	80009f8 <__aeabi_dcmpgt>
 800504e:	2800      	cmp	r0, #0
 8005050:	f47f ae09 	bne.w	8004c66 <__ieee754_pow+0x3c6>
 8005054:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005058:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800505c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8005060:	fa43 fa0a 	asr.w	sl, r3, sl
 8005064:	44da      	add	sl, fp
 8005066:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800506a:	489b      	ldr	r0, [pc, #620]	@ (80052d8 <__ieee754_pow+0xa38>)
 800506c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8005070:	4108      	asrs	r0, r1
 8005072:	ea00 030a 	and.w	r3, r0, sl
 8005076:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800507a:	f1c1 0114 	rsb	r1, r1, #20
 800507e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8005082:	4640      	mov	r0, r8
 8005084:	fa4a fa01 	asr.w	sl, sl, r1
 8005088:	f1bb 0f00 	cmp.w	fp, #0
 800508c:	4649      	mov	r1, r9
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	bfb8      	it	lt
 8005094:	f1ca 0a00 	rsblt	sl, sl, #0
 8005098:	f7fb f866 	bl	8000168 <__aeabi_dsub>
 800509c:	4680      	mov	r8, r0
 800509e:	4689      	mov	r9, r1
 80050a0:	2400      	movs	r4, #0
 80050a2:	4632      	mov	r2, r6
 80050a4:	463b      	mov	r3, r7
 80050a6:	4640      	mov	r0, r8
 80050a8:	4649      	mov	r1, r9
 80050aa:	f7fb f85f 	bl	800016c <__adddf3>
 80050ae:	a37a      	add	r3, pc, #488	@ (adr r3, 8005298 <__ieee754_pow+0x9f8>)
 80050b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b4:	4620      	mov	r0, r4
 80050b6:	460d      	mov	r5, r1
 80050b8:	f7fb fa0e 	bl	80004d8 <__aeabi_dmul>
 80050bc:	4642      	mov	r2, r8
 80050be:	464b      	mov	r3, r9
 80050c0:	e9cd 0100 	strd	r0, r1, [sp]
 80050c4:	4620      	mov	r0, r4
 80050c6:	4629      	mov	r1, r5
 80050c8:	f7fb f84e 	bl	8000168 <__aeabi_dsub>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4630      	mov	r0, r6
 80050d2:	4639      	mov	r1, r7
 80050d4:	f7fb f848 	bl	8000168 <__aeabi_dsub>
 80050d8:	a371      	add	r3, pc, #452	@ (adr r3, 80052a0 <__ieee754_pow+0xa00>)
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	f7fb f9fb 	bl	80004d8 <__aeabi_dmul>
 80050e2:	a371      	add	r3, pc, #452	@ (adr r3, 80052a8 <__ieee754_pow+0xa08>)
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	4680      	mov	r8, r0
 80050ea:	4689      	mov	r9, r1
 80050ec:	4620      	mov	r0, r4
 80050ee:	4629      	mov	r1, r5
 80050f0:	f7fb f9f2 	bl	80004d8 <__aeabi_dmul>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4640      	mov	r0, r8
 80050fa:	4649      	mov	r1, r9
 80050fc:	f7fb f836 	bl	800016c <__adddf3>
 8005100:	4604      	mov	r4, r0
 8005102:	460d      	mov	r5, r1
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	e9dd 0100 	ldrd	r0, r1, [sp]
 800510c:	f7fb f82e 	bl	800016c <__adddf3>
 8005110:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005114:	4680      	mov	r8, r0
 8005116:	4689      	mov	r9, r1
 8005118:	f7fb f826 	bl	8000168 <__aeabi_dsub>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4620      	mov	r0, r4
 8005122:	4629      	mov	r1, r5
 8005124:	f7fb f820 	bl	8000168 <__aeabi_dsub>
 8005128:	4642      	mov	r2, r8
 800512a:	4606      	mov	r6, r0
 800512c:	460f      	mov	r7, r1
 800512e:	464b      	mov	r3, r9
 8005130:	4640      	mov	r0, r8
 8005132:	4649      	mov	r1, r9
 8005134:	f7fb f9d0 	bl	80004d8 <__aeabi_dmul>
 8005138:	a35d      	add	r3, pc, #372	@ (adr r3, 80052b0 <__ieee754_pow+0xa10>)
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	4604      	mov	r4, r0
 8005140:	460d      	mov	r5, r1
 8005142:	f7fb f9c9 	bl	80004d8 <__aeabi_dmul>
 8005146:	a35c      	add	r3, pc, #368	@ (adr r3, 80052b8 <__ieee754_pow+0xa18>)
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f7fb f80c 	bl	8000168 <__aeabi_dsub>
 8005150:	4622      	mov	r2, r4
 8005152:	462b      	mov	r3, r5
 8005154:	f7fb f9c0 	bl	80004d8 <__aeabi_dmul>
 8005158:	a359      	add	r3, pc, #356	@ (adr r3, 80052c0 <__ieee754_pow+0xa20>)
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f7fb f805 	bl	800016c <__adddf3>
 8005162:	4622      	mov	r2, r4
 8005164:	462b      	mov	r3, r5
 8005166:	f7fb f9b7 	bl	80004d8 <__aeabi_dmul>
 800516a:	a357      	add	r3, pc, #348	@ (adr r3, 80052c8 <__ieee754_pow+0xa28>)
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	f7fa fffa 	bl	8000168 <__aeabi_dsub>
 8005174:	4622      	mov	r2, r4
 8005176:	462b      	mov	r3, r5
 8005178:	f7fb f9ae 	bl	80004d8 <__aeabi_dmul>
 800517c:	a354      	add	r3, pc, #336	@ (adr r3, 80052d0 <__ieee754_pow+0xa30>)
 800517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005182:	f7fa fff3 	bl	800016c <__adddf3>
 8005186:	4622      	mov	r2, r4
 8005188:	462b      	mov	r3, r5
 800518a:	f7fb f9a5 	bl	80004d8 <__aeabi_dmul>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4640      	mov	r0, r8
 8005194:	4649      	mov	r1, r9
 8005196:	f7fa ffe7 	bl	8000168 <__aeabi_dsub>
 800519a:	4604      	mov	r4, r0
 800519c:	460d      	mov	r5, r1
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4640      	mov	r0, r8
 80051a4:	4649      	mov	r1, r9
 80051a6:	f7fb f997 	bl	80004d8 <__aeabi_dmul>
 80051aa:	2200      	movs	r2, #0
 80051ac:	e9cd 0100 	strd	r0, r1, [sp]
 80051b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80051b4:	4620      	mov	r0, r4
 80051b6:	4629      	mov	r1, r5
 80051b8:	f7fa ffd6 	bl	8000168 <__aeabi_dsub>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051c4:	f7fb fab2 	bl	800072c <__aeabi_ddiv>
 80051c8:	4632      	mov	r2, r6
 80051ca:	4604      	mov	r4, r0
 80051cc:	460d      	mov	r5, r1
 80051ce:	463b      	mov	r3, r7
 80051d0:	4640      	mov	r0, r8
 80051d2:	4649      	mov	r1, r9
 80051d4:	f7fb f980 	bl	80004d8 <__aeabi_dmul>
 80051d8:	4632      	mov	r2, r6
 80051da:	463b      	mov	r3, r7
 80051dc:	f7fa ffc6 	bl	800016c <__adddf3>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4620      	mov	r0, r4
 80051e6:	4629      	mov	r1, r5
 80051e8:	f7fa ffbe 	bl	8000168 <__aeabi_dsub>
 80051ec:	4642      	mov	r2, r8
 80051ee:	464b      	mov	r3, r9
 80051f0:	f7fa ffba 	bl	8000168 <__aeabi_dsub>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	2000      	movs	r0, #0
 80051fa:	4938      	ldr	r1, [pc, #224]	@ (80052dc <__ieee754_pow+0xa3c>)
 80051fc:	f7fa ffb4 	bl	8000168 <__aeabi_dsub>
 8005200:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005204:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8005208:	da2e      	bge.n	8005268 <__ieee754_pow+0x9c8>
 800520a:	4652      	mov	r2, sl
 800520c:	f000 f874 	bl	80052f8 <scalbn>
 8005210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005214:	f7ff bbed 	b.w	80049f2 <__ieee754_pow+0x152>
 8005218:	4c31      	ldr	r4, [pc, #196]	@ (80052e0 <__ieee754_pow+0xa40>)
 800521a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800521e:	42a3      	cmp	r3, r4
 8005220:	d91a      	bls.n	8005258 <__ieee754_pow+0x9b8>
 8005222:	4b30      	ldr	r3, [pc, #192]	@ (80052e4 <__ieee754_pow+0xa44>)
 8005224:	440b      	add	r3, r1
 8005226:	4303      	orrs	r3, r0
 8005228:	d009      	beq.n	800523e <__ieee754_pow+0x99e>
 800522a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800522e:	2200      	movs	r2, #0
 8005230:	2300      	movs	r3, #0
 8005232:	f7fb fbc3 	bl	80009bc <__aeabi_dcmplt>
 8005236:	3800      	subs	r0, #0
 8005238:	bf18      	it	ne
 800523a:	2001      	movne	r0, #1
 800523c:	e444      	b.n	8004ac8 <__ieee754_pow+0x228>
 800523e:	4642      	mov	r2, r8
 8005240:	464b      	mov	r3, r9
 8005242:	f7fa ff91 	bl	8000168 <__aeabi_dsub>
 8005246:	4632      	mov	r2, r6
 8005248:	463b      	mov	r3, r7
 800524a:	f7fb fbcb 	bl	80009e4 <__aeabi_dcmpge>
 800524e:	2800      	cmp	r0, #0
 8005250:	d1eb      	bne.n	800522a <__ieee754_pow+0x98a>
 8005252:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80052e8 <__ieee754_pow+0xa48>
 8005256:	e6fd      	b.n	8005054 <__ieee754_pow+0x7b4>
 8005258:	469a      	mov	sl, r3
 800525a:	4b24      	ldr	r3, [pc, #144]	@ (80052ec <__ieee754_pow+0xa4c>)
 800525c:	459a      	cmp	sl, r3
 800525e:	f63f aef9 	bhi.w	8005054 <__ieee754_pow+0x7b4>
 8005262:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005266:	e71b      	b.n	80050a0 <__ieee754_pow+0x800>
 8005268:	4621      	mov	r1, r4
 800526a:	e7d1      	b.n	8005210 <__ieee754_pow+0x970>
 800526c:	2000      	movs	r0, #0
 800526e:	491b      	ldr	r1, [pc, #108]	@ (80052dc <__ieee754_pow+0xa3c>)
 8005270:	f7ff bb34 	b.w	80048dc <__ieee754_pow+0x3c>
 8005274:	2000      	movs	r0, #0
 8005276:	2100      	movs	r1, #0
 8005278:	f7ff bb30 	b.w	80048dc <__ieee754_pow+0x3c>
 800527c:	4650      	mov	r0, sl
 800527e:	4659      	mov	r1, fp
 8005280:	f7ff bb2c 	b.w	80048dc <__ieee754_pow+0x3c>
 8005284:	460c      	mov	r4, r1
 8005286:	f7ff bb79 	b.w	800497c <__ieee754_pow+0xdc>
 800528a:	2400      	movs	r4, #0
 800528c:	f7ff bb64 	b.w	8004958 <__ieee754_pow+0xb8>
 8005290:	652b82fe 	.word	0x652b82fe
 8005294:	3c971547 	.word	0x3c971547
 8005298:	00000000 	.word	0x00000000
 800529c:	3fe62e43 	.word	0x3fe62e43
 80052a0:	fefa39ef 	.word	0xfefa39ef
 80052a4:	3fe62e42 	.word	0x3fe62e42
 80052a8:	0ca86c39 	.word	0x0ca86c39
 80052ac:	be205c61 	.word	0xbe205c61
 80052b0:	72bea4d0 	.word	0x72bea4d0
 80052b4:	3e663769 	.word	0x3e663769
 80052b8:	c5d26bf1 	.word	0xc5d26bf1
 80052bc:	3ebbbd41 	.word	0x3ebbbd41
 80052c0:	af25de2c 	.word	0xaf25de2c
 80052c4:	3f11566a 	.word	0x3f11566a
 80052c8:	16bebd93 	.word	0x16bebd93
 80052cc:	3f66c16c 	.word	0x3f66c16c
 80052d0:	5555553e 	.word	0x5555553e
 80052d4:	3fc55555 	.word	0x3fc55555
 80052d8:	fff00000 	.word	0xfff00000
 80052dc:	3ff00000 	.word	0x3ff00000
 80052e0:	4090cbff 	.word	0x4090cbff
 80052e4:	3f6f3400 	.word	0x3f6f3400
 80052e8:	4090cc00 	.word	0x4090cc00
 80052ec:	3fe00000 	.word	0x3fe00000

080052f0 <fabs>:
 80052f0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80052f4:	4619      	mov	r1, r3
 80052f6:	4770      	bx	lr

080052f8 <scalbn>:
 80052f8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80052fc:	4616      	mov	r6, r2
 80052fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005302:	4683      	mov	fp, r0
 8005304:	468c      	mov	ip, r1
 8005306:	460b      	mov	r3, r1
 8005308:	b982      	cbnz	r2, 800532c <scalbn+0x34>
 800530a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800530e:	4303      	orrs	r3, r0
 8005310:	d039      	beq.n	8005386 <scalbn+0x8e>
 8005312:	4b2f      	ldr	r3, [pc, #188]	@ (80053d0 <scalbn+0xd8>)
 8005314:	2200      	movs	r2, #0
 8005316:	f7fb f8df 	bl	80004d8 <__aeabi_dmul>
 800531a:	4b2e      	ldr	r3, [pc, #184]	@ (80053d4 <scalbn+0xdc>)
 800531c:	4683      	mov	fp, r0
 800531e:	429e      	cmp	r6, r3
 8005320:	468c      	mov	ip, r1
 8005322:	da0d      	bge.n	8005340 <scalbn+0x48>
 8005324:	a326      	add	r3, pc, #152	@ (adr r3, 80053c0 <scalbn+0xc8>)
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	e01b      	b.n	8005364 <scalbn+0x6c>
 800532c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8005330:	42ba      	cmp	r2, r7
 8005332:	d109      	bne.n	8005348 <scalbn+0x50>
 8005334:	4602      	mov	r2, r0
 8005336:	f7fa ff19 	bl	800016c <__adddf3>
 800533a:	4683      	mov	fp, r0
 800533c:	468c      	mov	ip, r1
 800533e:	e022      	b.n	8005386 <scalbn+0x8e>
 8005340:	460b      	mov	r3, r1
 8005342:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005346:	3a36      	subs	r2, #54	@ 0x36
 8005348:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800534c:	428e      	cmp	r6, r1
 800534e:	dd0c      	ble.n	800536a <scalbn+0x72>
 8005350:	a31d      	add	r3, pc, #116	@ (adr r3, 80053c8 <scalbn+0xd0>)
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	461c      	mov	r4, r3
 8005358:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800535c:	f361 74df 	bfi	r4, r1, #31, #1
 8005360:	4621      	mov	r1, r4
 8005362:	481d      	ldr	r0, [pc, #116]	@ (80053d8 <scalbn+0xe0>)
 8005364:	f7fb f8b8 	bl	80004d8 <__aeabi_dmul>
 8005368:	e7e7      	b.n	800533a <scalbn+0x42>
 800536a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800536e:	4432      	add	r2, r6
 8005370:	428a      	cmp	r2, r1
 8005372:	dced      	bgt.n	8005350 <scalbn+0x58>
 8005374:	2a00      	cmp	r2, #0
 8005376:	dd0a      	ble.n	800538e <scalbn+0x96>
 8005378:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800537c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005380:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005384:	46ac      	mov	ip, r5
 8005386:	4658      	mov	r0, fp
 8005388:	4661      	mov	r1, ip
 800538a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800538e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005392:	da09      	bge.n	80053a8 <scalbn+0xb0>
 8005394:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8005398:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800539c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80053a0:	480e      	ldr	r0, [pc, #56]	@ (80053dc <scalbn+0xe4>)
 80053a2:	f041 011f 	orr.w	r1, r1, #31
 80053a6:	e7bd      	b.n	8005324 <scalbn+0x2c>
 80053a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80053ac:	3236      	adds	r2, #54	@ 0x36
 80053ae:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80053b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80053b6:	4658      	mov	r0, fp
 80053b8:	4629      	mov	r1, r5
 80053ba:	2200      	movs	r2, #0
 80053bc:	4b08      	ldr	r3, [pc, #32]	@ (80053e0 <scalbn+0xe8>)
 80053be:	e7d1      	b.n	8005364 <scalbn+0x6c>
 80053c0:	c2f8f359 	.word	0xc2f8f359
 80053c4:	01a56e1f 	.word	0x01a56e1f
 80053c8:	8800759c 	.word	0x8800759c
 80053cc:	7e37e43c 	.word	0x7e37e43c
 80053d0:	43500000 	.word	0x43500000
 80053d4:	ffff3cb0 	.word	0xffff3cb0
 80053d8:	8800759c 	.word	0x8800759c
 80053dc:	c2f8f359 	.word	0xc2f8f359
 80053e0:	3c900000 	.word	0x3c900000

080053e4 <with_errno>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	4604      	mov	r4, r0
 80053e8:	460d      	mov	r5, r1
 80053ea:	4616      	mov	r6, r2
 80053ec:	f000 ff58 	bl	80062a0 <__errno>
 80053f0:	4629      	mov	r1, r5
 80053f2:	6006      	str	r6, [r0, #0]
 80053f4:	4620      	mov	r0, r4
 80053f6:	bd70      	pop	{r4, r5, r6, pc}

080053f8 <xflow>:
 80053f8:	b513      	push	{r0, r1, r4, lr}
 80053fa:	4604      	mov	r4, r0
 80053fc:	4619      	mov	r1, r3
 80053fe:	4610      	mov	r0, r2
 8005400:	b10c      	cbz	r4, 8005406 <xflow+0xe>
 8005402:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005406:	e9cd 2300 	strd	r2, r3, [sp]
 800540a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800540e:	f7fb f863 	bl	80004d8 <__aeabi_dmul>
 8005412:	2222      	movs	r2, #34	@ 0x22
 8005414:	b002      	add	sp, #8
 8005416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800541a:	f7ff bfe3 	b.w	80053e4 <with_errno>

0800541e <__math_uflow>:
 800541e:	2200      	movs	r2, #0
 8005420:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005424:	f7ff bfe8 	b.w	80053f8 <xflow>

08005428 <__math_oflow>:
 8005428:	2200      	movs	r2, #0
 800542a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800542e:	f7ff bfe3 	b.w	80053f8 <xflow>
	...

08005434 <__ieee754_sqrt>:
 8005434:	4a67      	ldr	r2, [pc, #412]	@ (80055d4 <__ieee754_sqrt+0x1a0>)
 8005436:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543a:	438a      	bics	r2, r1
 800543c:	4606      	mov	r6, r0
 800543e:	460f      	mov	r7, r1
 8005440:	460b      	mov	r3, r1
 8005442:	4604      	mov	r4, r0
 8005444:	d10e      	bne.n	8005464 <__ieee754_sqrt+0x30>
 8005446:	4602      	mov	r2, r0
 8005448:	f7fb f846 	bl	80004d8 <__aeabi_dmul>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4630      	mov	r0, r6
 8005452:	4639      	mov	r1, r7
 8005454:	f7fa fe8a 	bl	800016c <__adddf3>
 8005458:	4606      	mov	r6, r0
 800545a:	460f      	mov	r7, r1
 800545c:	4630      	mov	r0, r6
 800545e:	4639      	mov	r1, r7
 8005460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005464:	2900      	cmp	r1, #0
 8005466:	dc0c      	bgt.n	8005482 <__ieee754_sqrt+0x4e>
 8005468:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800546c:	4302      	orrs	r2, r0
 800546e:	d0f5      	beq.n	800545c <__ieee754_sqrt+0x28>
 8005470:	b189      	cbz	r1, 8005496 <__ieee754_sqrt+0x62>
 8005472:	4602      	mov	r2, r0
 8005474:	f7fa fe78 	bl	8000168 <__aeabi_dsub>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	f7fb f956 	bl	800072c <__aeabi_ddiv>
 8005480:	e7ea      	b.n	8005458 <__ieee754_sqrt+0x24>
 8005482:	150a      	asrs	r2, r1, #20
 8005484:	d115      	bne.n	80054b2 <__ieee754_sqrt+0x7e>
 8005486:	2100      	movs	r1, #0
 8005488:	e009      	b.n	800549e <__ieee754_sqrt+0x6a>
 800548a:	0ae3      	lsrs	r3, r4, #11
 800548c:	3a15      	subs	r2, #21
 800548e:	0564      	lsls	r4, r4, #21
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0fa      	beq.n	800548a <__ieee754_sqrt+0x56>
 8005494:	e7f7      	b.n	8005486 <__ieee754_sqrt+0x52>
 8005496:	460a      	mov	r2, r1
 8005498:	e7fa      	b.n	8005490 <__ieee754_sqrt+0x5c>
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	3101      	adds	r1, #1
 800549e:	02d8      	lsls	r0, r3, #11
 80054a0:	d5fb      	bpl.n	800549a <__ieee754_sqrt+0x66>
 80054a2:	1e48      	subs	r0, r1, #1
 80054a4:	1a12      	subs	r2, r2, r0
 80054a6:	f1c1 0020 	rsb	r0, r1, #32
 80054aa:	fa24 f000 	lsr.w	r0, r4, r0
 80054ae:	4303      	orrs	r3, r0
 80054b0:	408c      	lsls	r4, r1
 80054b2:	2600      	movs	r6, #0
 80054b4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80054b8:	2116      	movs	r1, #22
 80054ba:	07d2      	lsls	r2, r2, #31
 80054bc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80054c0:	4632      	mov	r2, r6
 80054c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054ca:	bf5c      	itt	pl
 80054cc:	005b      	lslpl	r3, r3, #1
 80054ce:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80054d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80054d6:	bf58      	it	pl
 80054d8:	0064      	lslpl	r4, r4, #1
 80054da:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80054de:	107f      	asrs	r7, r7, #1
 80054e0:	0064      	lsls	r4, r4, #1
 80054e2:	1815      	adds	r5, r2, r0
 80054e4:	429d      	cmp	r5, r3
 80054e6:	bfde      	ittt	le
 80054e8:	182a      	addle	r2, r5, r0
 80054ea:	1b5b      	suble	r3, r3, r5
 80054ec:	1836      	addle	r6, r6, r0
 80054ee:	0fe5      	lsrs	r5, r4, #31
 80054f0:	3901      	subs	r1, #1
 80054f2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80054f6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80054fa:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80054fe:	d1f0      	bne.n	80054e2 <__ieee754_sqrt+0xae>
 8005500:	460d      	mov	r5, r1
 8005502:	f04f 0a20 	mov.w	sl, #32
 8005506:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800550a:	429a      	cmp	r2, r3
 800550c:	eb01 0c00 	add.w	ip, r1, r0
 8005510:	db02      	blt.n	8005518 <__ieee754_sqrt+0xe4>
 8005512:	d113      	bne.n	800553c <__ieee754_sqrt+0x108>
 8005514:	45a4      	cmp	ip, r4
 8005516:	d811      	bhi.n	800553c <__ieee754_sqrt+0x108>
 8005518:	f1bc 0f00 	cmp.w	ip, #0
 800551c:	eb0c 0100 	add.w	r1, ip, r0
 8005520:	da42      	bge.n	80055a8 <__ieee754_sqrt+0x174>
 8005522:	2900      	cmp	r1, #0
 8005524:	db40      	blt.n	80055a8 <__ieee754_sqrt+0x174>
 8005526:	f102 0e01 	add.w	lr, r2, #1
 800552a:	1a9b      	subs	r3, r3, r2
 800552c:	4672      	mov	r2, lr
 800552e:	45a4      	cmp	ip, r4
 8005530:	bf88      	it	hi
 8005532:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005536:	eba4 040c 	sub.w	r4, r4, ip
 800553a:	4405      	add	r5, r0
 800553c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8005540:	f1ba 0a01 	subs.w	sl, sl, #1
 8005544:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8005548:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800554c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005550:	d1db      	bne.n	800550a <__ieee754_sqrt+0xd6>
 8005552:	431c      	orrs	r4, r3
 8005554:	d01a      	beq.n	800558c <__ieee754_sqrt+0x158>
 8005556:	4c20      	ldr	r4, [pc, #128]	@ (80055d8 <__ieee754_sqrt+0x1a4>)
 8005558:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80055dc <__ieee754_sqrt+0x1a8>
 800555c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005560:	e9db 2300 	ldrd	r2, r3, [fp]
 8005564:	f7fa fe00 	bl	8000168 <__aeabi_dsub>
 8005568:	e9d4 8900 	ldrd	r8, r9, [r4]
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4640      	mov	r0, r8
 8005572:	4649      	mov	r1, r9
 8005574:	f7fb fa2c 	bl	80009d0 <__aeabi_dcmple>
 8005578:	b140      	cbz	r0, 800558c <__ieee754_sqrt+0x158>
 800557a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800557e:	e9db 2300 	ldrd	r2, r3, [fp]
 8005582:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005586:	d111      	bne.n	80055ac <__ieee754_sqrt+0x178>
 8005588:	4655      	mov	r5, sl
 800558a:	3601      	adds	r6, #1
 800558c:	1072      	asrs	r2, r6, #1
 800558e:	086b      	lsrs	r3, r5, #1
 8005590:	07f1      	lsls	r1, r6, #31
 8005592:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005596:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800559a:	bf48      	it	mi
 800559c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80055a0:	4618      	mov	r0, r3
 80055a2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 80055a6:	e757      	b.n	8005458 <__ieee754_sqrt+0x24>
 80055a8:	4696      	mov	lr, r2
 80055aa:	e7be      	b.n	800552a <__ieee754_sqrt+0xf6>
 80055ac:	f7fa fdde 	bl	800016c <__adddf3>
 80055b0:	e9d4 8900 	ldrd	r8, r9, [r4]
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4640      	mov	r0, r8
 80055ba:	4649      	mov	r1, r9
 80055bc:	f7fb f9fe 	bl	80009bc <__aeabi_dcmplt>
 80055c0:	b120      	cbz	r0, 80055cc <__ieee754_sqrt+0x198>
 80055c2:	1ca8      	adds	r0, r5, #2
 80055c4:	bf08      	it	eq
 80055c6:	3601      	addeq	r6, #1
 80055c8:	3502      	adds	r5, #2
 80055ca:	e7df      	b.n	800558c <__ieee754_sqrt+0x158>
 80055cc:	1c6b      	adds	r3, r5, #1
 80055ce:	f023 0501 	bic.w	r5, r3, #1
 80055d2:	e7db      	b.n	800558c <__ieee754_sqrt+0x158>
 80055d4:	7ff00000 	.word	0x7ff00000
 80055d8:	200000d0 	.word	0x200000d0
 80055dc:	200000c8 	.word	0x200000c8

080055e0 <__assert_func>:
 80055e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055e2:	4614      	mov	r4, r2
 80055e4:	461a      	mov	r2, r3
 80055e6:	4b09      	ldr	r3, [pc, #36]	@ (800560c <__assert_func+0x2c>)
 80055e8:	4605      	mov	r5, r0
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68d8      	ldr	r0, [r3, #12]
 80055ee:	b954      	cbnz	r4, 8005606 <__assert_func+0x26>
 80055f0:	4b07      	ldr	r3, [pc, #28]	@ (8005610 <__assert_func+0x30>)
 80055f2:	461c      	mov	r4, r3
 80055f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055f8:	9100      	str	r1, [sp, #0]
 80055fa:	462b      	mov	r3, r5
 80055fc:	4905      	ldr	r1, [pc, #20]	@ (8005614 <__assert_func+0x34>)
 80055fe:	f000 fd7b 	bl	80060f8 <fiprintf>
 8005602:	f000 fe88 	bl	8006316 <abort>
 8005606:	4b04      	ldr	r3, [pc, #16]	@ (8005618 <__assert_func+0x38>)
 8005608:	e7f4      	b.n	80055f4 <__assert_func+0x14>
 800560a:	bf00      	nop
 800560c:	200000e4 	.word	0x200000e4
 8005610:	0800825b 	.word	0x0800825b
 8005614:	0800822d 	.word	0x0800822d
 8005618:	08008220 	.word	0x08008220

0800561c <exit>:
 800561c:	b508      	push	{r3, lr}
 800561e:	4b06      	ldr	r3, [pc, #24]	@ (8005638 <exit+0x1c>)
 8005620:	4604      	mov	r4, r0
 8005622:	b113      	cbz	r3, 800562a <exit+0xe>
 8005624:	2100      	movs	r1, #0
 8005626:	f3af 8000 	nop.w
 800562a:	4b04      	ldr	r3, [pc, #16]	@ (800563c <exit+0x20>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	b103      	cbz	r3, 8005632 <exit+0x16>
 8005630:	4798      	blx	r3
 8005632:	4620      	mov	r0, r4
 8005634:	f7fd f931 	bl	800289a <_exit>
 8005638:	00000000 	.word	0x00000000
 800563c:	20000a70 	.word	0x20000a70

08005640 <__itoa>:
 8005640:	1e93      	subs	r3, r2, #2
 8005642:	2b22      	cmp	r3, #34	@ 0x22
 8005644:	b510      	push	{r4, lr}
 8005646:	460c      	mov	r4, r1
 8005648:	d904      	bls.n	8005654 <__itoa+0x14>
 800564a:	2300      	movs	r3, #0
 800564c:	461c      	mov	r4, r3
 800564e:	700b      	strb	r3, [r1, #0]
 8005650:	4620      	mov	r0, r4
 8005652:	bd10      	pop	{r4, pc}
 8005654:	2a0a      	cmp	r2, #10
 8005656:	d109      	bne.n	800566c <__itoa+0x2c>
 8005658:	2800      	cmp	r0, #0
 800565a:	da07      	bge.n	800566c <__itoa+0x2c>
 800565c:	232d      	movs	r3, #45	@ 0x2d
 800565e:	700b      	strb	r3, [r1, #0]
 8005660:	2101      	movs	r1, #1
 8005662:	4240      	negs	r0, r0
 8005664:	4421      	add	r1, r4
 8005666:	f000 f805 	bl	8005674 <__utoa>
 800566a:	e7f1      	b.n	8005650 <__itoa+0x10>
 800566c:	2100      	movs	r1, #0
 800566e:	e7f9      	b.n	8005664 <__itoa+0x24>

08005670 <itoa>:
 8005670:	f7ff bfe6 	b.w	8005640 <__itoa>

08005674 <__utoa>:
 8005674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005676:	b08b      	sub	sp, #44	@ 0x2c
 8005678:	4605      	mov	r5, r0
 800567a:	460b      	mov	r3, r1
 800567c:	466e      	mov	r6, sp
 800567e:	4c1d      	ldr	r4, [pc, #116]	@ (80056f4 <__utoa+0x80>)
 8005680:	f104 0c20 	add.w	ip, r4, #32
 8005684:	4637      	mov	r7, r6
 8005686:	6820      	ldr	r0, [r4, #0]
 8005688:	6861      	ldr	r1, [r4, #4]
 800568a:	3408      	adds	r4, #8
 800568c:	c703      	stmia	r7!, {r0, r1}
 800568e:	4564      	cmp	r4, ip
 8005690:	463e      	mov	r6, r7
 8005692:	d1f7      	bne.n	8005684 <__utoa+0x10>
 8005694:	7921      	ldrb	r1, [r4, #4]
 8005696:	6820      	ldr	r0, [r4, #0]
 8005698:	7139      	strb	r1, [r7, #4]
 800569a:	1e91      	subs	r1, r2, #2
 800569c:	2922      	cmp	r1, #34	@ 0x22
 800569e:	6038      	str	r0, [r7, #0]
 80056a0:	f04f 0100 	mov.w	r1, #0
 80056a4:	d904      	bls.n	80056b0 <__utoa+0x3c>
 80056a6:	7019      	strb	r1, [r3, #0]
 80056a8:	460b      	mov	r3, r1
 80056aa:	4618      	mov	r0, r3
 80056ac:	b00b      	add	sp, #44	@ 0x2c
 80056ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b0:	1e58      	subs	r0, r3, #1
 80056b2:	4684      	mov	ip, r0
 80056b4:	fbb5 f7f2 	udiv	r7, r5, r2
 80056b8:	fb02 5617 	mls	r6, r2, r7, r5
 80056bc:	3628      	adds	r6, #40	@ 0x28
 80056be:	446e      	add	r6, sp
 80056c0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80056c4:	460c      	mov	r4, r1
 80056c6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80056ca:	462e      	mov	r6, r5
 80056cc:	42b2      	cmp	r2, r6
 80056ce:	463d      	mov	r5, r7
 80056d0:	f101 0101 	add.w	r1, r1, #1
 80056d4:	d9ee      	bls.n	80056b4 <__utoa+0x40>
 80056d6:	2200      	movs	r2, #0
 80056d8:	545a      	strb	r2, [r3, r1]
 80056da:	1919      	adds	r1, r3, r4
 80056dc:	1aa5      	subs	r5, r4, r2
 80056de:	42aa      	cmp	r2, r5
 80056e0:	dae3      	bge.n	80056aa <__utoa+0x36>
 80056e2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80056e6:	780e      	ldrb	r6, [r1, #0]
 80056e8:	3201      	adds	r2, #1
 80056ea:	7006      	strb	r6, [r0, #0]
 80056ec:	f801 5901 	strb.w	r5, [r1], #-1
 80056f0:	e7f4      	b.n	80056dc <__utoa+0x68>
 80056f2:	bf00      	nop
 80056f4:	0800825c 	.word	0x0800825c

080056f8 <__cvt>:
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056fe:	461d      	mov	r5, r3
 8005700:	bfbb      	ittet	lt
 8005702:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005706:	461d      	movlt	r5, r3
 8005708:	2300      	movge	r3, #0
 800570a:	232d      	movlt	r3, #45	@ 0x2d
 800570c:	b088      	sub	sp, #32
 800570e:	4614      	mov	r4, r2
 8005710:	bfb8      	it	lt
 8005712:	4614      	movlt	r4, r2
 8005714:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005716:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005718:	7013      	strb	r3, [r2, #0]
 800571a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800571c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005720:	f023 0820 	bic.w	r8, r3, #32
 8005724:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005728:	d005      	beq.n	8005736 <__cvt+0x3e>
 800572a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800572e:	d100      	bne.n	8005732 <__cvt+0x3a>
 8005730:	3601      	adds	r6, #1
 8005732:	2302      	movs	r3, #2
 8005734:	e000      	b.n	8005738 <__cvt+0x40>
 8005736:	2303      	movs	r3, #3
 8005738:	aa07      	add	r2, sp, #28
 800573a:	9204      	str	r2, [sp, #16]
 800573c:	aa06      	add	r2, sp, #24
 800573e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005742:	e9cd 3600 	strd	r3, r6, [sp]
 8005746:	4622      	mov	r2, r4
 8005748:	462b      	mov	r3, r5
 800574a:	f000 fe75 	bl	8006438 <_dtoa_r>
 800574e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005752:	4607      	mov	r7, r0
 8005754:	d119      	bne.n	800578a <__cvt+0x92>
 8005756:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005758:	07db      	lsls	r3, r3, #31
 800575a:	d50e      	bpl.n	800577a <__cvt+0x82>
 800575c:	eb00 0906 	add.w	r9, r0, r6
 8005760:	2200      	movs	r2, #0
 8005762:	2300      	movs	r3, #0
 8005764:	4620      	mov	r0, r4
 8005766:	4629      	mov	r1, r5
 8005768:	f7fb f91e 	bl	80009a8 <__aeabi_dcmpeq>
 800576c:	b108      	cbz	r0, 8005772 <__cvt+0x7a>
 800576e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005772:	2230      	movs	r2, #48	@ 0x30
 8005774:	9b07      	ldr	r3, [sp, #28]
 8005776:	454b      	cmp	r3, r9
 8005778:	d31e      	bcc.n	80057b8 <__cvt+0xc0>
 800577a:	4638      	mov	r0, r7
 800577c:	9b07      	ldr	r3, [sp, #28]
 800577e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005780:	1bdb      	subs	r3, r3, r7
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	b008      	add	sp, #32
 8005786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800578e:	eb00 0906 	add.w	r9, r0, r6
 8005792:	d1e5      	bne.n	8005760 <__cvt+0x68>
 8005794:	7803      	ldrb	r3, [r0, #0]
 8005796:	2b30      	cmp	r3, #48	@ 0x30
 8005798:	d10a      	bne.n	80057b0 <__cvt+0xb8>
 800579a:	2200      	movs	r2, #0
 800579c:	2300      	movs	r3, #0
 800579e:	4620      	mov	r0, r4
 80057a0:	4629      	mov	r1, r5
 80057a2:	f7fb f901 	bl	80009a8 <__aeabi_dcmpeq>
 80057a6:	b918      	cbnz	r0, 80057b0 <__cvt+0xb8>
 80057a8:	f1c6 0601 	rsb	r6, r6, #1
 80057ac:	f8ca 6000 	str.w	r6, [sl]
 80057b0:	f8da 3000 	ldr.w	r3, [sl]
 80057b4:	4499      	add	r9, r3
 80057b6:	e7d3      	b.n	8005760 <__cvt+0x68>
 80057b8:	1c59      	adds	r1, r3, #1
 80057ba:	9107      	str	r1, [sp, #28]
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	e7d9      	b.n	8005774 <__cvt+0x7c>

080057c0 <__exponent>:
 80057c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057c2:	2900      	cmp	r1, #0
 80057c4:	bfb6      	itet	lt
 80057c6:	232d      	movlt	r3, #45	@ 0x2d
 80057c8:	232b      	movge	r3, #43	@ 0x2b
 80057ca:	4249      	neglt	r1, r1
 80057cc:	2909      	cmp	r1, #9
 80057ce:	7002      	strb	r2, [r0, #0]
 80057d0:	7043      	strb	r3, [r0, #1]
 80057d2:	dd29      	ble.n	8005828 <__exponent+0x68>
 80057d4:	f10d 0307 	add.w	r3, sp, #7
 80057d8:	461d      	mov	r5, r3
 80057da:	270a      	movs	r7, #10
 80057dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80057e0:	461a      	mov	r2, r3
 80057e2:	fb07 1416 	mls	r4, r7, r6, r1
 80057e6:	3430      	adds	r4, #48	@ 0x30
 80057e8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80057ec:	460c      	mov	r4, r1
 80057ee:	2c63      	cmp	r4, #99	@ 0x63
 80057f0:	4631      	mov	r1, r6
 80057f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80057f6:	dcf1      	bgt.n	80057dc <__exponent+0x1c>
 80057f8:	3130      	adds	r1, #48	@ 0x30
 80057fa:	1e94      	subs	r4, r2, #2
 80057fc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005800:	4623      	mov	r3, r4
 8005802:	1c41      	adds	r1, r0, #1
 8005804:	42ab      	cmp	r3, r5
 8005806:	d30a      	bcc.n	800581e <__exponent+0x5e>
 8005808:	f10d 0309 	add.w	r3, sp, #9
 800580c:	1a9b      	subs	r3, r3, r2
 800580e:	42ac      	cmp	r4, r5
 8005810:	bf88      	it	hi
 8005812:	2300      	movhi	r3, #0
 8005814:	3302      	adds	r3, #2
 8005816:	4403      	add	r3, r0
 8005818:	1a18      	subs	r0, r3, r0
 800581a:	b003      	add	sp, #12
 800581c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800581e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005822:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005826:	e7ed      	b.n	8005804 <__exponent+0x44>
 8005828:	2330      	movs	r3, #48	@ 0x30
 800582a:	3130      	adds	r1, #48	@ 0x30
 800582c:	7083      	strb	r3, [r0, #2]
 800582e:	70c1      	strb	r1, [r0, #3]
 8005830:	1d03      	adds	r3, r0, #4
 8005832:	e7f1      	b.n	8005818 <__exponent+0x58>

08005834 <_printf_float>:
 8005834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005838:	b091      	sub	sp, #68	@ 0x44
 800583a:	460c      	mov	r4, r1
 800583c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005840:	4616      	mov	r6, r2
 8005842:	461f      	mov	r7, r3
 8005844:	4605      	mov	r5, r0
 8005846:	f000 fce1 	bl	800620c <_localeconv_r>
 800584a:	6803      	ldr	r3, [r0, #0]
 800584c:	4618      	mov	r0, r3
 800584e:	9308      	str	r3, [sp, #32]
 8005850:	f7fa fc7e 	bl	8000150 <strlen>
 8005854:	2300      	movs	r3, #0
 8005856:	930e      	str	r3, [sp, #56]	@ 0x38
 8005858:	f8d8 3000 	ldr.w	r3, [r8]
 800585c:	9009      	str	r0, [sp, #36]	@ 0x24
 800585e:	3307      	adds	r3, #7
 8005860:	f023 0307 	bic.w	r3, r3, #7
 8005864:	f103 0208 	add.w	r2, r3, #8
 8005868:	f894 a018 	ldrb.w	sl, [r4, #24]
 800586c:	f8d4 b000 	ldr.w	fp, [r4]
 8005870:	f8c8 2000 	str.w	r2, [r8]
 8005874:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005878:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800587c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800587e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005882:	f04f 32ff 	mov.w	r2, #4294967295
 8005886:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800588a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800588e:	4b9c      	ldr	r3, [pc, #624]	@ (8005b00 <_printf_float+0x2cc>)
 8005890:	f7fb f8bc 	bl	8000a0c <__aeabi_dcmpun>
 8005894:	bb70      	cbnz	r0, 80058f4 <_printf_float+0xc0>
 8005896:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800589a:	f04f 32ff 	mov.w	r2, #4294967295
 800589e:	4b98      	ldr	r3, [pc, #608]	@ (8005b00 <_printf_float+0x2cc>)
 80058a0:	f7fb f896 	bl	80009d0 <__aeabi_dcmple>
 80058a4:	bb30      	cbnz	r0, 80058f4 <_printf_float+0xc0>
 80058a6:	2200      	movs	r2, #0
 80058a8:	2300      	movs	r3, #0
 80058aa:	4640      	mov	r0, r8
 80058ac:	4649      	mov	r1, r9
 80058ae:	f7fb f885 	bl	80009bc <__aeabi_dcmplt>
 80058b2:	b110      	cbz	r0, 80058ba <_printf_float+0x86>
 80058b4:	232d      	movs	r3, #45	@ 0x2d
 80058b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058ba:	4a92      	ldr	r2, [pc, #584]	@ (8005b04 <_printf_float+0x2d0>)
 80058bc:	4b92      	ldr	r3, [pc, #584]	@ (8005b08 <_printf_float+0x2d4>)
 80058be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80058c2:	bf94      	ite	ls
 80058c4:	4690      	movls	r8, r2
 80058c6:	4698      	movhi	r8, r3
 80058c8:	2303      	movs	r3, #3
 80058ca:	f04f 0900 	mov.w	r9, #0
 80058ce:	6123      	str	r3, [r4, #16]
 80058d0:	f02b 0304 	bic.w	r3, fp, #4
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	4633      	mov	r3, r6
 80058d8:	4621      	mov	r1, r4
 80058da:	4628      	mov	r0, r5
 80058dc:	9700      	str	r7, [sp, #0]
 80058de:	aa0f      	add	r2, sp, #60	@ 0x3c
 80058e0:	f000 f9d4 	bl	8005c8c <_printf_common>
 80058e4:	3001      	adds	r0, #1
 80058e6:	f040 8090 	bne.w	8005a0a <_printf_float+0x1d6>
 80058ea:	f04f 30ff 	mov.w	r0, #4294967295
 80058ee:	b011      	add	sp, #68	@ 0x44
 80058f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058f4:	4642      	mov	r2, r8
 80058f6:	464b      	mov	r3, r9
 80058f8:	4640      	mov	r0, r8
 80058fa:	4649      	mov	r1, r9
 80058fc:	f7fb f886 	bl	8000a0c <__aeabi_dcmpun>
 8005900:	b148      	cbz	r0, 8005916 <_printf_float+0xe2>
 8005902:	464b      	mov	r3, r9
 8005904:	2b00      	cmp	r3, #0
 8005906:	bfb8      	it	lt
 8005908:	232d      	movlt	r3, #45	@ 0x2d
 800590a:	4a80      	ldr	r2, [pc, #512]	@ (8005b0c <_printf_float+0x2d8>)
 800590c:	bfb8      	it	lt
 800590e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005912:	4b7f      	ldr	r3, [pc, #508]	@ (8005b10 <_printf_float+0x2dc>)
 8005914:	e7d3      	b.n	80058be <_printf_float+0x8a>
 8005916:	6863      	ldr	r3, [r4, #4]
 8005918:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	d13f      	bne.n	80059a0 <_printf_float+0x16c>
 8005920:	2306      	movs	r3, #6
 8005922:	6063      	str	r3, [r4, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800592a:	6023      	str	r3, [r4, #0]
 800592c:	9206      	str	r2, [sp, #24]
 800592e:	aa0e      	add	r2, sp, #56	@ 0x38
 8005930:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005934:	aa0d      	add	r2, sp, #52	@ 0x34
 8005936:	9203      	str	r2, [sp, #12]
 8005938:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800593c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005940:	6863      	ldr	r3, [r4, #4]
 8005942:	4642      	mov	r2, r8
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	4628      	mov	r0, r5
 8005948:	464b      	mov	r3, r9
 800594a:	910a      	str	r1, [sp, #40]	@ 0x28
 800594c:	f7ff fed4 	bl	80056f8 <__cvt>
 8005950:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005952:	4680      	mov	r8, r0
 8005954:	2947      	cmp	r1, #71	@ 0x47
 8005956:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005958:	d128      	bne.n	80059ac <_printf_float+0x178>
 800595a:	1cc8      	adds	r0, r1, #3
 800595c:	db02      	blt.n	8005964 <_printf_float+0x130>
 800595e:	6863      	ldr	r3, [r4, #4]
 8005960:	4299      	cmp	r1, r3
 8005962:	dd40      	ble.n	80059e6 <_printf_float+0x1b2>
 8005964:	f1aa 0a02 	sub.w	sl, sl, #2
 8005968:	fa5f fa8a 	uxtb.w	sl, sl
 800596c:	4652      	mov	r2, sl
 800596e:	3901      	subs	r1, #1
 8005970:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005974:	910d      	str	r1, [sp, #52]	@ 0x34
 8005976:	f7ff ff23 	bl	80057c0 <__exponent>
 800597a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800597c:	4681      	mov	r9, r0
 800597e:	1813      	adds	r3, r2, r0
 8005980:	2a01      	cmp	r2, #1
 8005982:	6123      	str	r3, [r4, #16]
 8005984:	dc02      	bgt.n	800598c <_printf_float+0x158>
 8005986:	6822      	ldr	r2, [r4, #0]
 8005988:	07d2      	lsls	r2, r2, #31
 800598a:	d501      	bpl.n	8005990 <_printf_float+0x15c>
 800598c:	3301      	adds	r3, #1
 800598e:	6123      	str	r3, [r4, #16]
 8005990:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005994:	2b00      	cmp	r3, #0
 8005996:	d09e      	beq.n	80058d6 <_printf_float+0xa2>
 8005998:	232d      	movs	r3, #45	@ 0x2d
 800599a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800599e:	e79a      	b.n	80058d6 <_printf_float+0xa2>
 80059a0:	2947      	cmp	r1, #71	@ 0x47
 80059a2:	d1bf      	bne.n	8005924 <_printf_float+0xf0>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1bd      	bne.n	8005924 <_printf_float+0xf0>
 80059a8:	2301      	movs	r3, #1
 80059aa:	e7ba      	b.n	8005922 <_printf_float+0xee>
 80059ac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059b0:	d9dc      	bls.n	800596c <_printf_float+0x138>
 80059b2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80059b6:	d118      	bne.n	80059ea <_printf_float+0x1b6>
 80059b8:	2900      	cmp	r1, #0
 80059ba:	6863      	ldr	r3, [r4, #4]
 80059bc:	dd0b      	ble.n	80059d6 <_printf_float+0x1a2>
 80059be:	6121      	str	r1, [r4, #16]
 80059c0:	b913      	cbnz	r3, 80059c8 <_printf_float+0x194>
 80059c2:	6822      	ldr	r2, [r4, #0]
 80059c4:	07d0      	lsls	r0, r2, #31
 80059c6:	d502      	bpl.n	80059ce <_printf_float+0x19a>
 80059c8:	3301      	adds	r3, #1
 80059ca:	440b      	add	r3, r1
 80059cc:	6123      	str	r3, [r4, #16]
 80059ce:	f04f 0900 	mov.w	r9, #0
 80059d2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80059d4:	e7dc      	b.n	8005990 <_printf_float+0x15c>
 80059d6:	b913      	cbnz	r3, 80059de <_printf_float+0x1aa>
 80059d8:	6822      	ldr	r2, [r4, #0]
 80059da:	07d2      	lsls	r2, r2, #31
 80059dc:	d501      	bpl.n	80059e2 <_printf_float+0x1ae>
 80059de:	3302      	adds	r3, #2
 80059e0:	e7f4      	b.n	80059cc <_printf_float+0x198>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e7f2      	b.n	80059cc <_printf_float+0x198>
 80059e6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80059ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059ec:	4299      	cmp	r1, r3
 80059ee:	db05      	blt.n	80059fc <_printf_float+0x1c8>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	6121      	str	r1, [r4, #16]
 80059f4:	07d8      	lsls	r0, r3, #31
 80059f6:	d5ea      	bpl.n	80059ce <_printf_float+0x19a>
 80059f8:	1c4b      	adds	r3, r1, #1
 80059fa:	e7e7      	b.n	80059cc <_printf_float+0x198>
 80059fc:	2900      	cmp	r1, #0
 80059fe:	bfcc      	ite	gt
 8005a00:	2201      	movgt	r2, #1
 8005a02:	f1c1 0202 	rsble	r2, r1, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	e7e0      	b.n	80059cc <_printf_float+0x198>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	055a      	lsls	r2, r3, #21
 8005a0e:	d407      	bmi.n	8005a20 <_printf_float+0x1ec>
 8005a10:	6923      	ldr	r3, [r4, #16]
 8005a12:	4642      	mov	r2, r8
 8005a14:	4631      	mov	r1, r6
 8005a16:	4628      	mov	r0, r5
 8005a18:	47b8      	blx	r7
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	d12b      	bne.n	8005a76 <_printf_float+0x242>
 8005a1e:	e764      	b.n	80058ea <_printf_float+0xb6>
 8005a20:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a24:	f240 80dc 	bls.w	8005be0 <_printf_float+0x3ac>
 8005a28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f7fa ffba 	bl	80009a8 <__aeabi_dcmpeq>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d033      	beq.n	8005aa0 <_printf_float+0x26c>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	4a35      	ldr	r2, [pc, #212]	@ (8005b14 <_printf_float+0x2e0>)
 8005a40:	47b8      	blx	r7
 8005a42:	3001      	adds	r0, #1
 8005a44:	f43f af51 	beq.w	80058ea <_printf_float+0xb6>
 8005a48:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005a4c:	4543      	cmp	r3, r8
 8005a4e:	db02      	blt.n	8005a56 <_printf_float+0x222>
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	07d8      	lsls	r0, r3, #31
 8005a54:	d50f      	bpl.n	8005a76 <_printf_float+0x242>
 8005a56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a5a:	4631      	mov	r1, r6
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	47b8      	blx	r7
 8005a60:	3001      	adds	r0, #1
 8005a62:	f43f af42 	beq.w	80058ea <_printf_float+0xb6>
 8005a66:	f04f 0900 	mov.w	r9, #0
 8005a6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a6e:	f104 0a1a 	add.w	sl, r4, #26
 8005a72:	45c8      	cmp	r8, r9
 8005a74:	dc09      	bgt.n	8005a8a <_printf_float+0x256>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	079b      	lsls	r3, r3, #30
 8005a7a:	f100 8102 	bmi.w	8005c82 <_printf_float+0x44e>
 8005a7e:	68e0      	ldr	r0, [r4, #12]
 8005a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a82:	4298      	cmp	r0, r3
 8005a84:	bfb8      	it	lt
 8005a86:	4618      	movlt	r0, r3
 8005a88:	e731      	b.n	80058ee <_printf_float+0xba>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4652      	mov	r2, sl
 8005a8e:	4631      	mov	r1, r6
 8005a90:	4628      	mov	r0, r5
 8005a92:	47b8      	blx	r7
 8005a94:	3001      	adds	r0, #1
 8005a96:	f43f af28 	beq.w	80058ea <_printf_float+0xb6>
 8005a9a:	f109 0901 	add.w	r9, r9, #1
 8005a9e:	e7e8      	b.n	8005a72 <_printf_float+0x23e>
 8005aa0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	dc38      	bgt.n	8005b18 <_printf_float+0x2e4>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	4628      	mov	r0, r5
 8005aac:	4a19      	ldr	r2, [pc, #100]	@ (8005b14 <_printf_float+0x2e0>)
 8005aae:	47b8      	blx	r7
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	f43f af1a 	beq.w	80058ea <_printf_float+0xb6>
 8005ab6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005aba:	ea59 0303 	orrs.w	r3, r9, r3
 8005abe:	d102      	bne.n	8005ac6 <_printf_float+0x292>
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	07d9      	lsls	r1, r3, #31
 8005ac4:	d5d7      	bpl.n	8005a76 <_printf_float+0x242>
 8005ac6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005aca:	4631      	mov	r1, r6
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b8      	blx	r7
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	f43f af0a 	beq.w	80058ea <_printf_float+0xb6>
 8005ad6:	f04f 0a00 	mov.w	sl, #0
 8005ada:	f104 0b1a 	add.w	fp, r4, #26
 8005ade:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ae0:	425b      	negs	r3, r3
 8005ae2:	4553      	cmp	r3, sl
 8005ae4:	dc01      	bgt.n	8005aea <_printf_float+0x2b6>
 8005ae6:	464b      	mov	r3, r9
 8005ae8:	e793      	b.n	8005a12 <_printf_float+0x1de>
 8005aea:	2301      	movs	r3, #1
 8005aec:	465a      	mov	r2, fp
 8005aee:	4631      	mov	r1, r6
 8005af0:	4628      	mov	r0, r5
 8005af2:	47b8      	blx	r7
 8005af4:	3001      	adds	r0, #1
 8005af6:	f43f aef8 	beq.w	80058ea <_printf_float+0xb6>
 8005afa:	f10a 0a01 	add.w	sl, sl, #1
 8005afe:	e7ee      	b.n	8005ade <_printf_float+0x2aa>
 8005b00:	7fefffff 	.word	0x7fefffff
 8005b04:	08008281 	.word	0x08008281
 8005b08:	08008285 	.word	0x08008285
 8005b0c:	08008289 	.word	0x08008289
 8005b10:	0800828d 	.word	0x0800828d
 8005b14:	08008291 	.word	0x08008291
 8005b18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b1a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005b1e:	4553      	cmp	r3, sl
 8005b20:	bfa8      	it	ge
 8005b22:	4653      	movge	r3, sl
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	4699      	mov	r9, r3
 8005b28:	dc36      	bgt.n	8005b98 <_printf_float+0x364>
 8005b2a:	f04f 0b00 	mov.w	fp, #0
 8005b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b32:	f104 021a 	add.w	r2, r4, #26
 8005b36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b38:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b3a:	eba3 0309 	sub.w	r3, r3, r9
 8005b3e:	455b      	cmp	r3, fp
 8005b40:	dc31      	bgt.n	8005ba6 <_printf_float+0x372>
 8005b42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b44:	459a      	cmp	sl, r3
 8005b46:	dc3a      	bgt.n	8005bbe <_printf_float+0x38a>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	07da      	lsls	r2, r3, #31
 8005b4c:	d437      	bmi.n	8005bbe <_printf_float+0x38a>
 8005b4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b50:	ebaa 0903 	sub.w	r9, sl, r3
 8005b54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b56:	ebaa 0303 	sub.w	r3, sl, r3
 8005b5a:	4599      	cmp	r9, r3
 8005b5c:	bfa8      	it	ge
 8005b5e:	4699      	movge	r9, r3
 8005b60:	f1b9 0f00 	cmp.w	r9, #0
 8005b64:	dc33      	bgt.n	8005bce <_printf_float+0x39a>
 8005b66:	f04f 0800 	mov.w	r8, #0
 8005b6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b6e:	f104 0b1a 	add.w	fp, r4, #26
 8005b72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b74:	ebaa 0303 	sub.w	r3, sl, r3
 8005b78:	eba3 0309 	sub.w	r3, r3, r9
 8005b7c:	4543      	cmp	r3, r8
 8005b7e:	f77f af7a 	ble.w	8005a76 <_printf_float+0x242>
 8005b82:	2301      	movs	r3, #1
 8005b84:	465a      	mov	r2, fp
 8005b86:	4631      	mov	r1, r6
 8005b88:	4628      	mov	r0, r5
 8005b8a:	47b8      	blx	r7
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	f43f aeac 	beq.w	80058ea <_printf_float+0xb6>
 8005b92:	f108 0801 	add.w	r8, r8, #1
 8005b96:	e7ec      	b.n	8005b72 <_printf_float+0x33e>
 8005b98:	4642      	mov	r2, r8
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	47b8      	blx	r7
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d1c2      	bne.n	8005b2a <_printf_float+0x2f6>
 8005ba4:	e6a1      	b.n	80058ea <_printf_float+0xb6>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4628      	mov	r0, r5
 8005bac:	920a      	str	r2, [sp, #40]	@ 0x28
 8005bae:	47b8      	blx	r7
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	f43f ae9a 	beq.w	80058ea <_printf_float+0xb6>
 8005bb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005bb8:	f10b 0b01 	add.w	fp, fp, #1
 8005bbc:	e7bb      	b.n	8005b36 <_printf_float+0x302>
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	47b8      	blx	r7
 8005bc8:	3001      	adds	r0, #1
 8005bca:	d1c0      	bne.n	8005b4e <_printf_float+0x31a>
 8005bcc:	e68d      	b.n	80058ea <_printf_float+0xb6>
 8005bce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005bd0:	464b      	mov	r3, r9
 8005bd2:	4631      	mov	r1, r6
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	4442      	add	r2, r8
 8005bd8:	47b8      	blx	r7
 8005bda:	3001      	adds	r0, #1
 8005bdc:	d1c3      	bne.n	8005b66 <_printf_float+0x332>
 8005bde:	e684      	b.n	80058ea <_printf_float+0xb6>
 8005be0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005be4:	f1ba 0f01 	cmp.w	sl, #1
 8005be8:	dc01      	bgt.n	8005bee <_printf_float+0x3ba>
 8005bea:	07db      	lsls	r3, r3, #31
 8005bec:	d536      	bpl.n	8005c5c <_printf_float+0x428>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	47b8      	blx	r7
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	f43f ae76 	beq.w	80058ea <_printf_float+0xb6>
 8005bfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c02:	4631      	mov	r1, r6
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b8      	blx	r7
 8005c08:	3001      	adds	r0, #1
 8005c0a:	f43f ae6e 	beq.w	80058ea <_printf_float+0xb6>
 8005c0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c12:	2200      	movs	r2, #0
 8005c14:	2300      	movs	r3, #0
 8005c16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c1a:	f7fa fec5 	bl	80009a8 <__aeabi_dcmpeq>
 8005c1e:	b9c0      	cbnz	r0, 8005c52 <_printf_float+0x41e>
 8005c20:	4653      	mov	r3, sl
 8005c22:	f108 0201 	add.w	r2, r8, #1
 8005c26:	4631      	mov	r1, r6
 8005c28:	4628      	mov	r0, r5
 8005c2a:	47b8      	blx	r7
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	d10c      	bne.n	8005c4a <_printf_float+0x416>
 8005c30:	e65b      	b.n	80058ea <_printf_float+0xb6>
 8005c32:	2301      	movs	r3, #1
 8005c34:	465a      	mov	r2, fp
 8005c36:	4631      	mov	r1, r6
 8005c38:	4628      	mov	r0, r5
 8005c3a:	47b8      	blx	r7
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	f43f ae54 	beq.w	80058ea <_printf_float+0xb6>
 8005c42:	f108 0801 	add.w	r8, r8, #1
 8005c46:	45d0      	cmp	r8, sl
 8005c48:	dbf3      	blt.n	8005c32 <_printf_float+0x3fe>
 8005c4a:	464b      	mov	r3, r9
 8005c4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c50:	e6e0      	b.n	8005a14 <_printf_float+0x1e0>
 8005c52:	f04f 0800 	mov.w	r8, #0
 8005c56:	f104 0b1a 	add.w	fp, r4, #26
 8005c5a:	e7f4      	b.n	8005c46 <_printf_float+0x412>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	4642      	mov	r2, r8
 8005c60:	e7e1      	b.n	8005c26 <_printf_float+0x3f2>
 8005c62:	2301      	movs	r3, #1
 8005c64:	464a      	mov	r2, r9
 8005c66:	4631      	mov	r1, r6
 8005c68:	4628      	mov	r0, r5
 8005c6a:	47b8      	blx	r7
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f43f ae3c 	beq.w	80058ea <_printf_float+0xb6>
 8005c72:	f108 0801 	add.w	r8, r8, #1
 8005c76:	68e3      	ldr	r3, [r4, #12]
 8005c78:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005c7a:	1a5b      	subs	r3, r3, r1
 8005c7c:	4543      	cmp	r3, r8
 8005c7e:	dcf0      	bgt.n	8005c62 <_printf_float+0x42e>
 8005c80:	e6fd      	b.n	8005a7e <_printf_float+0x24a>
 8005c82:	f04f 0800 	mov.w	r8, #0
 8005c86:	f104 0919 	add.w	r9, r4, #25
 8005c8a:	e7f4      	b.n	8005c76 <_printf_float+0x442>

08005c8c <_printf_common>:
 8005c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c90:	4616      	mov	r6, r2
 8005c92:	4698      	mov	r8, r3
 8005c94:	688a      	ldr	r2, [r1, #8]
 8005c96:	690b      	ldr	r3, [r1, #16]
 8005c98:	4607      	mov	r7, r0
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	bfb8      	it	lt
 8005c9e:	4613      	movlt	r3, r2
 8005ca0:	6033      	str	r3, [r6, #0]
 8005ca2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cac:	b10a      	cbz	r2, 8005cb2 <_printf_common+0x26>
 8005cae:	3301      	adds	r3, #1
 8005cb0:	6033      	str	r3, [r6, #0]
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	0699      	lsls	r1, r3, #26
 8005cb6:	bf42      	ittt	mi
 8005cb8:	6833      	ldrmi	r3, [r6, #0]
 8005cba:	3302      	addmi	r3, #2
 8005cbc:	6033      	strmi	r3, [r6, #0]
 8005cbe:	6825      	ldr	r5, [r4, #0]
 8005cc0:	f015 0506 	ands.w	r5, r5, #6
 8005cc4:	d106      	bne.n	8005cd4 <_printf_common+0x48>
 8005cc6:	f104 0a19 	add.w	sl, r4, #25
 8005cca:	68e3      	ldr	r3, [r4, #12]
 8005ccc:	6832      	ldr	r2, [r6, #0]
 8005cce:	1a9b      	subs	r3, r3, r2
 8005cd0:	42ab      	cmp	r3, r5
 8005cd2:	dc2b      	bgt.n	8005d2c <_printf_common+0xa0>
 8005cd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cd8:	6822      	ldr	r2, [r4, #0]
 8005cda:	3b00      	subs	r3, #0
 8005cdc:	bf18      	it	ne
 8005cde:	2301      	movne	r3, #1
 8005ce0:	0692      	lsls	r2, r2, #26
 8005ce2:	d430      	bmi.n	8005d46 <_printf_common+0xba>
 8005ce4:	4641      	mov	r1, r8
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cec:	47c8      	blx	r9
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d023      	beq.n	8005d3a <_printf_common+0xae>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	6922      	ldr	r2, [r4, #16]
 8005cf6:	f003 0306 	and.w	r3, r3, #6
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	bf14      	ite	ne
 8005cfe:	2500      	movne	r5, #0
 8005d00:	6833      	ldreq	r3, [r6, #0]
 8005d02:	f04f 0600 	mov.w	r6, #0
 8005d06:	bf08      	it	eq
 8005d08:	68e5      	ldreq	r5, [r4, #12]
 8005d0a:	f104 041a 	add.w	r4, r4, #26
 8005d0e:	bf08      	it	eq
 8005d10:	1aed      	subeq	r5, r5, r3
 8005d12:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d16:	bf08      	it	eq
 8005d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	bfc4      	itt	gt
 8005d20:	1a9b      	subgt	r3, r3, r2
 8005d22:	18ed      	addgt	r5, r5, r3
 8005d24:	42b5      	cmp	r5, r6
 8005d26:	d11a      	bne.n	8005d5e <_printf_common+0xd2>
 8005d28:	2000      	movs	r0, #0
 8005d2a:	e008      	b.n	8005d3e <_printf_common+0xb2>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	4652      	mov	r2, sl
 8005d30:	4641      	mov	r1, r8
 8005d32:	4638      	mov	r0, r7
 8005d34:	47c8      	blx	r9
 8005d36:	3001      	adds	r0, #1
 8005d38:	d103      	bne.n	8005d42 <_printf_common+0xb6>
 8005d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d42:	3501      	adds	r5, #1
 8005d44:	e7c1      	b.n	8005cca <_printf_common+0x3e>
 8005d46:	2030      	movs	r0, #48	@ 0x30
 8005d48:	18e1      	adds	r1, r4, r3
 8005d4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d54:	4422      	add	r2, r4
 8005d56:	3302      	adds	r3, #2
 8005d58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d5c:	e7c2      	b.n	8005ce4 <_printf_common+0x58>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	4622      	mov	r2, r4
 8005d62:	4641      	mov	r1, r8
 8005d64:	4638      	mov	r0, r7
 8005d66:	47c8      	blx	r9
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d0e6      	beq.n	8005d3a <_printf_common+0xae>
 8005d6c:	3601      	adds	r6, #1
 8005d6e:	e7d9      	b.n	8005d24 <_printf_common+0x98>

08005d70 <_printf_i>:
 8005d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d74:	7e0f      	ldrb	r7, [r1, #24]
 8005d76:	4691      	mov	r9, r2
 8005d78:	2f78      	cmp	r7, #120	@ 0x78
 8005d7a:	4680      	mov	r8, r0
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	469a      	mov	sl, r3
 8005d80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d86:	d807      	bhi.n	8005d98 <_printf_i+0x28>
 8005d88:	2f62      	cmp	r7, #98	@ 0x62
 8005d8a:	d80a      	bhi.n	8005da2 <_printf_i+0x32>
 8005d8c:	2f00      	cmp	r7, #0
 8005d8e:	f000 80d3 	beq.w	8005f38 <_printf_i+0x1c8>
 8005d92:	2f58      	cmp	r7, #88	@ 0x58
 8005d94:	f000 80ba 	beq.w	8005f0c <_printf_i+0x19c>
 8005d98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005da0:	e03a      	b.n	8005e18 <_printf_i+0xa8>
 8005da2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005da6:	2b15      	cmp	r3, #21
 8005da8:	d8f6      	bhi.n	8005d98 <_printf_i+0x28>
 8005daa:	a101      	add	r1, pc, #4	@ (adr r1, 8005db0 <_printf_i+0x40>)
 8005dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005db0:	08005e09 	.word	0x08005e09
 8005db4:	08005e1d 	.word	0x08005e1d
 8005db8:	08005d99 	.word	0x08005d99
 8005dbc:	08005d99 	.word	0x08005d99
 8005dc0:	08005d99 	.word	0x08005d99
 8005dc4:	08005d99 	.word	0x08005d99
 8005dc8:	08005e1d 	.word	0x08005e1d
 8005dcc:	08005d99 	.word	0x08005d99
 8005dd0:	08005d99 	.word	0x08005d99
 8005dd4:	08005d99 	.word	0x08005d99
 8005dd8:	08005d99 	.word	0x08005d99
 8005ddc:	08005f1f 	.word	0x08005f1f
 8005de0:	08005e47 	.word	0x08005e47
 8005de4:	08005ed9 	.word	0x08005ed9
 8005de8:	08005d99 	.word	0x08005d99
 8005dec:	08005d99 	.word	0x08005d99
 8005df0:	08005f41 	.word	0x08005f41
 8005df4:	08005d99 	.word	0x08005d99
 8005df8:	08005e47 	.word	0x08005e47
 8005dfc:	08005d99 	.word	0x08005d99
 8005e00:	08005d99 	.word	0x08005d99
 8005e04:	08005ee1 	.word	0x08005ee1
 8005e08:	6833      	ldr	r3, [r6, #0]
 8005e0a:	1d1a      	adds	r2, r3, #4
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6032      	str	r2, [r6, #0]
 8005e10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e09e      	b.n	8005f5a <_printf_i+0x1ea>
 8005e1c:	6833      	ldr	r3, [r6, #0]
 8005e1e:	6820      	ldr	r0, [r4, #0]
 8005e20:	1d19      	adds	r1, r3, #4
 8005e22:	6031      	str	r1, [r6, #0]
 8005e24:	0606      	lsls	r6, r0, #24
 8005e26:	d501      	bpl.n	8005e2c <_printf_i+0xbc>
 8005e28:	681d      	ldr	r5, [r3, #0]
 8005e2a:	e003      	b.n	8005e34 <_printf_i+0xc4>
 8005e2c:	0645      	lsls	r5, r0, #25
 8005e2e:	d5fb      	bpl.n	8005e28 <_printf_i+0xb8>
 8005e30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e34:	2d00      	cmp	r5, #0
 8005e36:	da03      	bge.n	8005e40 <_printf_i+0xd0>
 8005e38:	232d      	movs	r3, #45	@ 0x2d
 8005e3a:	426d      	negs	r5, r5
 8005e3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e40:	230a      	movs	r3, #10
 8005e42:	4859      	ldr	r0, [pc, #356]	@ (8005fa8 <_printf_i+0x238>)
 8005e44:	e011      	b.n	8005e6a <_printf_i+0xfa>
 8005e46:	6821      	ldr	r1, [r4, #0]
 8005e48:	6833      	ldr	r3, [r6, #0]
 8005e4a:	0608      	lsls	r0, r1, #24
 8005e4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e50:	d402      	bmi.n	8005e58 <_printf_i+0xe8>
 8005e52:	0649      	lsls	r1, r1, #25
 8005e54:	bf48      	it	mi
 8005e56:	b2ad      	uxthmi	r5, r5
 8005e58:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e5a:	6033      	str	r3, [r6, #0]
 8005e5c:	bf14      	ite	ne
 8005e5e:	230a      	movne	r3, #10
 8005e60:	2308      	moveq	r3, #8
 8005e62:	4851      	ldr	r0, [pc, #324]	@ (8005fa8 <_printf_i+0x238>)
 8005e64:	2100      	movs	r1, #0
 8005e66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e6a:	6866      	ldr	r6, [r4, #4]
 8005e6c:	2e00      	cmp	r6, #0
 8005e6e:	bfa8      	it	ge
 8005e70:	6821      	ldrge	r1, [r4, #0]
 8005e72:	60a6      	str	r6, [r4, #8]
 8005e74:	bfa4      	itt	ge
 8005e76:	f021 0104 	bicge.w	r1, r1, #4
 8005e7a:	6021      	strge	r1, [r4, #0]
 8005e7c:	b90d      	cbnz	r5, 8005e82 <_printf_i+0x112>
 8005e7e:	2e00      	cmp	r6, #0
 8005e80:	d04b      	beq.n	8005f1a <_printf_i+0x1aa>
 8005e82:	4616      	mov	r6, r2
 8005e84:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e88:	fb03 5711 	mls	r7, r3, r1, r5
 8005e8c:	5dc7      	ldrb	r7, [r0, r7]
 8005e8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e92:	462f      	mov	r7, r5
 8005e94:	42bb      	cmp	r3, r7
 8005e96:	460d      	mov	r5, r1
 8005e98:	d9f4      	bls.n	8005e84 <_printf_i+0x114>
 8005e9a:	2b08      	cmp	r3, #8
 8005e9c:	d10b      	bne.n	8005eb6 <_printf_i+0x146>
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	07df      	lsls	r7, r3, #31
 8005ea2:	d508      	bpl.n	8005eb6 <_printf_i+0x146>
 8005ea4:	6923      	ldr	r3, [r4, #16]
 8005ea6:	6861      	ldr	r1, [r4, #4]
 8005ea8:	4299      	cmp	r1, r3
 8005eaa:	bfde      	ittt	le
 8005eac:	2330      	movle	r3, #48	@ 0x30
 8005eae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005eb2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005eb6:	1b92      	subs	r2, r2, r6
 8005eb8:	6122      	str	r2, [r4, #16]
 8005eba:	464b      	mov	r3, r9
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	f8cd a000 	str.w	sl, [sp]
 8005ec4:	aa03      	add	r2, sp, #12
 8005ec6:	f7ff fee1 	bl	8005c8c <_printf_common>
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d14a      	bne.n	8005f64 <_printf_i+0x1f4>
 8005ece:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed2:	b004      	add	sp, #16
 8005ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	f043 0320 	orr.w	r3, r3, #32
 8005ede:	6023      	str	r3, [r4, #0]
 8005ee0:	2778      	movs	r7, #120	@ 0x78
 8005ee2:	4832      	ldr	r0, [pc, #200]	@ (8005fac <_printf_i+0x23c>)
 8005ee4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	6831      	ldr	r1, [r6, #0]
 8005eec:	061f      	lsls	r7, r3, #24
 8005eee:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ef2:	d402      	bmi.n	8005efa <_printf_i+0x18a>
 8005ef4:	065f      	lsls	r7, r3, #25
 8005ef6:	bf48      	it	mi
 8005ef8:	b2ad      	uxthmi	r5, r5
 8005efa:	6031      	str	r1, [r6, #0]
 8005efc:	07d9      	lsls	r1, r3, #31
 8005efe:	bf44      	itt	mi
 8005f00:	f043 0320 	orrmi.w	r3, r3, #32
 8005f04:	6023      	strmi	r3, [r4, #0]
 8005f06:	b11d      	cbz	r5, 8005f10 <_printf_i+0x1a0>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	e7ab      	b.n	8005e64 <_printf_i+0xf4>
 8005f0c:	4826      	ldr	r0, [pc, #152]	@ (8005fa8 <_printf_i+0x238>)
 8005f0e:	e7e9      	b.n	8005ee4 <_printf_i+0x174>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	f023 0320 	bic.w	r3, r3, #32
 8005f16:	6023      	str	r3, [r4, #0]
 8005f18:	e7f6      	b.n	8005f08 <_printf_i+0x198>
 8005f1a:	4616      	mov	r6, r2
 8005f1c:	e7bd      	b.n	8005e9a <_printf_i+0x12a>
 8005f1e:	6833      	ldr	r3, [r6, #0]
 8005f20:	6825      	ldr	r5, [r4, #0]
 8005f22:	1d18      	adds	r0, r3, #4
 8005f24:	6961      	ldr	r1, [r4, #20]
 8005f26:	6030      	str	r0, [r6, #0]
 8005f28:	062e      	lsls	r6, r5, #24
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	d501      	bpl.n	8005f32 <_printf_i+0x1c2>
 8005f2e:	6019      	str	r1, [r3, #0]
 8005f30:	e002      	b.n	8005f38 <_printf_i+0x1c8>
 8005f32:	0668      	lsls	r0, r5, #25
 8005f34:	d5fb      	bpl.n	8005f2e <_printf_i+0x1be>
 8005f36:	8019      	strh	r1, [r3, #0]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4616      	mov	r6, r2
 8005f3c:	6123      	str	r3, [r4, #16]
 8005f3e:	e7bc      	b.n	8005eba <_printf_i+0x14a>
 8005f40:	6833      	ldr	r3, [r6, #0]
 8005f42:	2100      	movs	r1, #0
 8005f44:	1d1a      	adds	r2, r3, #4
 8005f46:	6032      	str	r2, [r6, #0]
 8005f48:	681e      	ldr	r6, [r3, #0]
 8005f4a:	6862      	ldr	r2, [r4, #4]
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	f000 f9d4 	bl	80062fa <memchr>
 8005f52:	b108      	cbz	r0, 8005f58 <_printf_i+0x1e8>
 8005f54:	1b80      	subs	r0, r0, r6
 8005f56:	6060      	str	r0, [r4, #4]
 8005f58:	6863      	ldr	r3, [r4, #4]
 8005f5a:	6123      	str	r3, [r4, #16]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f62:	e7aa      	b.n	8005eba <_printf_i+0x14a>
 8005f64:	4632      	mov	r2, r6
 8005f66:	4649      	mov	r1, r9
 8005f68:	4640      	mov	r0, r8
 8005f6a:	6923      	ldr	r3, [r4, #16]
 8005f6c:	47d0      	blx	sl
 8005f6e:	3001      	adds	r0, #1
 8005f70:	d0ad      	beq.n	8005ece <_printf_i+0x15e>
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	079b      	lsls	r3, r3, #30
 8005f76:	d413      	bmi.n	8005fa0 <_printf_i+0x230>
 8005f78:	68e0      	ldr	r0, [r4, #12]
 8005f7a:	9b03      	ldr	r3, [sp, #12]
 8005f7c:	4298      	cmp	r0, r3
 8005f7e:	bfb8      	it	lt
 8005f80:	4618      	movlt	r0, r3
 8005f82:	e7a6      	b.n	8005ed2 <_printf_i+0x162>
 8005f84:	2301      	movs	r3, #1
 8005f86:	4632      	mov	r2, r6
 8005f88:	4649      	mov	r1, r9
 8005f8a:	4640      	mov	r0, r8
 8005f8c:	47d0      	blx	sl
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d09d      	beq.n	8005ece <_printf_i+0x15e>
 8005f92:	3501      	adds	r5, #1
 8005f94:	68e3      	ldr	r3, [r4, #12]
 8005f96:	9903      	ldr	r1, [sp, #12]
 8005f98:	1a5b      	subs	r3, r3, r1
 8005f9a:	42ab      	cmp	r3, r5
 8005f9c:	dcf2      	bgt.n	8005f84 <_printf_i+0x214>
 8005f9e:	e7eb      	b.n	8005f78 <_printf_i+0x208>
 8005fa0:	2500      	movs	r5, #0
 8005fa2:	f104 0619 	add.w	r6, r4, #25
 8005fa6:	e7f5      	b.n	8005f94 <_printf_i+0x224>
 8005fa8:	08008293 	.word	0x08008293
 8005fac:	080082a4 	.word	0x080082a4

08005fb0 <std>:
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	b510      	push	{r4, lr}
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	e9c0 3300 	strd	r3, r3, [r0]
 8005fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fbe:	6083      	str	r3, [r0, #8]
 8005fc0:	8181      	strh	r1, [r0, #12]
 8005fc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005fc4:	81c2      	strh	r2, [r0, #14]
 8005fc6:	6183      	str	r3, [r0, #24]
 8005fc8:	4619      	mov	r1, r3
 8005fca:	2208      	movs	r2, #8
 8005fcc:	305c      	adds	r0, #92	@ 0x5c
 8005fce:	f000 f906 	bl	80061de <memset>
 8005fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006008 <std+0x58>)
 8005fd4:	6224      	str	r4, [r4, #32]
 8005fd6:	6263      	str	r3, [r4, #36]	@ 0x24
 8005fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800600c <std+0x5c>)
 8005fda:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8006010 <std+0x60>)
 8005fde:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8006014 <std+0x64>)
 8005fe2:	6323      	str	r3, [r4, #48]	@ 0x30
 8005fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8006018 <std+0x68>)
 8005fe6:	429c      	cmp	r4, r3
 8005fe8:	d006      	beq.n	8005ff8 <std+0x48>
 8005fea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005fee:	4294      	cmp	r4, r2
 8005ff0:	d002      	beq.n	8005ff8 <std+0x48>
 8005ff2:	33d0      	adds	r3, #208	@ 0xd0
 8005ff4:	429c      	cmp	r4, r3
 8005ff6:	d105      	bne.n	8006004 <std+0x54>
 8005ff8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006000:	f000 b978 	b.w	80062f4 <__retarget_lock_init_recursive>
 8006004:	bd10      	pop	{r4, pc}
 8006006:	bf00      	nop
 8006008:	08006159 	.word	0x08006159
 800600c:	0800617b 	.word	0x0800617b
 8006010:	080061b3 	.word	0x080061b3
 8006014:	080061d7 	.word	0x080061d7
 8006018:	20000938 	.word	0x20000938

0800601c <stdio_exit_handler>:
 800601c:	4a02      	ldr	r2, [pc, #8]	@ (8006028 <stdio_exit_handler+0xc>)
 800601e:	4903      	ldr	r1, [pc, #12]	@ (800602c <stdio_exit_handler+0x10>)
 8006020:	4803      	ldr	r0, [pc, #12]	@ (8006030 <stdio_exit_handler+0x14>)
 8006022:	f000 b87b 	b.w	800611c <_fwalk_sglue>
 8006026:	bf00      	nop
 8006028:	200000d8 	.word	0x200000d8
 800602c:	08007c45 	.word	0x08007c45
 8006030:	200000e8 	.word	0x200000e8

08006034 <cleanup_stdio>:
 8006034:	6841      	ldr	r1, [r0, #4]
 8006036:	4b0c      	ldr	r3, [pc, #48]	@ (8006068 <cleanup_stdio+0x34>)
 8006038:	b510      	push	{r4, lr}
 800603a:	4299      	cmp	r1, r3
 800603c:	4604      	mov	r4, r0
 800603e:	d001      	beq.n	8006044 <cleanup_stdio+0x10>
 8006040:	f001 fe00 	bl	8007c44 <_fflush_r>
 8006044:	68a1      	ldr	r1, [r4, #8]
 8006046:	4b09      	ldr	r3, [pc, #36]	@ (800606c <cleanup_stdio+0x38>)
 8006048:	4299      	cmp	r1, r3
 800604a:	d002      	beq.n	8006052 <cleanup_stdio+0x1e>
 800604c:	4620      	mov	r0, r4
 800604e:	f001 fdf9 	bl	8007c44 <_fflush_r>
 8006052:	68e1      	ldr	r1, [r4, #12]
 8006054:	4b06      	ldr	r3, [pc, #24]	@ (8006070 <cleanup_stdio+0x3c>)
 8006056:	4299      	cmp	r1, r3
 8006058:	d004      	beq.n	8006064 <cleanup_stdio+0x30>
 800605a:	4620      	mov	r0, r4
 800605c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006060:	f001 bdf0 	b.w	8007c44 <_fflush_r>
 8006064:	bd10      	pop	{r4, pc}
 8006066:	bf00      	nop
 8006068:	20000938 	.word	0x20000938
 800606c:	200009a0 	.word	0x200009a0
 8006070:	20000a08 	.word	0x20000a08

08006074 <global_stdio_init.part.0>:
 8006074:	b510      	push	{r4, lr}
 8006076:	4b0b      	ldr	r3, [pc, #44]	@ (80060a4 <global_stdio_init.part.0+0x30>)
 8006078:	4c0b      	ldr	r4, [pc, #44]	@ (80060a8 <global_stdio_init.part.0+0x34>)
 800607a:	4a0c      	ldr	r2, [pc, #48]	@ (80060ac <global_stdio_init.part.0+0x38>)
 800607c:	4620      	mov	r0, r4
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	2104      	movs	r1, #4
 8006082:	2200      	movs	r2, #0
 8006084:	f7ff ff94 	bl	8005fb0 <std>
 8006088:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800608c:	2201      	movs	r2, #1
 800608e:	2109      	movs	r1, #9
 8006090:	f7ff ff8e 	bl	8005fb0 <std>
 8006094:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006098:	2202      	movs	r2, #2
 800609a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800609e:	2112      	movs	r1, #18
 80060a0:	f7ff bf86 	b.w	8005fb0 <std>
 80060a4:	20000a70 	.word	0x20000a70
 80060a8:	20000938 	.word	0x20000938
 80060ac:	0800601d 	.word	0x0800601d

080060b0 <__sfp_lock_acquire>:
 80060b0:	4801      	ldr	r0, [pc, #4]	@ (80060b8 <__sfp_lock_acquire+0x8>)
 80060b2:	f000 b920 	b.w	80062f6 <__retarget_lock_acquire_recursive>
 80060b6:	bf00      	nop
 80060b8:	20000a79 	.word	0x20000a79

080060bc <__sfp_lock_release>:
 80060bc:	4801      	ldr	r0, [pc, #4]	@ (80060c4 <__sfp_lock_release+0x8>)
 80060be:	f000 b91b 	b.w	80062f8 <__retarget_lock_release_recursive>
 80060c2:	bf00      	nop
 80060c4:	20000a79 	.word	0x20000a79

080060c8 <__sinit>:
 80060c8:	b510      	push	{r4, lr}
 80060ca:	4604      	mov	r4, r0
 80060cc:	f7ff fff0 	bl	80060b0 <__sfp_lock_acquire>
 80060d0:	6a23      	ldr	r3, [r4, #32]
 80060d2:	b11b      	cbz	r3, 80060dc <__sinit+0x14>
 80060d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d8:	f7ff bff0 	b.w	80060bc <__sfp_lock_release>
 80060dc:	4b04      	ldr	r3, [pc, #16]	@ (80060f0 <__sinit+0x28>)
 80060de:	6223      	str	r3, [r4, #32]
 80060e0:	4b04      	ldr	r3, [pc, #16]	@ (80060f4 <__sinit+0x2c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1f5      	bne.n	80060d4 <__sinit+0xc>
 80060e8:	f7ff ffc4 	bl	8006074 <global_stdio_init.part.0>
 80060ec:	e7f2      	b.n	80060d4 <__sinit+0xc>
 80060ee:	bf00      	nop
 80060f0:	08006035 	.word	0x08006035
 80060f4:	20000a70 	.word	0x20000a70

080060f8 <fiprintf>:
 80060f8:	b40e      	push	{r1, r2, r3}
 80060fa:	b503      	push	{r0, r1, lr}
 80060fc:	4601      	mov	r1, r0
 80060fe:	ab03      	add	r3, sp, #12
 8006100:	4805      	ldr	r0, [pc, #20]	@ (8006118 <fiprintf+0x20>)
 8006102:	f853 2b04 	ldr.w	r2, [r3], #4
 8006106:	6800      	ldr	r0, [r0, #0]
 8006108:	9301      	str	r3, [sp, #4]
 800610a:	f001 fc03 	bl	8007914 <_vfiprintf_r>
 800610e:	b002      	add	sp, #8
 8006110:	f85d eb04 	ldr.w	lr, [sp], #4
 8006114:	b003      	add	sp, #12
 8006116:	4770      	bx	lr
 8006118:	200000e4 	.word	0x200000e4

0800611c <_fwalk_sglue>:
 800611c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006120:	4607      	mov	r7, r0
 8006122:	4688      	mov	r8, r1
 8006124:	4614      	mov	r4, r2
 8006126:	2600      	movs	r6, #0
 8006128:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800612c:	f1b9 0901 	subs.w	r9, r9, #1
 8006130:	d505      	bpl.n	800613e <_fwalk_sglue+0x22>
 8006132:	6824      	ldr	r4, [r4, #0]
 8006134:	2c00      	cmp	r4, #0
 8006136:	d1f7      	bne.n	8006128 <_fwalk_sglue+0xc>
 8006138:	4630      	mov	r0, r6
 800613a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800613e:	89ab      	ldrh	r3, [r5, #12]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d907      	bls.n	8006154 <_fwalk_sglue+0x38>
 8006144:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006148:	3301      	adds	r3, #1
 800614a:	d003      	beq.n	8006154 <_fwalk_sglue+0x38>
 800614c:	4629      	mov	r1, r5
 800614e:	4638      	mov	r0, r7
 8006150:	47c0      	blx	r8
 8006152:	4306      	orrs	r6, r0
 8006154:	3568      	adds	r5, #104	@ 0x68
 8006156:	e7e9      	b.n	800612c <_fwalk_sglue+0x10>

08006158 <__sread>:
 8006158:	b510      	push	{r4, lr}
 800615a:	460c      	mov	r4, r1
 800615c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006160:	f000 f87a 	bl	8006258 <_read_r>
 8006164:	2800      	cmp	r0, #0
 8006166:	bfab      	itete	ge
 8006168:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800616a:	89a3      	ldrhlt	r3, [r4, #12]
 800616c:	181b      	addge	r3, r3, r0
 800616e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006172:	bfac      	ite	ge
 8006174:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006176:	81a3      	strhlt	r3, [r4, #12]
 8006178:	bd10      	pop	{r4, pc}

0800617a <__swrite>:
 800617a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800617e:	461f      	mov	r7, r3
 8006180:	898b      	ldrh	r3, [r1, #12]
 8006182:	4605      	mov	r5, r0
 8006184:	05db      	lsls	r3, r3, #23
 8006186:	460c      	mov	r4, r1
 8006188:	4616      	mov	r6, r2
 800618a:	d505      	bpl.n	8006198 <__swrite+0x1e>
 800618c:	2302      	movs	r3, #2
 800618e:	2200      	movs	r2, #0
 8006190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006194:	f000 f84e 	bl	8006234 <_lseek_r>
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	4632      	mov	r2, r6
 800619c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061a0:	81a3      	strh	r3, [r4, #12]
 80061a2:	4628      	mov	r0, r5
 80061a4:	463b      	mov	r3, r7
 80061a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061ae:	f000 b865 	b.w	800627c <_write_r>

080061b2 <__sseek>:
 80061b2:	b510      	push	{r4, lr}
 80061b4:	460c      	mov	r4, r1
 80061b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ba:	f000 f83b 	bl	8006234 <_lseek_r>
 80061be:	1c43      	adds	r3, r0, #1
 80061c0:	89a3      	ldrh	r3, [r4, #12]
 80061c2:	bf15      	itete	ne
 80061c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80061c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061ce:	81a3      	strheq	r3, [r4, #12]
 80061d0:	bf18      	it	ne
 80061d2:	81a3      	strhne	r3, [r4, #12]
 80061d4:	bd10      	pop	{r4, pc}

080061d6 <__sclose>:
 80061d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061da:	f000 b81b 	b.w	8006214 <_close_r>

080061de <memset>:
 80061de:	4603      	mov	r3, r0
 80061e0:	4402      	add	r2, r0
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d100      	bne.n	80061e8 <memset+0xa>
 80061e6:	4770      	bx	lr
 80061e8:	f803 1b01 	strb.w	r1, [r3], #1
 80061ec:	e7f9      	b.n	80061e2 <memset+0x4>

080061ee <strcat>:
 80061ee:	4602      	mov	r2, r0
 80061f0:	b510      	push	{r4, lr}
 80061f2:	7814      	ldrb	r4, [r2, #0]
 80061f4:	4613      	mov	r3, r2
 80061f6:	3201      	adds	r2, #1
 80061f8:	2c00      	cmp	r4, #0
 80061fa:	d1fa      	bne.n	80061f2 <strcat+0x4>
 80061fc:	3b01      	subs	r3, #1
 80061fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006202:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006206:	2a00      	cmp	r2, #0
 8006208:	d1f9      	bne.n	80061fe <strcat+0x10>
 800620a:	bd10      	pop	{r4, pc}

0800620c <_localeconv_r>:
 800620c:	4800      	ldr	r0, [pc, #0]	@ (8006210 <_localeconv_r+0x4>)
 800620e:	4770      	bx	lr
 8006210:	20000224 	.word	0x20000224

08006214 <_close_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	2300      	movs	r3, #0
 8006218:	4d05      	ldr	r5, [pc, #20]	@ (8006230 <_close_r+0x1c>)
 800621a:	4604      	mov	r4, r0
 800621c:	4608      	mov	r0, r1
 800621e:	602b      	str	r3, [r5, #0]
 8006220:	f7fc fb7f 	bl	8002922 <_close>
 8006224:	1c43      	adds	r3, r0, #1
 8006226:	d102      	bne.n	800622e <_close_r+0x1a>
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	b103      	cbz	r3, 800622e <_close_r+0x1a>
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	bd38      	pop	{r3, r4, r5, pc}
 8006230:	20000a74 	.word	0x20000a74

08006234 <_lseek_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	4604      	mov	r4, r0
 8006238:	4608      	mov	r0, r1
 800623a:	4611      	mov	r1, r2
 800623c:	2200      	movs	r2, #0
 800623e:	4d05      	ldr	r5, [pc, #20]	@ (8006254 <_lseek_r+0x20>)
 8006240:	602a      	str	r2, [r5, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	f7fc fb91 	bl	800296a <_lseek>
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	d102      	bne.n	8006252 <_lseek_r+0x1e>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	b103      	cbz	r3, 8006252 <_lseek_r+0x1e>
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	bd38      	pop	{r3, r4, r5, pc}
 8006254:	20000a74 	.word	0x20000a74

08006258 <_read_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4604      	mov	r4, r0
 800625c:	4608      	mov	r0, r1
 800625e:	4611      	mov	r1, r2
 8006260:	2200      	movs	r2, #0
 8006262:	4d05      	ldr	r5, [pc, #20]	@ (8006278 <_read_r+0x20>)
 8006264:	602a      	str	r2, [r5, #0]
 8006266:	461a      	mov	r2, r3
 8006268:	f7fc fb22 	bl	80028b0 <_read>
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	d102      	bne.n	8006276 <_read_r+0x1e>
 8006270:	682b      	ldr	r3, [r5, #0]
 8006272:	b103      	cbz	r3, 8006276 <_read_r+0x1e>
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	bd38      	pop	{r3, r4, r5, pc}
 8006278:	20000a74 	.word	0x20000a74

0800627c <_write_r>:
 800627c:	b538      	push	{r3, r4, r5, lr}
 800627e:	4604      	mov	r4, r0
 8006280:	4608      	mov	r0, r1
 8006282:	4611      	mov	r1, r2
 8006284:	2200      	movs	r2, #0
 8006286:	4d05      	ldr	r5, [pc, #20]	@ (800629c <_write_r+0x20>)
 8006288:	602a      	str	r2, [r5, #0]
 800628a:	461a      	mov	r2, r3
 800628c:	f7fc fb2d 	bl	80028ea <_write>
 8006290:	1c43      	adds	r3, r0, #1
 8006292:	d102      	bne.n	800629a <_write_r+0x1e>
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	b103      	cbz	r3, 800629a <_write_r+0x1e>
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	bd38      	pop	{r3, r4, r5, pc}
 800629c:	20000a74 	.word	0x20000a74

080062a0 <__errno>:
 80062a0:	4b01      	ldr	r3, [pc, #4]	@ (80062a8 <__errno+0x8>)
 80062a2:	6818      	ldr	r0, [r3, #0]
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	200000e4 	.word	0x200000e4

080062ac <__libc_init_array>:
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	2600      	movs	r6, #0
 80062b0:	4d0c      	ldr	r5, [pc, #48]	@ (80062e4 <__libc_init_array+0x38>)
 80062b2:	4c0d      	ldr	r4, [pc, #52]	@ (80062e8 <__libc_init_array+0x3c>)
 80062b4:	1b64      	subs	r4, r4, r5
 80062b6:	10a4      	asrs	r4, r4, #2
 80062b8:	42a6      	cmp	r6, r4
 80062ba:	d109      	bne.n	80062d0 <__libc_init_array+0x24>
 80062bc:	f001 fe96 	bl	8007fec <_init>
 80062c0:	2600      	movs	r6, #0
 80062c2:	4d0a      	ldr	r5, [pc, #40]	@ (80062ec <__libc_init_array+0x40>)
 80062c4:	4c0a      	ldr	r4, [pc, #40]	@ (80062f0 <__libc_init_array+0x44>)
 80062c6:	1b64      	subs	r4, r4, r5
 80062c8:	10a4      	asrs	r4, r4, #2
 80062ca:	42a6      	cmp	r6, r4
 80062cc:	d105      	bne.n	80062da <__libc_init_array+0x2e>
 80062ce:	bd70      	pop	{r4, r5, r6, pc}
 80062d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d4:	4798      	blx	r3
 80062d6:	3601      	adds	r6, #1
 80062d8:	e7ee      	b.n	80062b8 <__libc_init_array+0xc>
 80062da:	f855 3b04 	ldr.w	r3, [r5], #4
 80062de:	4798      	blx	r3
 80062e0:	3601      	adds	r6, #1
 80062e2:	e7f2      	b.n	80062ca <__libc_init_array+0x1e>
 80062e4:	080085bc 	.word	0x080085bc
 80062e8:	080085bc 	.word	0x080085bc
 80062ec:	080085bc 	.word	0x080085bc
 80062f0:	080085c0 	.word	0x080085c0

080062f4 <__retarget_lock_init_recursive>:
 80062f4:	4770      	bx	lr

080062f6 <__retarget_lock_acquire_recursive>:
 80062f6:	4770      	bx	lr

080062f8 <__retarget_lock_release_recursive>:
 80062f8:	4770      	bx	lr

080062fa <memchr>:
 80062fa:	4603      	mov	r3, r0
 80062fc:	b510      	push	{r4, lr}
 80062fe:	b2c9      	uxtb	r1, r1
 8006300:	4402      	add	r2, r0
 8006302:	4293      	cmp	r3, r2
 8006304:	4618      	mov	r0, r3
 8006306:	d101      	bne.n	800630c <memchr+0x12>
 8006308:	2000      	movs	r0, #0
 800630a:	e003      	b.n	8006314 <memchr+0x1a>
 800630c:	7804      	ldrb	r4, [r0, #0]
 800630e:	3301      	adds	r3, #1
 8006310:	428c      	cmp	r4, r1
 8006312:	d1f6      	bne.n	8006302 <memchr+0x8>
 8006314:	bd10      	pop	{r4, pc}

08006316 <abort>:
 8006316:	2006      	movs	r0, #6
 8006318:	b508      	push	{r3, lr}
 800631a:	f001 fd77 	bl	8007e0c <raise>
 800631e:	2001      	movs	r0, #1
 8006320:	f7fc fabb 	bl	800289a <_exit>

08006324 <quorem>:
 8006324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006328:	6903      	ldr	r3, [r0, #16]
 800632a:	690c      	ldr	r4, [r1, #16]
 800632c:	4607      	mov	r7, r0
 800632e:	42a3      	cmp	r3, r4
 8006330:	db7e      	blt.n	8006430 <quorem+0x10c>
 8006332:	3c01      	subs	r4, #1
 8006334:	00a3      	lsls	r3, r4, #2
 8006336:	f100 0514 	add.w	r5, r0, #20
 800633a:	f101 0814 	add.w	r8, r1, #20
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006344:	9301      	str	r3, [sp, #4]
 8006346:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800634a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800634e:	3301      	adds	r3, #1
 8006350:	429a      	cmp	r2, r3
 8006352:	fbb2 f6f3 	udiv	r6, r2, r3
 8006356:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800635a:	d32e      	bcc.n	80063ba <quorem+0x96>
 800635c:	f04f 0a00 	mov.w	sl, #0
 8006360:	46c4      	mov	ip, r8
 8006362:	46ae      	mov	lr, r5
 8006364:	46d3      	mov	fp, sl
 8006366:	f85c 3b04 	ldr.w	r3, [ip], #4
 800636a:	b298      	uxth	r0, r3
 800636c:	fb06 a000 	mla	r0, r6, r0, sl
 8006370:	0c1b      	lsrs	r3, r3, #16
 8006372:	0c02      	lsrs	r2, r0, #16
 8006374:	fb06 2303 	mla	r3, r6, r3, r2
 8006378:	f8de 2000 	ldr.w	r2, [lr]
 800637c:	b280      	uxth	r0, r0
 800637e:	b292      	uxth	r2, r2
 8006380:	1a12      	subs	r2, r2, r0
 8006382:	445a      	add	r2, fp
 8006384:	f8de 0000 	ldr.w	r0, [lr]
 8006388:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800638c:	b29b      	uxth	r3, r3
 800638e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006392:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006396:	b292      	uxth	r2, r2
 8006398:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800639c:	45e1      	cmp	r9, ip
 800639e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80063a2:	f84e 2b04 	str.w	r2, [lr], #4
 80063a6:	d2de      	bcs.n	8006366 <quorem+0x42>
 80063a8:	9b00      	ldr	r3, [sp, #0]
 80063aa:	58eb      	ldr	r3, [r5, r3]
 80063ac:	b92b      	cbnz	r3, 80063ba <quorem+0x96>
 80063ae:	9b01      	ldr	r3, [sp, #4]
 80063b0:	3b04      	subs	r3, #4
 80063b2:	429d      	cmp	r5, r3
 80063b4:	461a      	mov	r2, r3
 80063b6:	d32f      	bcc.n	8006418 <quorem+0xf4>
 80063b8:	613c      	str	r4, [r7, #16]
 80063ba:	4638      	mov	r0, r7
 80063bc:	f001 f97a 	bl	80076b4 <__mcmp>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	db25      	blt.n	8006410 <quorem+0xec>
 80063c4:	4629      	mov	r1, r5
 80063c6:	2000      	movs	r0, #0
 80063c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80063cc:	f8d1 c000 	ldr.w	ip, [r1]
 80063d0:	fa1f fe82 	uxth.w	lr, r2
 80063d4:	fa1f f38c 	uxth.w	r3, ip
 80063d8:	eba3 030e 	sub.w	r3, r3, lr
 80063dc:	4403      	add	r3, r0
 80063de:	0c12      	lsrs	r2, r2, #16
 80063e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80063e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063ee:	45c1      	cmp	r9, r8
 80063f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80063f4:	f841 3b04 	str.w	r3, [r1], #4
 80063f8:	d2e6      	bcs.n	80063c8 <quorem+0xa4>
 80063fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006402:	b922      	cbnz	r2, 800640e <quorem+0xea>
 8006404:	3b04      	subs	r3, #4
 8006406:	429d      	cmp	r5, r3
 8006408:	461a      	mov	r2, r3
 800640a:	d30b      	bcc.n	8006424 <quorem+0x100>
 800640c:	613c      	str	r4, [r7, #16]
 800640e:	3601      	adds	r6, #1
 8006410:	4630      	mov	r0, r6
 8006412:	b003      	add	sp, #12
 8006414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006418:	6812      	ldr	r2, [r2, #0]
 800641a:	3b04      	subs	r3, #4
 800641c:	2a00      	cmp	r2, #0
 800641e:	d1cb      	bne.n	80063b8 <quorem+0x94>
 8006420:	3c01      	subs	r4, #1
 8006422:	e7c6      	b.n	80063b2 <quorem+0x8e>
 8006424:	6812      	ldr	r2, [r2, #0]
 8006426:	3b04      	subs	r3, #4
 8006428:	2a00      	cmp	r2, #0
 800642a:	d1ef      	bne.n	800640c <quorem+0xe8>
 800642c:	3c01      	subs	r4, #1
 800642e:	e7ea      	b.n	8006406 <quorem+0xe2>
 8006430:	2000      	movs	r0, #0
 8006432:	e7ee      	b.n	8006412 <quorem+0xee>
 8006434:	0000      	movs	r0, r0
	...

08006438 <_dtoa_r>:
 8006438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643c:	4614      	mov	r4, r2
 800643e:	461d      	mov	r5, r3
 8006440:	69c7      	ldr	r7, [r0, #28]
 8006442:	b097      	sub	sp, #92	@ 0x5c
 8006444:	4683      	mov	fp, r0
 8006446:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800644a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800644c:	b97f      	cbnz	r7, 800646e <_dtoa_r+0x36>
 800644e:	2010      	movs	r0, #16
 8006450:	f000 fe02 	bl	8007058 <malloc>
 8006454:	4602      	mov	r2, r0
 8006456:	f8cb 001c 	str.w	r0, [fp, #28]
 800645a:	b920      	cbnz	r0, 8006466 <_dtoa_r+0x2e>
 800645c:	21ef      	movs	r1, #239	@ 0xef
 800645e:	4ba8      	ldr	r3, [pc, #672]	@ (8006700 <_dtoa_r+0x2c8>)
 8006460:	48a8      	ldr	r0, [pc, #672]	@ (8006704 <_dtoa_r+0x2cc>)
 8006462:	f7ff f8bd 	bl	80055e0 <__assert_func>
 8006466:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800646a:	6007      	str	r7, [r0, #0]
 800646c:	60c7      	str	r7, [r0, #12]
 800646e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006472:	6819      	ldr	r1, [r3, #0]
 8006474:	b159      	cbz	r1, 800648e <_dtoa_r+0x56>
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	2301      	movs	r3, #1
 800647a:	4093      	lsls	r3, r2
 800647c:	604a      	str	r2, [r1, #4]
 800647e:	608b      	str	r3, [r1, #8]
 8006480:	4658      	mov	r0, fp
 8006482:	f000 fedf 	bl	8007244 <_Bfree>
 8006486:	2200      	movs	r2, #0
 8006488:	f8db 301c 	ldr.w	r3, [fp, #28]
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	1e2b      	subs	r3, r5, #0
 8006490:	bfaf      	iteee	ge
 8006492:	2300      	movge	r3, #0
 8006494:	2201      	movlt	r2, #1
 8006496:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800649a:	9303      	strlt	r3, [sp, #12]
 800649c:	bfa8      	it	ge
 800649e:	6033      	strge	r3, [r6, #0]
 80064a0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80064a4:	4b98      	ldr	r3, [pc, #608]	@ (8006708 <_dtoa_r+0x2d0>)
 80064a6:	bfb8      	it	lt
 80064a8:	6032      	strlt	r2, [r6, #0]
 80064aa:	ea33 0308 	bics.w	r3, r3, r8
 80064ae:	d112      	bne.n	80064d6 <_dtoa_r+0x9e>
 80064b0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80064b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80064bc:	4323      	orrs	r3, r4
 80064be:	f000 8550 	beq.w	8006f62 <_dtoa_r+0xb2a>
 80064c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80064c4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800670c <_dtoa_r+0x2d4>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 8552 	beq.w	8006f72 <_dtoa_r+0xb3a>
 80064ce:	f10a 0303 	add.w	r3, sl, #3
 80064d2:	f000 bd4c 	b.w	8006f6e <_dtoa_r+0xb36>
 80064d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80064de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064e2:	2200      	movs	r2, #0
 80064e4:	2300      	movs	r3, #0
 80064e6:	f7fa fa5f 	bl	80009a8 <__aeabi_dcmpeq>
 80064ea:	4607      	mov	r7, r0
 80064ec:	b158      	cbz	r0, 8006506 <_dtoa_r+0xce>
 80064ee:	2301      	movs	r3, #1
 80064f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80064f6:	b113      	cbz	r3, 80064fe <_dtoa_r+0xc6>
 80064f8:	4b85      	ldr	r3, [pc, #532]	@ (8006710 <_dtoa_r+0x2d8>)
 80064fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006714 <_dtoa_r+0x2dc>
 8006502:	f000 bd36 	b.w	8006f72 <_dtoa_r+0xb3a>
 8006506:	ab14      	add	r3, sp, #80	@ 0x50
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	ab15      	add	r3, sp, #84	@ 0x54
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	4658      	mov	r0, fp
 8006510:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006514:	f001 f97e 	bl	8007814 <__d2b>
 8006518:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800651c:	4681      	mov	r9, r0
 800651e:	2e00      	cmp	r6, #0
 8006520:	d077      	beq.n	8006612 <_dtoa_r+0x1da>
 8006522:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006526:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006528:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800652c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006530:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006534:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006538:	9712      	str	r7, [sp, #72]	@ 0x48
 800653a:	4619      	mov	r1, r3
 800653c:	2200      	movs	r2, #0
 800653e:	4b76      	ldr	r3, [pc, #472]	@ (8006718 <_dtoa_r+0x2e0>)
 8006540:	f7f9 fe12 	bl	8000168 <__aeabi_dsub>
 8006544:	a368      	add	r3, pc, #416	@ (adr r3, 80066e8 <_dtoa_r+0x2b0>)
 8006546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654a:	f7f9 ffc5 	bl	80004d8 <__aeabi_dmul>
 800654e:	a368      	add	r3, pc, #416	@ (adr r3, 80066f0 <_dtoa_r+0x2b8>)
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f7f9 fe0a 	bl	800016c <__adddf3>
 8006558:	4604      	mov	r4, r0
 800655a:	4630      	mov	r0, r6
 800655c:	460d      	mov	r5, r1
 800655e:	f7f9 ff51 	bl	8000404 <__aeabi_i2d>
 8006562:	a365      	add	r3, pc, #404	@ (adr r3, 80066f8 <_dtoa_r+0x2c0>)
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	f7f9 ffb6 	bl	80004d8 <__aeabi_dmul>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4620      	mov	r0, r4
 8006572:	4629      	mov	r1, r5
 8006574:	f7f9 fdfa 	bl	800016c <__adddf3>
 8006578:	4604      	mov	r4, r0
 800657a:	460d      	mov	r5, r1
 800657c:	f7fa fa5c 	bl	8000a38 <__aeabi_d2iz>
 8006580:	2200      	movs	r2, #0
 8006582:	4607      	mov	r7, r0
 8006584:	2300      	movs	r3, #0
 8006586:	4620      	mov	r0, r4
 8006588:	4629      	mov	r1, r5
 800658a:	f7fa fa17 	bl	80009bc <__aeabi_dcmplt>
 800658e:	b140      	cbz	r0, 80065a2 <_dtoa_r+0x16a>
 8006590:	4638      	mov	r0, r7
 8006592:	f7f9 ff37 	bl	8000404 <__aeabi_i2d>
 8006596:	4622      	mov	r2, r4
 8006598:	462b      	mov	r3, r5
 800659a:	f7fa fa05 	bl	80009a8 <__aeabi_dcmpeq>
 800659e:	b900      	cbnz	r0, 80065a2 <_dtoa_r+0x16a>
 80065a0:	3f01      	subs	r7, #1
 80065a2:	2f16      	cmp	r7, #22
 80065a4:	d853      	bhi.n	800664e <_dtoa_r+0x216>
 80065a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065aa:	4b5c      	ldr	r3, [pc, #368]	@ (800671c <_dtoa_r+0x2e4>)
 80065ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f7fa fa02 	bl	80009bc <__aeabi_dcmplt>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d04a      	beq.n	8006652 <_dtoa_r+0x21a>
 80065bc:	2300      	movs	r3, #0
 80065be:	3f01      	subs	r7, #1
 80065c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80065c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80065c4:	1b9b      	subs	r3, r3, r6
 80065c6:	1e5a      	subs	r2, r3, #1
 80065c8:	bf46      	itte	mi
 80065ca:	f1c3 0801 	rsbmi	r8, r3, #1
 80065ce:	2300      	movmi	r3, #0
 80065d0:	f04f 0800 	movpl.w	r8, #0
 80065d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80065d6:	bf48      	it	mi
 80065d8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80065da:	2f00      	cmp	r7, #0
 80065dc:	db3b      	blt.n	8006656 <_dtoa_r+0x21e>
 80065de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065e0:	970e      	str	r7, [sp, #56]	@ 0x38
 80065e2:	443b      	add	r3, r7
 80065e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80065e6:	2300      	movs	r3, #0
 80065e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065ec:	2b09      	cmp	r3, #9
 80065ee:	d866      	bhi.n	80066be <_dtoa_r+0x286>
 80065f0:	2b05      	cmp	r3, #5
 80065f2:	bfc4      	itt	gt
 80065f4:	3b04      	subgt	r3, #4
 80065f6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80065f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065fa:	bfc8      	it	gt
 80065fc:	2400      	movgt	r4, #0
 80065fe:	f1a3 0302 	sub.w	r3, r3, #2
 8006602:	bfd8      	it	le
 8006604:	2401      	movle	r4, #1
 8006606:	2b03      	cmp	r3, #3
 8006608:	d864      	bhi.n	80066d4 <_dtoa_r+0x29c>
 800660a:	e8df f003 	tbb	[pc, r3]
 800660e:	382b      	.short	0x382b
 8006610:	5636      	.short	0x5636
 8006612:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006616:	441e      	add	r6, r3
 8006618:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800661c:	2b20      	cmp	r3, #32
 800661e:	bfc1      	itttt	gt
 8006620:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006624:	fa08 f803 	lslgt.w	r8, r8, r3
 8006628:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800662c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006630:	bfd6      	itet	le
 8006632:	f1c3 0320 	rsble	r3, r3, #32
 8006636:	ea48 0003 	orrgt.w	r0, r8, r3
 800663a:	fa04 f003 	lslle.w	r0, r4, r3
 800663e:	f7f9 fed1 	bl	80003e4 <__aeabi_ui2d>
 8006642:	2201      	movs	r2, #1
 8006644:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006648:	3e01      	subs	r6, #1
 800664a:	9212      	str	r2, [sp, #72]	@ 0x48
 800664c:	e775      	b.n	800653a <_dtoa_r+0x102>
 800664e:	2301      	movs	r3, #1
 8006650:	e7b6      	b.n	80065c0 <_dtoa_r+0x188>
 8006652:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006654:	e7b5      	b.n	80065c2 <_dtoa_r+0x18a>
 8006656:	427b      	negs	r3, r7
 8006658:	930a      	str	r3, [sp, #40]	@ 0x28
 800665a:	2300      	movs	r3, #0
 800665c:	eba8 0807 	sub.w	r8, r8, r7
 8006660:	930e      	str	r3, [sp, #56]	@ 0x38
 8006662:	e7c2      	b.n	80065ea <_dtoa_r+0x1b2>
 8006664:	2300      	movs	r3, #0
 8006666:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006668:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800666a:	2b00      	cmp	r3, #0
 800666c:	dc35      	bgt.n	80066da <_dtoa_r+0x2a2>
 800666e:	2301      	movs	r3, #1
 8006670:	461a      	mov	r2, r3
 8006672:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006676:	9221      	str	r2, [sp, #132]	@ 0x84
 8006678:	e00b      	b.n	8006692 <_dtoa_r+0x25a>
 800667a:	2301      	movs	r3, #1
 800667c:	e7f3      	b.n	8006666 <_dtoa_r+0x22e>
 800667e:	2300      	movs	r3, #0
 8006680:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006682:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006684:	18fb      	adds	r3, r7, r3
 8006686:	9308      	str	r3, [sp, #32]
 8006688:	3301      	adds	r3, #1
 800668a:	2b01      	cmp	r3, #1
 800668c:	9307      	str	r3, [sp, #28]
 800668e:	bfb8      	it	lt
 8006690:	2301      	movlt	r3, #1
 8006692:	2100      	movs	r1, #0
 8006694:	2204      	movs	r2, #4
 8006696:	f8db 001c 	ldr.w	r0, [fp, #28]
 800669a:	f102 0514 	add.w	r5, r2, #20
 800669e:	429d      	cmp	r5, r3
 80066a0:	d91f      	bls.n	80066e2 <_dtoa_r+0x2aa>
 80066a2:	6041      	str	r1, [r0, #4]
 80066a4:	4658      	mov	r0, fp
 80066a6:	f000 fd8d 	bl	80071c4 <_Balloc>
 80066aa:	4682      	mov	sl, r0
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d139      	bne.n	8006724 <_dtoa_r+0x2ec>
 80066b0:	4602      	mov	r2, r0
 80066b2:	f240 11af 	movw	r1, #431	@ 0x1af
 80066b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006720 <_dtoa_r+0x2e8>)
 80066b8:	e6d2      	b.n	8006460 <_dtoa_r+0x28>
 80066ba:	2301      	movs	r3, #1
 80066bc:	e7e0      	b.n	8006680 <_dtoa_r+0x248>
 80066be:	2401      	movs	r4, #1
 80066c0:	2300      	movs	r3, #0
 80066c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80066c4:	9320      	str	r3, [sp, #128]	@ 0x80
 80066c6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ca:	2200      	movs	r2, #0
 80066cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80066d0:	2312      	movs	r3, #18
 80066d2:	e7d0      	b.n	8006676 <_dtoa_r+0x23e>
 80066d4:	2301      	movs	r3, #1
 80066d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066d8:	e7f5      	b.n	80066c6 <_dtoa_r+0x28e>
 80066da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80066dc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80066e0:	e7d7      	b.n	8006692 <_dtoa_r+0x25a>
 80066e2:	3101      	adds	r1, #1
 80066e4:	0052      	lsls	r2, r2, #1
 80066e6:	e7d8      	b.n	800669a <_dtoa_r+0x262>
 80066e8:	636f4361 	.word	0x636f4361
 80066ec:	3fd287a7 	.word	0x3fd287a7
 80066f0:	8b60c8b3 	.word	0x8b60c8b3
 80066f4:	3fc68a28 	.word	0x3fc68a28
 80066f8:	509f79fb 	.word	0x509f79fb
 80066fc:	3fd34413 	.word	0x3fd34413
 8006700:	080082c2 	.word	0x080082c2
 8006704:	080082d9 	.word	0x080082d9
 8006708:	7ff00000 	.word	0x7ff00000
 800670c:	080082be 	.word	0x080082be
 8006710:	08008292 	.word	0x08008292
 8006714:	08008291 	.word	0x08008291
 8006718:	3ff80000 	.word	0x3ff80000
 800671c:	080083d0 	.word	0x080083d0
 8006720:	08008331 	.word	0x08008331
 8006724:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006728:	6018      	str	r0, [r3, #0]
 800672a:	9b07      	ldr	r3, [sp, #28]
 800672c:	2b0e      	cmp	r3, #14
 800672e:	f200 80a4 	bhi.w	800687a <_dtoa_r+0x442>
 8006732:	2c00      	cmp	r4, #0
 8006734:	f000 80a1 	beq.w	800687a <_dtoa_r+0x442>
 8006738:	2f00      	cmp	r7, #0
 800673a:	dd33      	ble.n	80067a4 <_dtoa_r+0x36c>
 800673c:	4b86      	ldr	r3, [pc, #536]	@ (8006958 <_dtoa_r+0x520>)
 800673e:	f007 020f 	and.w	r2, r7, #15
 8006742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006746:	05f8      	lsls	r0, r7, #23
 8006748:	e9d3 3400 	ldrd	r3, r4, [r3]
 800674c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006750:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006754:	d516      	bpl.n	8006784 <_dtoa_r+0x34c>
 8006756:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800675a:	4b80      	ldr	r3, [pc, #512]	@ (800695c <_dtoa_r+0x524>)
 800675c:	2603      	movs	r6, #3
 800675e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006762:	f7f9 ffe3 	bl	800072c <__aeabi_ddiv>
 8006766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800676a:	f004 040f 	and.w	r4, r4, #15
 800676e:	4d7b      	ldr	r5, [pc, #492]	@ (800695c <_dtoa_r+0x524>)
 8006770:	b954      	cbnz	r4, 8006788 <_dtoa_r+0x350>
 8006772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800677a:	f7f9 ffd7 	bl	800072c <__aeabi_ddiv>
 800677e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006782:	e028      	b.n	80067d6 <_dtoa_r+0x39e>
 8006784:	2602      	movs	r6, #2
 8006786:	e7f2      	b.n	800676e <_dtoa_r+0x336>
 8006788:	07e1      	lsls	r1, r4, #31
 800678a:	d508      	bpl.n	800679e <_dtoa_r+0x366>
 800678c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006790:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006794:	f7f9 fea0 	bl	80004d8 <__aeabi_dmul>
 8006798:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800679c:	3601      	adds	r6, #1
 800679e:	1064      	asrs	r4, r4, #1
 80067a0:	3508      	adds	r5, #8
 80067a2:	e7e5      	b.n	8006770 <_dtoa_r+0x338>
 80067a4:	f000 80d2 	beq.w	800694c <_dtoa_r+0x514>
 80067a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067ac:	427c      	negs	r4, r7
 80067ae:	4b6a      	ldr	r3, [pc, #424]	@ (8006958 <_dtoa_r+0x520>)
 80067b0:	f004 020f 	and.w	r2, r4, #15
 80067b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f7f9 fe8c 	bl	80004d8 <__aeabi_dmul>
 80067c0:	2602      	movs	r6, #2
 80067c2:	2300      	movs	r3, #0
 80067c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067c8:	4d64      	ldr	r5, [pc, #400]	@ (800695c <_dtoa_r+0x524>)
 80067ca:	1124      	asrs	r4, r4, #4
 80067cc:	2c00      	cmp	r4, #0
 80067ce:	f040 80b2 	bne.w	8006936 <_dtoa_r+0x4fe>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1d3      	bne.n	800677e <_dtoa_r+0x346>
 80067d6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80067da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 80b7 	beq.w	8006950 <_dtoa_r+0x518>
 80067e2:	2200      	movs	r2, #0
 80067e4:	4620      	mov	r0, r4
 80067e6:	4629      	mov	r1, r5
 80067e8:	4b5d      	ldr	r3, [pc, #372]	@ (8006960 <_dtoa_r+0x528>)
 80067ea:	f7fa f8e7 	bl	80009bc <__aeabi_dcmplt>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	f000 80ae 	beq.w	8006950 <_dtoa_r+0x518>
 80067f4:	9b07      	ldr	r3, [sp, #28]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 80aa 	beq.w	8006950 <_dtoa_r+0x518>
 80067fc:	9b08      	ldr	r3, [sp, #32]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	dd37      	ble.n	8006872 <_dtoa_r+0x43a>
 8006802:	1e7b      	subs	r3, r7, #1
 8006804:	4620      	mov	r0, r4
 8006806:	9304      	str	r3, [sp, #16]
 8006808:	2200      	movs	r2, #0
 800680a:	4629      	mov	r1, r5
 800680c:	4b55      	ldr	r3, [pc, #340]	@ (8006964 <_dtoa_r+0x52c>)
 800680e:	f7f9 fe63 	bl	80004d8 <__aeabi_dmul>
 8006812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006816:	9c08      	ldr	r4, [sp, #32]
 8006818:	3601      	adds	r6, #1
 800681a:	4630      	mov	r0, r6
 800681c:	f7f9 fdf2 	bl	8000404 <__aeabi_i2d>
 8006820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006824:	f7f9 fe58 	bl	80004d8 <__aeabi_dmul>
 8006828:	2200      	movs	r2, #0
 800682a:	4b4f      	ldr	r3, [pc, #316]	@ (8006968 <_dtoa_r+0x530>)
 800682c:	f7f9 fc9e 	bl	800016c <__adddf3>
 8006830:	4605      	mov	r5, r0
 8006832:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006836:	2c00      	cmp	r4, #0
 8006838:	f040 809a 	bne.w	8006970 <_dtoa_r+0x538>
 800683c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006840:	2200      	movs	r2, #0
 8006842:	4b4a      	ldr	r3, [pc, #296]	@ (800696c <_dtoa_r+0x534>)
 8006844:	f7f9 fc90 	bl	8000168 <__aeabi_dsub>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006850:	462a      	mov	r2, r5
 8006852:	4633      	mov	r3, r6
 8006854:	f7fa f8d0 	bl	80009f8 <__aeabi_dcmpgt>
 8006858:	2800      	cmp	r0, #0
 800685a:	f040 828e 	bne.w	8006d7a <_dtoa_r+0x942>
 800685e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006862:	462a      	mov	r2, r5
 8006864:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006868:	f7fa f8a8 	bl	80009bc <__aeabi_dcmplt>
 800686c:	2800      	cmp	r0, #0
 800686e:	f040 8127 	bne.w	8006ac0 <_dtoa_r+0x688>
 8006872:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006876:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800687a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800687c:	2b00      	cmp	r3, #0
 800687e:	f2c0 8163 	blt.w	8006b48 <_dtoa_r+0x710>
 8006882:	2f0e      	cmp	r7, #14
 8006884:	f300 8160 	bgt.w	8006b48 <_dtoa_r+0x710>
 8006888:	4b33      	ldr	r3, [pc, #204]	@ (8006958 <_dtoa_r+0x520>)
 800688a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800688e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006892:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006896:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006898:	2b00      	cmp	r3, #0
 800689a:	da03      	bge.n	80068a4 <_dtoa_r+0x46c>
 800689c:	9b07      	ldr	r3, [sp, #28]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f340 8100 	ble.w	8006aa4 <_dtoa_r+0x66c>
 80068a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068a8:	4656      	mov	r6, sl
 80068aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068ae:	4620      	mov	r0, r4
 80068b0:	4629      	mov	r1, r5
 80068b2:	f7f9 ff3b 	bl	800072c <__aeabi_ddiv>
 80068b6:	f7fa f8bf 	bl	8000a38 <__aeabi_d2iz>
 80068ba:	4680      	mov	r8, r0
 80068bc:	f7f9 fda2 	bl	8000404 <__aeabi_i2d>
 80068c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068c4:	f7f9 fe08 	bl	80004d8 <__aeabi_dmul>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4620      	mov	r0, r4
 80068ce:	4629      	mov	r1, r5
 80068d0:	f7f9 fc4a 	bl	8000168 <__aeabi_dsub>
 80068d4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80068d8:	9d07      	ldr	r5, [sp, #28]
 80068da:	f806 4b01 	strb.w	r4, [r6], #1
 80068de:	eba6 040a 	sub.w	r4, r6, sl
 80068e2:	42a5      	cmp	r5, r4
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	f040 8116 	bne.w	8006b18 <_dtoa_r+0x6e0>
 80068ec:	f7f9 fc3e 	bl	800016c <__adddf3>
 80068f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068f4:	4604      	mov	r4, r0
 80068f6:	460d      	mov	r5, r1
 80068f8:	f7fa f87e 	bl	80009f8 <__aeabi_dcmpgt>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f040 80f8 	bne.w	8006af2 <_dtoa_r+0x6ba>
 8006902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006906:	4620      	mov	r0, r4
 8006908:	4629      	mov	r1, r5
 800690a:	f7fa f84d 	bl	80009a8 <__aeabi_dcmpeq>
 800690e:	b118      	cbz	r0, 8006918 <_dtoa_r+0x4e0>
 8006910:	f018 0f01 	tst.w	r8, #1
 8006914:	f040 80ed 	bne.w	8006af2 <_dtoa_r+0x6ba>
 8006918:	4649      	mov	r1, r9
 800691a:	4658      	mov	r0, fp
 800691c:	f000 fc92 	bl	8007244 <_Bfree>
 8006920:	2300      	movs	r3, #0
 8006922:	7033      	strb	r3, [r6, #0]
 8006924:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006926:	3701      	adds	r7, #1
 8006928:	601f      	str	r7, [r3, #0]
 800692a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 8320 	beq.w	8006f72 <_dtoa_r+0xb3a>
 8006932:	601e      	str	r6, [r3, #0]
 8006934:	e31d      	b.n	8006f72 <_dtoa_r+0xb3a>
 8006936:	07e2      	lsls	r2, r4, #31
 8006938:	d505      	bpl.n	8006946 <_dtoa_r+0x50e>
 800693a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800693e:	f7f9 fdcb 	bl	80004d8 <__aeabi_dmul>
 8006942:	2301      	movs	r3, #1
 8006944:	3601      	adds	r6, #1
 8006946:	1064      	asrs	r4, r4, #1
 8006948:	3508      	adds	r5, #8
 800694a:	e73f      	b.n	80067cc <_dtoa_r+0x394>
 800694c:	2602      	movs	r6, #2
 800694e:	e742      	b.n	80067d6 <_dtoa_r+0x39e>
 8006950:	9c07      	ldr	r4, [sp, #28]
 8006952:	9704      	str	r7, [sp, #16]
 8006954:	e761      	b.n	800681a <_dtoa_r+0x3e2>
 8006956:	bf00      	nop
 8006958:	080083d0 	.word	0x080083d0
 800695c:	080083a8 	.word	0x080083a8
 8006960:	3ff00000 	.word	0x3ff00000
 8006964:	40240000 	.word	0x40240000
 8006968:	401c0000 	.word	0x401c0000
 800696c:	40140000 	.word	0x40140000
 8006970:	4b70      	ldr	r3, [pc, #448]	@ (8006b34 <_dtoa_r+0x6fc>)
 8006972:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006974:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006978:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800697c:	4454      	add	r4, sl
 800697e:	2900      	cmp	r1, #0
 8006980:	d045      	beq.n	8006a0e <_dtoa_r+0x5d6>
 8006982:	2000      	movs	r0, #0
 8006984:	496c      	ldr	r1, [pc, #432]	@ (8006b38 <_dtoa_r+0x700>)
 8006986:	f7f9 fed1 	bl	800072c <__aeabi_ddiv>
 800698a:	4633      	mov	r3, r6
 800698c:	462a      	mov	r2, r5
 800698e:	f7f9 fbeb 	bl	8000168 <__aeabi_dsub>
 8006992:	4656      	mov	r6, sl
 8006994:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800699c:	f7fa f84c 	bl	8000a38 <__aeabi_d2iz>
 80069a0:	4605      	mov	r5, r0
 80069a2:	f7f9 fd2f 	bl	8000404 <__aeabi_i2d>
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069ae:	f7f9 fbdb 	bl	8000168 <__aeabi_dsub>
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	3530      	adds	r5, #48	@ 0x30
 80069b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069c0:	f806 5b01 	strb.w	r5, [r6], #1
 80069c4:	f7f9 fffa 	bl	80009bc <__aeabi_dcmplt>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d163      	bne.n	8006a94 <_dtoa_r+0x65c>
 80069cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069d0:	2000      	movs	r0, #0
 80069d2:	495a      	ldr	r1, [pc, #360]	@ (8006b3c <_dtoa_r+0x704>)
 80069d4:	f7f9 fbc8 	bl	8000168 <__aeabi_dsub>
 80069d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069dc:	f7f9 ffee 	bl	80009bc <__aeabi_dcmplt>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	f040 8087 	bne.w	8006af4 <_dtoa_r+0x6bc>
 80069e6:	42a6      	cmp	r6, r4
 80069e8:	f43f af43 	beq.w	8006872 <_dtoa_r+0x43a>
 80069ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80069f0:	2200      	movs	r2, #0
 80069f2:	4b53      	ldr	r3, [pc, #332]	@ (8006b40 <_dtoa_r+0x708>)
 80069f4:	f7f9 fd70 	bl	80004d8 <__aeabi_dmul>
 80069f8:	2200      	movs	r2, #0
 80069fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80069fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a02:	4b4f      	ldr	r3, [pc, #316]	@ (8006b40 <_dtoa_r+0x708>)
 8006a04:	f7f9 fd68 	bl	80004d8 <__aeabi_dmul>
 8006a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a0c:	e7c4      	b.n	8006998 <_dtoa_r+0x560>
 8006a0e:	4631      	mov	r1, r6
 8006a10:	4628      	mov	r0, r5
 8006a12:	f7f9 fd61 	bl	80004d8 <__aeabi_dmul>
 8006a16:	4656      	mov	r6, sl
 8006a18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a1c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a22:	f7fa f809 	bl	8000a38 <__aeabi_d2iz>
 8006a26:	4605      	mov	r5, r0
 8006a28:	f7f9 fcec 	bl	8000404 <__aeabi_i2d>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a34:	f7f9 fb98 	bl	8000168 <__aeabi_dsub>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	3530      	adds	r5, #48	@ 0x30
 8006a3e:	f806 5b01 	strb.w	r5, [r6], #1
 8006a42:	42a6      	cmp	r6, r4
 8006a44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	d124      	bne.n	8006a98 <_dtoa_r+0x660>
 8006a4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a52:	4b39      	ldr	r3, [pc, #228]	@ (8006b38 <_dtoa_r+0x700>)
 8006a54:	f7f9 fb8a 	bl	800016c <__adddf3>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a60:	f7f9 ffca 	bl	80009f8 <__aeabi_dcmpgt>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d145      	bne.n	8006af4 <_dtoa_r+0x6bc>
 8006a68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	4932      	ldr	r1, [pc, #200]	@ (8006b38 <_dtoa_r+0x700>)
 8006a70:	f7f9 fb7a 	bl	8000168 <__aeabi_dsub>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a7c:	f7f9 ff9e 	bl	80009bc <__aeabi_dcmplt>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	f43f aef6 	beq.w	8006872 <_dtoa_r+0x43a>
 8006a86:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006a88:	1e73      	subs	r3, r6, #1
 8006a8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a90:	2b30      	cmp	r3, #48	@ 0x30
 8006a92:	d0f8      	beq.n	8006a86 <_dtoa_r+0x64e>
 8006a94:	9f04      	ldr	r7, [sp, #16]
 8006a96:	e73f      	b.n	8006918 <_dtoa_r+0x4e0>
 8006a98:	4b29      	ldr	r3, [pc, #164]	@ (8006b40 <_dtoa_r+0x708>)
 8006a9a:	f7f9 fd1d 	bl	80004d8 <__aeabi_dmul>
 8006a9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aa2:	e7bc      	b.n	8006a1e <_dtoa_r+0x5e6>
 8006aa4:	d10c      	bne.n	8006ac0 <_dtoa_r+0x688>
 8006aa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	4b25      	ldr	r3, [pc, #148]	@ (8006b44 <_dtoa_r+0x70c>)
 8006aae:	f7f9 fd13 	bl	80004d8 <__aeabi_dmul>
 8006ab2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ab6:	f7f9 ff95 	bl	80009e4 <__aeabi_dcmpge>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	f000 815b 	beq.w	8006d76 <_dtoa_r+0x93e>
 8006ac0:	2400      	movs	r4, #0
 8006ac2:	4625      	mov	r5, r4
 8006ac4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ac6:	4656      	mov	r6, sl
 8006ac8:	43db      	mvns	r3, r3
 8006aca:	9304      	str	r3, [sp, #16]
 8006acc:	2700      	movs	r7, #0
 8006ace:	4621      	mov	r1, r4
 8006ad0:	4658      	mov	r0, fp
 8006ad2:	f000 fbb7 	bl	8007244 <_Bfree>
 8006ad6:	2d00      	cmp	r5, #0
 8006ad8:	d0dc      	beq.n	8006a94 <_dtoa_r+0x65c>
 8006ada:	b12f      	cbz	r7, 8006ae8 <_dtoa_r+0x6b0>
 8006adc:	42af      	cmp	r7, r5
 8006ade:	d003      	beq.n	8006ae8 <_dtoa_r+0x6b0>
 8006ae0:	4639      	mov	r1, r7
 8006ae2:	4658      	mov	r0, fp
 8006ae4:	f000 fbae 	bl	8007244 <_Bfree>
 8006ae8:	4629      	mov	r1, r5
 8006aea:	4658      	mov	r0, fp
 8006aec:	f000 fbaa 	bl	8007244 <_Bfree>
 8006af0:	e7d0      	b.n	8006a94 <_dtoa_r+0x65c>
 8006af2:	9704      	str	r7, [sp, #16]
 8006af4:	4633      	mov	r3, r6
 8006af6:	461e      	mov	r6, r3
 8006af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006afc:	2a39      	cmp	r2, #57	@ 0x39
 8006afe:	d107      	bne.n	8006b10 <_dtoa_r+0x6d8>
 8006b00:	459a      	cmp	sl, r3
 8006b02:	d1f8      	bne.n	8006af6 <_dtoa_r+0x6be>
 8006b04:	9a04      	ldr	r2, [sp, #16]
 8006b06:	3201      	adds	r2, #1
 8006b08:	9204      	str	r2, [sp, #16]
 8006b0a:	2230      	movs	r2, #48	@ 0x30
 8006b0c:	f88a 2000 	strb.w	r2, [sl]
 8006b10:	781a      	ldrb	r2, [r3, #0]
 8006b12:	3201      	adds	r2, #1
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	e7bd      	b.n	8006a94 <_dtoa_r+0x65c>
 8006b18:	2200      	movs	r2, #0
 8006b1a:	4b09      	ldr	r3, [pc, #36]	@ (8006b40 <_dtoa_r+0x708>)
 8006b1c:	f7f9 fcdc 	bl	80004d8 <__aeabi_dmul>
 8006b20:	2200      	movs	r2, #0
 8006b22:	2300      	movs	r3, #0
 8006b24:	4604      	mov	r4, r0
 8006b26:	460d      	mov	r5, r1
 8006b28:	f7f9 ff3e 	bl	80009a8 <__aeabi_dcmpeq>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	f43f aebc 	beq.w	80068aa <_dtoa_r+0x472>
 8006b32:	e6f1      	b.n	8006918 <_dtoa_r+0x4e0>
 8006b34:	080083d0 	.word	0x080083d0
 8006b38:	3fe00000 	.word	0x3fe00000
 8006b3c:	3ff00000 	.word	0x3ff00000
 8006b40:	40240000 	.word	0x40240000
 8006b44:	40140000 	.word	0x40140000
 8006b48:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006b4a:	2a00      	cmp	r2, #0
 8006b4c:	f000 80db 	beq.w	8006d06 <_dtoa_r+0x8ce>
 8006b50:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006b52:	2a01      	cmp	r2, #1
 8006b54:	f300 80bf 	bgt.w	8006cd6 <_dtoa_r+0x89e>
 8006b58:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006b5a:	2a00      	cmp	r2, #0
 8006b5c:	f000 80b7 	beq.w	8006cce <_dtoa_r+0x896>
 8006b60:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006b64:	4646      	mov	r6, r8
 8006b66:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006b68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	441a      	add	r2, r3
 8006b6e:	4658      	mov	r0, fp
 8006b70:	4498      	add	r8, r3
 8006b72:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b74:	f000 fc1a 	bl	80073ac <__i2b>
 8006b78:	4605      	mov	r5, r0
 8006b7a:	b15e      	cbz	r6, 8006b94 <_dtoa_r+0x75c>
 8006b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	dd08      	ble.n	8006b94 <_dtoa_r+0x75c>
 8006b82:	42b3      	cmp	r3, r6
 8006b84:	bfa8      	it	ge
 8006b86:	4633      	movge	r3, r6
 8006b88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b8a:	eba8 0803 	sub.w	r8, r8, r3
 8006b8e:	1af6      	subs	r6, r6, r3
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b96:	b1f3      	cbz	r3, 8006bd6 <_dtoa_r+0x79e>
 8006b98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 80b7 	beq.w	8006d0e <_dtoa_r+0x8d6>
 8006ba0:	b18c      	cbz	r4, 8006bc6 <_dtoa_r+0x78e>
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	4658      	mov	r0, fp
 8006ba8:	f000 fcbe 	bl	8007528 <__pow5mult>
 8006bac:	464a      	mov	r2, r9
 8006bae:	4601      	mov	r1, r0
 8006bb0:	4605      	mov	r5, r0
 8006bb2:	4658      	mov	r0, fp
 8006bb4:	f000 fc10 	bl	80073d8 <__multiply>
 8006bb8:	4649      	mov	r1, r9
 8006bba:	9004      	str	r0, [sp, #16]
 8006bbc:	4658      	mov	r0, fp
 8006bbe:	f000 fb41 	bl	8007244 <_Bfree>
 8006bc2:	9b04      	ldr	r3, [sp, #16]
 8006bc4:	4699      	mov	r9, r3
 8006bc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bc8:	1b1a      	subs	r2, r3, r4
 8006bca:	d004      	beq.n	8006bd6 <_dtoa_r+0x79e>
 8006bcc:	4649      	mov	r1, r9
 8006bce:	4658      	mov	r0, fp
 8006bd0:	f000 fcaa 	bl	8007528 <__pow5mult>
 8006bd4:	4681      	mov	r9, r0
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	4658      	mov	r0, fp
 8006bda:	f000 fbe7 	bl	80073ac <__i2b>
 8006bde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006be0:	4604      	mov	r4, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 81c9 	beq.w	8006f7a <_dtoa_r+0xb42>
 8006be8:	461a      	mov	r2, r3
 8006bea:	4601      	mov	r1, r0
 8006bec:	4658      	mov	r0, fp
 8006bee:	f000 fc9b 	bl	8007528 <__pow5mult>
 8006bf2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	f300 808f 	bgt.w	8006d1a <_dtoa_r+0x8e2>
 8006bfc:	9b02      	ldr	r3, [sp, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f040 8087 	bne.w	8006d12 <_dtoa_r+0x8da>
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f040 8083 	bne.w	8006d16 <_dtoa_r+0x8de>
 8006c10:	9b03      	ldr	r3, [sp, #12]
 8006c12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c16:	0d1b      	lsrs	r3, r3, #20
 8006c18:	051b      	lsls	r3, r3, #20
 8006c1a:	b12b      	cbz	r3, 8006c28 <_dtoa_r+0x7f0>
 8006c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c1e:	f108 0801 	add.w	r8, r8, #1
 8006c22:	3301      	adds	r3, #1
 8006c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c26:	2301      	movs	r3, #1
 8006c28:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 81aa 	beq.w	8006f86 <_dtoa_r+0xb4e>
 8006c32:	6923      	ldr	r3, [r4, #16]
 8006c34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c38:	6918      	ldr	r0, [r3, #16]
 8006c3a:	f000 fb6b 	bl	8007314 <__hi0bits>
 8006c3e:	f1c0 0020 	rsb	r0, r0, #32
 8006c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c44:	4418      	add	r0, r3
 8006c46:	f010 001f 	ands.w	r0, r0, #31
 8006c4a:	d071      	beq.n	8006d30 <_dtoa_r+0x8f8>
 8006c4c:	f1c0 0320 	rsb	r3, r0, #32
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	dd65      	ble.n	8006d20 <_dtoa_r+0x8e8>
 8006c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c56:	f1c0 001c 	rsb	r0, r0, #28
 8006c5a:	4403      	add	r3, r0
 8006c5c:	4480      	add	r8, r0
 8006c5e:	4406      	add	r6, r0
 8006c60:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c62:	f1b8 0f00 	cmp.w	r8, #0
 8006c66:	dd05      	ble.n	8006c74 <_dtoa_r+0x83c>
 8006c68:	4649      	mov	r1, r9
 8006c6a:	4642      	mov	r2, r8
 8006c6c:	4658      	mov	r0, fp
 8006c6e:	f000 fcb5 	bl	80075dc <__lshift>
 8006c72:	4681      	mov	r9, r0
 8006c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	dd05      	ble.n	8006c86 <_dtoa_r+0x84e>
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4658      	mov	r0, fp
 8006c80:	f000 fcac 	bl	80075dc <__lshift>
 8006c84:	4604      	mov	r4, r0
 8006c86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d053      	beq.n	8006d34 <_dtoa_r+0x8fc>
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	4648      	mov	r0, r9
 8006c90:	f000 fd10 	bl	80076b4 <__mcmp>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	da4d      	bge.n	8006d34 <_dtoa_r+0x8fc>
 8006c98:	1e7b      	subs	r3, r7, #1
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	9304      	str	r3, [sp, #16]
 8006c9e:	220a      	movs	r2, #10
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	4658      	mov	r0, fp
 8006ca4:	f000 faf0 	bl	8007288 <__multadd>
 8006ca8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006caa:	4681      	mov	r9, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 816c 	beq.w	8006f8a <_dtoa_r+0xb52>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	220a      	movs	r2, #10
 8006cb8:	4658      	mov	r0, fp
 8006cba:	f000 fae5 	bl	8007288 <__multadd>
 8006cbe:	9b08      	ldr	r3, [sp, #32]
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	dc61      	bgt.n	8006d8a <_dtoa_r+0x952>
 8006cc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	dc3b      	bgt.n	8006d44 <_dtoa_r+0x90c>
 8006ccc:	e05d      	b.n	8006d8a <_dtoa_r+0x952>
 8006cce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006cd0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006cd4:	e746      	b.n	8006b64 <_dtoa_r+0x72c>
 8006cd6:	9b07      	ldr	r3, [sp, #28]
 8006cd8:	1e5c      	subs	r4, r3, #1
 8006cda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cdc:	42a3      	cmp	r3, r4
 8006cde:	bfbf      	itttt	lt
 8006ce0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006ce2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006ce4:	1ae3      	sublt	r3, r4, r3
 8006ce6:	18d2      	addlt	r2, r2, r3
 8006ce8:	bfa8      	it	ge
 8006cea:	1b1c      	subge	r4, r3, r4
 8006cec:	9b07      	ldr	r3, [sp, #28]
 8006cee:	bfbe      	ittt	lt
 8006cf0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006cf2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006cf4:	2400      	movlt	r4, #0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	bfb5      	itete	lt
 8006cfa:	eba8 0603 	sublt.w	r6, r8, r3
 8006cfe:	4646      	movge	r6, r8
 8006d00:	2300      	movlt	r3, #0
 8006d02:	9b07      	ldrge	r3, [sp, #28]
 8006d04:	e730      	b.n	8006b68 <_dtoa_r+0x730>
 8006d06:	4646      	mov	r6, r8
 8006d08:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d0a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006d0c:	e735      	b.n	8006b7a <_dtoa_r+0x742>
 8006d0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d10:	e75c      	b.n	8006bcc <_dtoa_r+0x794>
 8006d12:	2300      	movs	r3, #0
 8006d14:	e788      	b.n	8006c28 <_dtoa_r+0x7f0>
 8006d16:	9b02      	ldr	r3, [sp, #8]
 8006d18:	e786      	b.n	8006c28 <_dtoa_r+0x7f0>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d1e:	e788      	b.n	8006c32 <_dtoa_r+0x7fa>
 8006d20:	d09f      	beq.n	8006c62 <_dtoa_r+0x82a>
 8006d22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d24:	331c      	adds	r3, #28
 8006d26:	441a      	add	r2, r3
 8006d28:	4498      	add	r8, r3
 8006d2a:	441e      	add	r6, r3
 8006d2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d2e:	e798      	b.n	8006c62 <_dtoa_r+0x82a>
 8006d30:	4603      	mov	r3, r0
 8006d32:	e7f6      	b.n	8006d22 <_dtoa_r+0x8ea>
 8006d34:	9b07      	ldr	r3, [sp, #28]
 8006d36:	9704      	str	r7, [sp, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	dc20      	bgt.n	8006d7e <_dtoa_r+0x946>
 8006d3c:	9308      	str	r3, [sp, #32]
 8006d3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	dd1e      	ble.n	8006d82 <_dtoa_r+0x94a>
 8006d44:	9b08      	ldr	r3, [sp, #32]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f47f aebc 	bne.w	8006ac4 <_dtoa_r+0x68c>
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	2205      	movs	r2, #5
 8006d50:	4658      	mov	r0, fp
 8006d52:	f000 fa99 	bl	8007288 <__multadd>
 8006d56:	4601      	mov	r1, r0
 8006d58:	4604      	mov	r4, r0
 8006d5a:	4648      	mov	r0, r9
 8006d5c:	f000 fcaa 	bl	80076b4 <__mcmp>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	f77f aeaf 	ble.w	8006ac4 <_dtoa_r+0x68c>
 8006d66:	2331      	movs	r3, #49	@ 0x31
 8006d68:	4656      	mov	r6, sl
 8006d6a:	f806 3b01 	strb.w	r3, [r6], #1
 8006d6e:	9b04      	ldr	r3, [sp, #16]
 8006d70:	3301      	adds	r3, #1
 8006d72:	9304      	str	r3, [sp, #16]
 8006d74:	e6aa      	b.n	8006acc <_dtoa_r+0x694>
 8006d76:	9c07      	ldr	r4, [sp, #28]
 8006d78:	9704      	str	r7, [sp, #16]
 8006d7a:	4625      	mov	r5, r4
 8006d7c:	e7f3      	b.n	8006d66 <_dtoa_r+0x92e>
 8006d7e:	9b07      	ldr	r3, [sp, #28]
 8006d80:	9308      	str	r3, [sp, #32]
 8006d82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 8104 	beq.w	8006f92 <_dtoa_r+0xb5a>
 8006d8a:	2e00      	cmp	r6, #0
 8006d8c:	dd05      	ble.n	8006d9a <_dtoa_r+0x962>
 8006d8e:	4629      	mov	r1, r5
 8006d90:	4632      	mov	r2, r6
 8006d92:	4658      	mov	r0, fp
 8006d94:	f000 fc22 	bl	80075dc <__lshift>
 8006d98:	4605      	mov	r5, r0
 8006d9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d05a      	beq.n	8006e56 <_dtoa_r+0xa1e>
 8006da0:	4658      	mov	r0, fp
 8006da2:	6869      	ldr	r1, [r5, #4]
 8006da4:	f000 fa0e 	bl	80071c4 <_Balloc>
 8006da8:	4606      	mov	r6, r0
 8006daa:	b928      	cbnz	r0, 8006db8 <_dtoa_r+0x980>
 8006dac:	4602      	mov	r2, r0
 8006dae:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006db2:	4b83      	ldr	r3, [pc, #524]	@ (8006fc0 <_dtoa_r+0xb88>)
 8006db4:	f7ff bb54 	b.w	8006460 <_dtoa_r+0x28>
 8006db8:	692a      	ldr	r2, [r5, #16]
 8006dba:	f105 010c 	add.w	r1, r5, #12
 8006dbe:	3202      	adds	r2, #2
 8006dc0:	0092      	lsls	r2, r2, #2
 8006dc2:	300c      	adds	r0, #12
 8006dc4:	f001 f84e 	bl	8007e64 <memcpy>
 8006dc8:	2201      	movs	r2, #1
 8006dca:	4631      	mov	r1, r6
 8006dcc:	4658      	mov	r0, fp
 8006dce:	f000 fc05 	bl	80075dc <__lshift>
 8006dd2:	462f      	mov	r7, r5
 8006dd4:	4605      	mov	r5, r0
 8006dd6:	f10a 0301 	add.w	r3, sl, #1
 8006dda:	9307      	str	r3, [sp, #28]
 8006ddc:	9b08      	ldr	r3, [sp, #32]
 8006dde:	4453      	add	r3, sl
 8006de0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006de2:	9b02      	ldr	r3, [sp, #8]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dea:	9b07      	ldr	r3, [sp, #28]
 8006dec:	4621      	mov	r1, r4
 8006dee:	3b01      	subs	r3, #1
 8006df0:	4648      	mov	r0, r9
 8006df2:	9302      	str	r3, [sp, #8]
 8006df4:	f7ff fa96 	bl	8006324 <quorem>
 8006df8:	4639      	mov	r1, r7
 8006dfa:	9008      	str	r0, [sp, #32]
 8006dfc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e00:	4648      	mov	r0, r9
 8006e02:	f000 fc57 	bl	80076b4 <__mcmp>
 8006e06:	462a      	mov	r2, r5
 8006e08:	9009      	str	r0, [sp, #36]	@ 0x24
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	4658      	mov	r0, fp
 8006e0e:	f000 fc6d 	bl	80076ec <__mdiff>
 8006e12:	68c2      	ldr	r2, [r0, #12]
 8006e14:	4606      	mov	r6, r0
 8006e16:	bb02      	cbnz	r2, 8006e5a <_dtoa_r+0xa22>
 8006e18:	4601      	mov	r1, r0
 8006e1a:	4648      	mov	r0, r9
 8006e1c:	f000 fc4a 	bl	80076b4 <__mcmp>
 8006e20:	4602      	mov	r2, r0
 8006e22:	4631      	mov	r1, r6
 8006e24:	4658      	mov	r0, fp
 8006e26:	920c      	str	r2, [sp, #48]	@ 0x30
 8006e28:	f000 fa0c 	bl	8007244 <_Bfree>
 8006e2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e2e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006e30:	9e07      	ldr	r6, [sp, #28]
 8006e32:	ea43 0102 	orr.w	r1, r3, r2
 8006e36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e38:	4319      	orrs	r1, r3
 8006e3a:	d110      	bne.n	8006e5e <_dtoa_r+0xa26>
 8006e3c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e40:	d029      	beq.n	8006e96 <_dtoa_r+0xa5e>
 8006e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	dd02      	ble.n	8006e4e <_dtoa_r+0xa16>
 8006e48:	9b08      	ldr	r3, [sp, #32]
 8006e4a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006e4e:	9b02      	ldr	r3, [sp, #8]
 8006e50:	f883 8000 	strb.w	r8, [r3]
 8006e54:	e63b      	b.n	8006ace <_dtoa_r+0x696>
 8006e56:	4628      	mov	r0, r5
 8006e58:	e7bb      	b.n	8006dd2 <_dtoa_r+0x99a>
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	e7e1      	b.n	8006e22 <_dtoa_r+0x9ea>
 8006e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	db04      	blt.n	8006e6e <_dtoa_r+0xa36>
 8006e64:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006e66:	430b      	orrs	r3, r1
 8006e68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e6a:	430b      	orrs	r3, r1
 8006e6c:	d120      	bne.n	8006eb0 <_dtoa_r+0xa78>
 8006e6e:	2a00      	cmp	r2, #0
 8006e70:	dded      	ble.n	8006e4e <_dtoa_r+0xa16>
 8006e72:	4649      	mov	r1, r9
 8006e74:	2201      	movs	r2, #1
 8006e76:	4658      	mov	r0, fp
 8006e78:	f000 fbb0 	bl	80075dc <__lshift>
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	4681      	mov	r9, r0
 8006e80:	f000 fc18 	bl	80076b4 <__mcmp>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	dc03      	bgt.n	8006e90 <_dtoa_r+0xa58>
 8006e88:	d1e1      	bne.n	8006e4e <_dtoa_r+0xa16>
 8006e8a:	f018 0f01 	tst.w	r8, #1
 8006e8e:	d0de      	beq.n	8006e4e <_dtoa_r+0xa16>
 8006e90:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e94:	d1d8      	bne.n	8006e48 <_dtoa_r+0xa10>
 8006e96:	2339      	movs	r3, #57	@ 0x39
 8006e98:	9a02      	ldr	r2, [sp, #8]
 8006e9a:	7013      	strb	r3, [r2, #0]
 8006e9c:	4633      	mov	r3, r6
 8006e9e:	461e      	mov	r6, r3
 8006ea0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	2a39      	cmp	r2, #57	@ 0x39
 8006ea8:	d052      	beq.n	8006f50 <_dtoa_r+0xb18>
 8006eaa:	3201      	adds	r2, #1
 8006eac:	701a      	strb	r2, [r3, #0]
 8006eae:	e60e      	b.n	8006ace <_dtoa_r+0x696>
 8006eb0:	2a00      	cmp	r2, #0
 8006eb2:	dd07      	ble.n	8006ec4 <_dtoa_r+0xa8c>
 8006eb4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006eb8:	d0ed      	beq.n	8006e96 <_dtoa_r+0xa5e>
 8006eba:	9a02      	ldr	r2, [sp, #8]
 8006ebc:	f108 0301 	add.w	r3, r8, #1
 8006ec0:	7013      	strb	r3, [r2, #0]
 8006ec2:	e604      	b.n	8006ace <_dtoa_r+0x696>
 8006ec4:	9b07      	ldr	r3, [sp, #28]
 8006ec6:	9a07      	ldr	r2, [sp, #28]
 8006ec8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006ecc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d028      	beq.n	8006f24 <_dtoa_r+0xaec>
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	220a      	movs	r2, #10
 8006ed8:	4658      	mov	r0, fp
 8006eda:	f000 f9d5 	bl	8007288 <__multadd>
 8006ede:	42af      	cmp	r7, r5
 8006ee0:	4681      	mov	r9, r0
 8006ee2:	f04f 0300 	mov.w	r3, #0
 8006ee6:	f04f 020a 	mov.w	r2, #10
 8006eea:	4639      	mov	r1, r7
 8006eec:	4658      	mov	r0, fp
 8006eee:	d107      	bne.n	8006f00 <_dtoa_r+0xac8>
 8006ef0:	f000 f9ca 	bl	8007288 <__multadd>
 8006ef4:	4607      	mov	r7, r0
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	9b07      	ldr	r3, [sp, #28]
 8006efa:	3301      	adds	r3, #1
 8006efc:	9307      	str	r3, [sp, #28]
 8006efe:	e774      	b.n	8006dea <_dtoa_r+0x9b2>
 8006f00:	f000 f9c2 	bl	8007288 <__multadd>
 8006f04:	4629      	mov	r1, r5
 8006f06:	4607      	mov	r7, r0
 8006f08:	2300      	movs	r3, #0
 8006f0a:	220a      	movs	r2, #10
 8006f0c:	4658      	mov	r0, fp
 8006f0e:	f000 f9bb 	bl	8007288 <__multadd>
 8006f12:	4605      	mov	r5, r0
 8006f14:	e7f0      	b.n	8006ef8 <_dtoa_r+0xac0>
 8006f16:	9b08      	ldr	r3, [sp, #32]
 8006f18:	2700      	movs	r7, #0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	bfcc      	ite	gt
 8006f1e:	461e      	movgt	r6, r3
 8006f20:	2601      	movle	r6, #1
 8006f22:	4456      	add	r6, sl
 8006f24:	4649      	mov	r1, r9
 8006f26:	2201      	movs	r2, #1
 8006f28:	4658      	mov	r0, fp
 8006f2a:	f000 fb57 	bl	80075dc <__lshift>
 8006f2e:	4621      	mov	r1, r4
 8006f30:	4681      	mov	r9, r0
 8006f32:	f000 fbbf 	bl	80076b4 <__mcmp>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	dcb0      	bgt.n	8006e9c <_dtoa_r+0xa64>
 8006f3a:	d102      	bne.n	8006f42 <_dtoa_r+0xb0a>
 8006f3c:	f018 0f01 	tst.w	r8, #1
 8006f40:	d1ac      	bne.n	8006e9c <_dtoa_r+0xa64>
 8006f42:	4633      	mov	r3, r6
 8006f44:	461e      	mov	r6, r3
 8006f46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f4a:	2a30      	cmp	r2, #48	@ 0x30
 8006f4c:	d0fa      	beq.n	8006f44 <_dtoa_r+0xb0c>
 8006f4e:	e5be      	b.n	8006ace <_dtoa_r+0x696>
 8006f50:	459a      	cmp	sl, r3
 8006f52:	d1a4      	bne.n	8006e9e <_dtoa_r+0xa66>
 8006f54:	9b04      	ldr	r3, [sp, #16]
 8006f56:	3301      	adds	r3, #1
 8006f58:	9304      	str	r3, [sp, #16]
 8006f5a:	2331      	movs	r3, #49	@ 0x31
 8006f5c:	f88a 3000 	strb.w	r3, [sl]
 8006f60:	e5b5      	b.n	8006ace <_dtoa_r+0x696>
 8006f62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006f64:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006fc4 <_dtoa_r+0xb8c>
 8006f68:	b11b      	cbz	r3, 8006f72 <_dtoa_r+0xb3a>
 8006f6a:	f10a 0308 	add.w	r3, sl, #8
 8006f6e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	4650      	mov	r0, sl
 8006f74:	b017      	add	sp, #92	@ 0x5c
 8006f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	f77f ae3d 	ble.w	8006bfc <_dtoa_r+0x7c4>
 8006f82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f84:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f86:	2001      	movs	r0, #1
 8006f88:	e65b      	b.n	8006c42 <_dtoa_r+0x80a>
 8006f8a:	9b08      	ldr	r3, [sp, #32]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f77f aed6 	ble.w	8006d3e <_dtoa_r+0x906>
 8006f92:	4656      	mov	r6, sl
 8006f94:	4621      	mov	r1, r4
 8006f96:	4648      	mov	r0, r9
 8006f98:	f7ff f9c4 	bl	8006324 <quorem>
 8006f9c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006fa0:	9b08      	ldr	r3, [sp, #32]
 8006fa2:	f806 8b01 	strb.w	r8, [r6], #1
 8006fa6:	eba6 020a 	sub.w	r2, r6, sl
 8006faa:	4293      	cmp	r3, r2
 8006fac:	ddb3      	ble.n	8006f16 <_dtoa_r+0xade>
 8006fae:	4649      	mov	r1, r9
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	220a      	movs	r2, #10
 8006fb4:	4658      	mov	r0, fp
 8006fb6:	f000 f967 	bl	8007288 <__multadd>
 8006fba:	4681      	mov	r9, r0
 8006fbc:	e7ea      	b.n	8006f94 <_dtoa_r+0xb5c>
 8006fbe:	bf00      	nop
 8006fc0:	08008331 	.word	0x08008331
 8006fc4:	080082b5 	.word	0x080082b5

08006fc8 <_free_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4605      	mov	r5, r0
 8006fcc:	2900      	cmp	r1, #0
 8006fce:	d040      	beq.n	8007052 <_free_r+0x8a>
 8006fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fd4:	1f0c      	subs	r4, r1, #4
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	bfb8      	it	lt
 8006fda:	18e4      	addlt	r4, r4, r3
 8006fdc:	f000 f8e6 	bl	80071ac <__malloc_lock>
 8006fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8007054 <_free_r+0x8c>)
 8006fe2:	6813      	ldr	r3, [r2, #0]
 8006fe4:	b933      	cbnz	r3, 8006ff4 <_free_r+0x2c>
 8006fe6:	6063      	str	r3, [r4, #4]
 8006fe8:	6014      	str	r4, [r2, #0]
 8006fea:	4628      	mov	r0, r5
 8006fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ff0:	f000 b8e2 	b.w	80071b8 <__malloc_unlock>
 8006ff4:	42a3      	cmp	r3, r4
 8006ff6:	d908      	bls.n	800700a <_free_r+0x42>
 8006ff8:	6820      	ldr	r0, [r4, #0]
 8006ffa:	1821      	adds	r1, r4, r0
 8006ffc:	428b      	cmp	r3, r1
 8006ffe:	bf01      	itttt	eq
 8007000:	6819      	ldreq	r1, [r3, #0]
 8007002:	685b      	ldreq	r3, [r3, #4]
 8007004:	1809      	addeq	r1, r1, r0
 8007006:	6021      	streq	r1, [r4, #0]
 8007008:	e7ed      	b.n	8006fe6 <_free_r+0x1e>
 800700a:	461a      	mov	r2, r3
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	b10b      	cbz	r3, 8007014 <_free_r+0x4c>
 8007010:	42a3      	cmp	r3, r4
 8007012:	d9fa      	bls.n	800700a <_free_r+0x42>
 8007014:	6811      	ldr	r1, [r2, #0]
 8007016:	1850      	adds	r0, r2, r1
 8007018:	42a0      	cmp	r0, r4
 800701a:	d10b      	bne.n	8007034 <_free_r+0x6c>
 800701c:	6820      	ldr	r0, [r4, #0]
 800701e:	4401      	add	r1, r0
 8007020:	1850      	adds	r0, r2, r1
 8007022:	4283      	cmp	r3, r0
 8007024:	6011      	str	r1, [r2, #0]
 8007026:	d1e0      	bne.n	8006fea <_free_r+0x22>
 8007028:	6818      	ldr	r0, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	4408      	add	r0, r1
 800702e:	6010      	str	r0, [r2, #0]
 8007030:	6053      	str	r3, [r2, #4]
 8007032:	e7da      	b.n	8006fea <_free_r+0x22>
 8007034:	d902      	bls.n	800703c <_free_r+0x74>
 8007036:	230c      	movs	r3, #12
 8007038:	602b      	str	r3, [r5, #0]
 800703a:	e7d6      	b.n	8006fea <_free_r+0x22>
 800703c:	6820      	ldr	r0, [r4, #0]
 800703e:	1821      	adds	r1, r4, r0
 8007040:	428b      	cmp	r3, r1
 8007042:	bf01      	itttt	eq
 8007044:	6819      	ldreq	r1, [r3, #0]
 8007046:	685b      	ldreq	r3, [r3, #4]
 8007048:	1809      	addeq	r1, r1, r0
 800704a:	6021      	streq	r1, [r4, #0]
 800704c:	6063      	str	r3, [r4, #4]
 800704e:	6054      	str	r4, [r2, #4]
 8007050:	e7cb      	b.n	8006fea <_free_r+0x22>
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	20000a80 	.word	0x20000a80

08007058 <malloc>:
 8007058:	4b02      	ldr	r3, [pc, #8]	@ (8007064 <malloc+0xc>)
 800705a:	4601      	mov	r1, r0
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	f000 b825 	b.w	80070ac <_malloc_r>
 8007062:	bf00      	nop
 8007064:	200000e4 	.word	0x200000e4

08007068 <sbrk_aligned>:
 8007068:	b570      	push	{r4, r5, r6, lr}
 800706a:	4e0f      	ldr	r6, [pc, #60]	@ (80070a8 <sbrk_aligned+0x40>)
 800706c:	460c      	mov	r4, r1
 800706e:	6831      	ldr	r1, [r6, #0]
 8007070:	4605      	mov	r5, r0
 8007072:	b911      	cbnz	r1, 800707a <sbrk_aligned+0x12>
 8007074:	f000 fee6 	bl	8007e44 <_sbrk_r>
 8007078:	6030      	str	r0, [r6, #0]
 800707a:	4621      	mov	r1, r4
 800707c:	4628      	mov	r0, r5
 800707e:	f000 fee1 	bl	8007e44 <_sbrk_r>
 8007082:	1c43      	adds	r3, r0, #1
 8007084:	d103      	bne.n	800708e <sbrk_aligned+0x26>
 8007086:	f04f 34ff 	mov.w	r4, #4294967295
 800708a:	4620      	mov	r0, r4
 800708c:	bd70      	pop	{r4, r5, r6, pc}
 800708e:	1cc4      	adds	r4, r0, #3
 8007090:	f024 0403 	bic.w	r4, r4, #3
 8007094:	42a0      	cmp	r0, r4
 8007096:	d0f8      	beq.n	800708a <sbrk_aligned+0x22>
 8007098:	1a21      	subs	r1, r4, r0
 800709a:	4628      	mov	r0, r5
 800709c:	f000 fed2 	bl	8007e44 <_sbrk_r>
 80070a0:	3001      	adds	r0, #1
 80070a2:	d1f2      	bne.n	800708a <sbrk_aligned+0x22>
 80070a4:	e7ef      	b.n	8007086 <sbrk_aligned+0x1e>
 80070a6:	bf00      	nop
 80070a8:	20000a7c 	.word	0x20000a7c

080070ac <_malloc_r>:
 80070ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b0:	1ccd      	adds	r5, r1, #3
 80070b2:	f025 0503 	bic.w	r5, r5, #3
 80070b6:	3508      	adds	r5, #8
 80070b8:	2d0c      	cmp	r5, #12
 80070ba:	bf38      	it	cc
 80070bc:	250c      	movcc	r5, #12
 80070be:	2d00      	cmp	r5, #0
 80070c0:	4606      	mov	r6, r0
 80070c2:	db01      	blt.n	80070c8 <_malloc_r+0x1c>
 80070c4:	42a9      	cmp	r1, r5
 80070c6:	d904      	bls.n	80070d2 <_malloc_r+0x26>
 80070c8:	230c      	movs	r3, #12
 80070ca:	6033      	str	r3, [r6, #0]
 80070cc:	2000      	movs	r0, #0
 80070ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071a8 <_malloc_r+0xfc>
 80070d6:	f000 f869 	bl	80071ac <__malloc_lock>
 80070da:	f8d8 3000 	ldr.w	r3, [r8]
 80070de:	461c      	mov	r4, r3
 80070e0:	bb44      	cbnz	r4, 8007134 <_malloc_r+0x88>
 80070e2:	4629      	mov	r1, r5
 80070e4:	4630      	mov	r0, r6
 80070e6:	f7ff ffbf 	bl	8007068 <sbrk_aligned>
 80070ea:	1c43      	adds	r3, r0, #1
 80070ec:	4604      	mov	r4, r0
 80070ee:	d158      	bne.n	80071a2 <_malloc_r+0xf6>
 80070f0:	f8d8 4000 	ldr.w	r4, [r8]
 80070f4:	4627      	mov	r7, r4
 80070f6:	2f00      	cmp	r7, #0
 80070f8:	d143      	bne.n	8007182 <_malloc_r+0xd6>
 80070fa:	2c00      	cmp	r4, #0
 80070fc:	d04b      	beq.n	8007196 <_malloc_r+0xea>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	4639      	mov	r1, r7
 8007102:	4630      	mov	r0, r6
 8007104:	eb04 0903 	add.w	r9, r4, r3
 8007108:	f000 fe9c 	bl	8007e44 <_sbrk_r>
 800710c:	4581      	cmp	r9, r0
 800710e:	d142      	bne.n	8007196 <_malloc_r+0xea>
 8007110:	6821      	ldr	r1, [r4, #0]
 8007112:	4630      	mov	r0, r6
 8007114:	1a6d      	subs	r5, r5, r1
 8007116:	4629      	mov	r1, r5
 8007118:	f7ff ffa6 	bl	8007068 <sbrk_aligned>
 800711c:	3001      	adds	r0, #1
 800711e:	d03a      	beq.n	8007196 <_malloc_r+0xea>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	442b      	add	r3, r5
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	f8d8 3000 	ldr.w	r3, [r8]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	bb62      	cbnz	r2, 8007188 <_malloc_r+0xdc>
 800712e:	f8c8 7000 	str.w	r7, [r8]
 8007132:	e00f      	b.n	8007154 <_malloc_r+0xa8>
 8007134:	6822      	ldr	r2, [r4, #0]
 8007136:	1b52      	subs	r2, r2, r5
 8007138:	d420      	bmi.n	800717c <_malloc_r+0xd0>
 800713a:	2a0b      	cmp	r2, #11
 800713c:	d917      	bls.n	800716e <_malloc_r+0xc2>
 800713e:	1961      	adds	r1, r4, r5
 8007140:	42a3      	cmp	r3, r4
 8007142:	6025      	str	r5, [r4, #0]
 8007144:	bf18      	it	ne
 8007146:	6059      	strne	r1, [r3, #4]
 8007148:	6863      	ldr	r3, [r4, #4]
 800714a:	bf08      	it	eq
 800714c:	f8c8 1000 	streq.w	r1, [r8]
 8007150:	5162      	str	r2, [r4, r5]
 8007152:	604b      	str	r3, [r1, #4]
 8007154:	4630      	mov	r0, r6
 8007156:	f000 f82f 	bl	80071b8 <__malloc_unlock>
 800715a:	f104 000b 	add.w	r0, r4, #11
 800715e:	1d23      	adds	r3, r4, #4
 8007160:	f020 0007 	bic.w	r0, r0, #7
 8007164:	1ac2      	subs	r2, r0, r3
 8007166:	bf1c      	itt	ne
 8007168:	1a1b      	subne	r3, r3, r0
 800716a:	50a3      	strne	r3, [r4, r2]
 800716c:	e7af      	b.n	80070ce <_malloc_r+0x22>
 800716e:	6862      	ldr	r2, [r4, #4]
 8007170:	42a3      	cmp	r3, r4
 8007172:	bf0c      	ite	eq
 8007174:	f8c8 2000 	streq.w	r2, [r8]
 8007178:	605a      	strne	r2, [r3, #4]
 800717a:	e7eb      	b.n	8007154 <_malloc_r+0xa8>
 800717c:	4623      	mov	r3, r4
 800717e:	6864      	ldr	r4, [r4, #4]
 8007180:	e7ae      	b.n	80070e0 <_malloc_r+0x34>
 8007182:	463c      	mov	r4, r7
 8007184:	687f      	ldr	r7, [r7, #4]
 8007186:	e7b6      	b.n	80070f6 <_malloc_r+0x4a>
 8007188:	461a      	mov	r2, r3
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	42a3      	cmp	r3, r4
 800718e:	d1fb      	bne.n	8007188 <_malloc_r+0xdc>
 8007190:	2300      	movs	r3, #0
 8007192:	6053      	str	r3, [r2, #4]
 8007194:	e7de      	b.n	8007154 <_malloc_r+0xa8>
 8007196:	230c      	movs	r3, #12
 8007198:	4630      	mov	r0, r6
 800719a:	6033      	str	r3, [r6, #0]
 800719c:	f000 f80c 	bl	80071b8 <__malloc_unlock>
 80071a0:	e794      	b.n	80070cc <_malloc_r+0x20>
 80071a2:	6005      	str	r5, [r0, #0]
 80071a4:	e7d6      	b.n	8007154 <_malloc_r+0xa8>
 80071a6:	bf00      	nop
 80071a8:	20000a80 	.word	0x20000a80

080071ac <__malloc_lock>:
 80071ac:	4801      	ldr	r0, [pc, #4]	@ (80071b4 <__malloc_lock+0x8>)
 80071ae:	f7ff b8a2 	b.w	80062f6 <__retarget_lock_acquire_recursive>
 80071b2:	bf00      	nop
 80071b4:	20000a78 	.word	0x20000a78

080071b8 <__malloc_unlock>:
 80071b8:	4801      	ldr	r0, [pc, #4]	@ (80071c0 <__malloc_unlock+0x8>)
 80071ba:	f7ff b89d 	b.w	80062f8 <__retarget_lock_release_recursive>
 80071be:	bf00      	nop
 80071c0:	20000a78 	.word	0x20000a78

080071c4 <_Balloc>:
 80071c4:	b570      	push	{r4, r5, r6, lr}
 80071c6:	69c6      	ldr	r6, [r0, #28]
 80071c8:	4604      	mov	r4, r0
 80071ca:	460d      	mov	r5, r1
 80071cc:	b976      	cbnz	r6, 80071ec <_Balloc+0x28>
 80071ce:	2010      	movs	r0, #16
 80071d0:	f7ff ff42 	bl	8007058 <malloc>
 80071d4:	4602      	mov	r2, r0
 80071d6:	61e0      	str	r0, [r4, #28]
 80071d8:	b920      	cbnz	r0, 80071e4 <_Balloc+0x20>
 80071da:	216b      	movs	r1, #107	@ 0x6b
 80071dc:	4b17      	ldr	r3, [pc, #92]	@ (800723c <_Balloc+0x78>)
 80071de:	4818      	ldr	r0, [pc, #96]	@ (8007240 <_Balloc+0x7c>)
 80071e0:	f7fe f9fe 	bl	80055e0 <__assert_func>
 80071e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071e8:	6006      	str	r6, [r0, #0]
 80071ea:	60c6      	str	r6, [r0, #12]
 80071ec:	69e6      	ldr	r6, [r4, #28]
 80071ee:	68f3      	ldr	r3, [r6, #12]
 80071f0:	b183      	cbz	r3, 8007214 <_Balloc+0x50>
 80071f2:	69e3      	ldr	r3, [r4, #28]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071fa:	b9b8      	cbnz	r0, 800722c <_Balloc+0x68>
 80071fc:	2101      	movs	r1, #1
 80071fe:	fa01 f605 	lsl.w	r6, r1, r5
 8007202:	1d72      	adds	r2, r6, #5
 8007204:	4620      	mov	r0, r4
 8007206:	0092      	lsls	r2, r2, #2
 8007208:	f000 fe3a 	bl	8007e80 <_calloc_r>
 800720c:	b160      	cbz	r0, 8007228 <_Balloc+0x64>
 800720e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007212:	e00e      	b.n	8007232 <_Balloc+0x6e>
 8007214:	2221      	movs	r2, #33	@ 0x21
 8007216:	2104      	movs	r1, #4
 8007218:	4620      	mov	r0, r4
 800721a:	f000 fe31 	bl	8007e80 <_calloc_r>
 800721e:	69e3      	ldr	r3, [r4, #28]
 8007220:	60f0      	str	r0, [r6, #12]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1e4      	bne.n	80071f2 <_Balloc+0x2e>
 8007228:	2000      	movs	r0, #0
 800722a:	bd70      	pop	{r4, r5, r6, pc}
 800722c:	6802      	ldr	r2, [r0, #0]
 800722e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007232:	2300      	movs	r3, #0
 8007234:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007238:	e7f7      	b.n	800722a <_Balloc+0x66>
 800723a:	bf00      	nop
 800723c:	080082c2 	.word	0x080082c2
 8007240:	08008342 	.word	0x08008342

08007244 <_Bfree>:
 8007244:	b570      	push	{r4, r5, r6, lr}
 8007246:	69c6      	ldr	r6, [r0, #28]
 8007248:	4605      	mov	r5, r0
 800724a:	460c      	mov	r4, r1
 800724c:	b976      	cbnz	r6, 800726c <_Bfree+0x28>
 800724e:	2010      	movs	r0, #16
 8007250:	f7ff ff02 	bl	8007058 <malloc>
 8007254:	4602      	mov	r2, r0
 8007256:	61e8      	str	r0, [r5, #28]
 8007258:	b920      	cbnz	r0, 8007264 <_Bfree+0x20>
 800725a:	218f      	movs	r1, #143	@ 0x8f
 800725c:	4b08      	ldr	r3, [pc, #32]	@ (8007280 <_Bfree+0x3c>)
 800725e:	4809      	ldr	r0, [pc, #36]	@ (8007284 <_Bfree+0x40>)
 8007260:	f7fe f9be 	bl	80055e0 <__assert_func>
 8007264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007268:	6006      	str	r6, [r0, #0]
 800726a:	60c6      	str	r6, [r0, #12]
 800726c:	b13c      	cbz	r4, 800727e <_Bfree+0x3a>
 800726e:	69eb      	ldr	r3, [r5, #28]
 8007270:	6862      	ldr	r2, [r4, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007278:	6021      	str	r1, [r4, #0]
 800727a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800727e:	bd70      	pop	{r4, r5, r6, pc}
 8007280:	080082c2 	.word	0x080082c2
 8007284:	08008342 	.word	0x08008342

08007288 <__multadd>:
 8007288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800728c:	4607      	mov	r7, r0
 800728e:	460c      	mov	r4, r1
 8007290:	461e      	mov	r6, r3
 8007292:	2000      	movs	r0, #0
 8007294:	690d      	ldr	r5, [r1, #16]
 8007296:	f101 0c14 	add.w	ip, r1, #20
 800729a:	f8dc 3000 	ldr.w	r3, [ip]
 800729e:	3001      	adds	r0, #1
 80072a0:	b299      	uxth	r1, r3
 80072a2:	fb02 6101 	mla	r1, r2, r1, r6
 80072a6:	0c1e      	lsrs	r6, r3, #16
 80072a8:	0c0b      	lsrs	r3, r1, #16
 80072aa:	fb02 3306 	mla	r3, r2, r6, r3
 80072ae:	b289      	uxth	r1, r1
 80072b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072b4:	4285      	cmp	r5, r0
 80072b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072ba:	f84c 1b04 	str.w	r1, [ip], #4
 80072be:	dcec      	bgt.n	800729a <__multadd+0x12>
 80072c0:	b30e      	cbz	r6, 8007306 <__multadd+0x7e>
 80072c2:	68a3      	ldr	r3, [r4, #8]
 80072c4:	42ab      	cmp	r3, r5
 80072c6:	dc19      	bgt.n	80072fc <__multadd+0x74>
 80072c8:	6861      	ldr	r1, [r4, #4]
 80072ca:	4638      	mov	r0, r7
 80072cc:	3101      	adds	r1, #1
 80072ce:	f7ff ff79 	bl	80071c4 <_Balloc>
 80072d2:	4680      	mov	r8, r0
 80072d4:	b928      	cbnz	r0, 80072e2 <__multadd+0x5a>
 80072d6:	4602      	mov	r2, r0
 80072d8:	21ba      	movs	r1, #186	@ 0xba
 80072da:	4b0c      	ldr	r3, [pc, #48]	@ (800730c <__multadd+0x84>)
 80072dc:	480c      	ldr	r0, [pc, #48]	@ (8007310 <__multadd+0x88>)
 80072de:	f7fe f97f 	bl	80055e0 <__assert_func>
 80072e2:	6922      	ldr	r2, [r4, #16]
 80072e4:	f104 010c 	add.w	r1, r4, #12
 80072e8:	3202      	adds	r2, #2
 80072ea:	0092      	lsls	r2, r2, #2
 80072ec:	300c      	adds	r0, #12
 80072ee:	f000 fdb9 	bl	8007e64 <memcpy>
 80072f2:	4621      	mov	r1, r4
 80072f4:	4638      	mov	r0, r7
 80072f6:	f7ff ffa5 	bl	8007244 <_Bfree>
 80072fa:	4644      	mov	r4, r8
 80072fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007300:	3501      	adds	r5, #1
 8007302:	615e      	str	r6, [r3, #20]
 8007304:	6125      	str	r5, [r4, #16]
 8007306:	4620      	mov	r0, r4
 8007308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800730c:	08008331 	.word	0x08008331
 8007310:	08008342 	.word	0x08008342

08007314 <__hi0bits>:
 8007314:	4603      	mov	r3, r0
 8007316:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800731a:	bf3a      	itte	cc
 800731c:	0403      	lslcc	r3, r0, #16
 800731e:	2010      	movcc	r0, #16
 8007320:	2000      	movcs	r0, #0
 8007322:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007326:	bf3c      	itt	cc
 8007328:	021b      	lslcc	r3, r3, #8
 800732a:	3008      	addcc	r0, #8
 800732c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007330:	bf3c      	itt	cc
 8007332:	011b      	lslcc	r3, r3, #4
 8007334:	3004      	addcc	r0, #4
 8007336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800733a:	bf3c      	itt	cc
 800733c:	009b      	lslcc	r3, r3, #2
 800733e:	3002      	addcc	r0, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	db05      	blt.n	8007350 <__hi0bits+0x3c>
 8007344:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007348:	f100 0001 	add.w	r0, r0, #1
 800734c:	bf08      	it	eq
 800734e:	2020      	moveq	r0, #32
 8007350:	4770      	bx	lr

08007352 <__lo0bits>:
 8007352:	6803      	ldr	r3, [r0, #0]
 8007354:	4602      	mov	r2, r0
 8007356:	f013 0007 	ands.w	r0, r3, #7
 800735a:	d00b      	beq.n	8007374 <__lo0bits+0x22>
 800735c:	07d9      	lsls	r1, r3, #31
 800735e:	d421      	bmi.n	80073a4 <__lo0bits+0x52>
 8007360:	0798      	lsls	r0, r3, #30
 8007362:	bf49      	itett	mi
 8007364:	085b      	lsrmi	r3, r3, #1
 8007366:	089b      	lsrpl	r3, r3, #2
 8007368:	2001      	movmi	r0, #1
 800736a:	6013      	strmi	r3, [r2, #0]
 800736c:	bf5c      	itt	pl
 800736e:	2002      	movpl	r0, #2
 8007370:	6013      	strpl	r3, [r2, #0]
 8007372:	4770      	bx	lr
 8007374:	b299      	uxth	r1, r3
 8007376:	b909      	cbnz	r1, 800737c <__lo0bits+0x2a>
 8007378:	2010      	movs	r0, #16
 800737a:	0c1b      	lsrs	r3, r3, #16
 800737c:	b2d9      	uxtb	r1, r3
 800737e:	b909      	cbnz	r1, 8007384 <__lo0bits+0x32>
 8007380:	3008      	adds	r0, #8
 8007382:	0a1b      	lsrs	r3, r3, #8
 8007384:	0719      	lsls	r1, r3, #28
 8007386:	bf04      	itt	eq
 8007388:	091b      	lsreq	r3, r3, #4
 800738a:	3004      	addeq	r0, #4
 800738c:	0799      	lsls	r1, r3, #30
 800738e:	bf04      	itt	eq
 8007390:	089b      	lsreq	r3, r3, #2
 8007392:	3002      	addeq	r0, #2
 8007394:	07d9      	lsls	r1, r3, #31
 8007396:	d403      	bmi.n	80073a0 <__lo0bits+0x4e>
 8007398:	085b      	lsrs	r3, r3, #1
 800739a:	f100 0001 	add.w	r0, r0, #1
 800739e:	d003      	beq.n	80073a8 <__lo0bits+0x56>
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	4770      	bx	lr
 80073a4:	2000      	movs	r0, #0
 80073a6:	4770      	bx	lr
 80073a8:	2020      	movs	r0, #32
 80073aa:	4770      	bx	lr

080073ac <__i2b>:
 80073ac:	b510      	push	{r4, lr}
 80073ae:	460c      	mov	r4, r1
 80073b0:	2101      	movs	r1, #1
 80073b2:	f7ff ff07 	bl	80071c4 <_Balloc>
 80073b6:	4602      	mov	r2, r0
 80073b8:	b928      	cbnz	r0, 80073c6 <__i2b+0x1a>
 80073ba:	f240 1145 	movw	r1, #325	@ 0x145
 80073be:	4b04      	ldr	r3, [pc, #16]	@ (80073d0 <__i2b+0x24>)
 80073c0:	4804      	ldr	r0, [pc, #16]	@ (80073d4 <__i2b+0x28>)
 80073c2:	f7fe f90d 	bl	80055e0 <__assert_func>
 80073c6:	2301      	movs	r3, #1
 80073c8:	6144      	str	r4, [r0, #20]
 80073ca:	6103      	str	r3, [r0, #16]
 80073cc:	bd10      	pop	{r4, pc}
 80073ce:	bf00      	nop
 80073d0:	08008331 	.word	0x08008331
 80073d4:	08008342 	.word	0x08008342

080073d8 <__multiply>:
 80073d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073dc:	4614      	mov	r4, r2
 80073de:	690a      	ldr	r2, [r1, #16]
 80073e0:	6923      	ldr	r3, [r4, #16]
 80073e2:	460f      	mov	r7, r1
 80073e4:	429a      	cmp	r2, r3
 80073e6:	bfa2      	ittt	ge
 80073e8:	4623      	movge	r3, r4
 80073ea:	460c      	movge	r4, r1
 80073ec:	461f      	movge	r7, r3
 80073ee:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80073f2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80073f6:	68a3      	ldr	r3, [r4, #8]
 80073f8:	6861      	ldr	r1, [r4, #4]
 80073fa:	eb0a 0609 	add.w	r6, sl, r9
 80073fe:	42b3      	cmp	r3, r6
 8007400:	b085      	sub	sp, #20
 8007402:	bfb8      	it	lt
 8007404:	3101      	addlt	r1, #1
 8007406:	f7ff fedd 	bl	80071c4 <_Balloc>
 800740a:	b930      	cbnz	r0, 800741a <__multiply+0x42>
 800740c:	4602      	mov	r2, r0
 800740e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007412:	4b43      	ldr	r3, [pc, #268]	@ (8007520 <__multiply+0x148>)
 8007414:	4843      	ldr	r0, [pc, #268]	@ (8007524 <__multiply+0x14c>)
 8007416:	f7fe f8e3 	bl	80055e0 <__assert_func>
 800741a:	f100 0514 	add.w	r5, r0, #20
 800741e:	462b      	mov	r3, r5
 8007420:	2200      	movs	r2, #0
 8007422:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007426:	4543      	cmp	r3, r8
 8007428:	d321      	bcc.n	800746e <__multiply+0x96>
 800742a:	f107 0114 	add.w	r1, r7, #20
 800742e:	f104 0214 	add.w	r2, r4, #20
 8007432:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007436:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800743a:	9302      	str	r3, [sp, #8]
 800743c:	1b13      	subs	r3, r2, r4
 800743e:	3b15      	subs	r3, #21
 8007440:	f023 0303 	bic.w	r3, r3, #3
 8007444:	3304      	adds	r3, #4
 8007446:	f104 0715 	add.w	r7, r4, #21
 800744a:	42ba      	cmp	r2, r7
 800744c:	bf38      	it	cc
 800744e:	2304      	movcc	r3, #4
 8007450:	9301      	str	r3, [sp, #4]
 8007452:	9b02      	ldr	r3, [sp, #8]
 8007454:	9103      	str	r1, [sp, #12]
 8007456:	428b      	cmp	r3, r1
 8007458:	d80c      	bhi.n	8007474 <__multiply+0x9c>
 800745a:	2e00      	cmp	r6, #0
 800745c:	dd03      	ble.n	8007466 <__multiply+0x8e>
 800745e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007462:	2b00      	cmp	r3, #0
 8007464:	d05a      	beq.n	800751c <__multiply+0x144>
 8007466:	6106      	str	r6, [r0, #16]
 8007468:	b005      	add	sp, #20
 800746a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800746e:	f843 2b04 	str.w	r2, [r3], #4
 8007472:	e7d8      	b.n	8007426 <__multiply+0x4e>
 8007474:	f8b1 a000 	ldrh.w	sl, [r1]
 8007478:	f1ba 0f00 	cmp.w	sl, #0
 800747c:	d023      	beq.n	80074c6 <__multiply+0xee>
 800747e:	46a9      	mov	r9, r5
 8007480:	f04f 0c00 	mov.w	ip, #0
 8007484:	f104 0e14 	add.w	lr, r4, #20
 8007488:	f85e 7b04 	ldr.w	r7, [lr], #4
 800748c:	f8d9 3000 	ldr.w	r3, [r9]
 8007490:	fa1f fb87 	uxth.w	fp, r7
 8007494:	b29b      	uxth	r3, r3
 8007496:	fb0a 330b 	mla	r3, sl, fp, r3
 800749a:	4463      	add	r3, ip
 800749c:	f8d9 c000 	ldr.w	ip, [r9]
 80074a0:	0c3f      	lsrs	r7, r7, #16
 80074a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80074a6:	fb0a c707 	mla	r7, sl, r7, ip
 80074aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80074b4:	4572      	cmp	r2, lr
 80074b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80074ba:	f849 3b04 	str.w	r3, [r9], #4
 80074be:	d8e3      	bhi.n	8007488 <__multiply+0xb0>
 80074c0:	9b01      	ldr	r3, [sp, #4]
 80074c2:	f845 c003 	str.w	ip, [r5, r3]
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	3104      	adds	r1, #4
 80074ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80074ce:	f1b9 0f00 	cmp.w	r9, #0
 80074d2:	d021      	beq.n	8007518 <__multiply+0x140>
 80074d4:	46ae      	mov	lr, r5
 80074d6:	f04f 0a00 	mov.w	sl, #0
 80074da:	682b      	ldr	r3, [r5, #0]
 80074dc:	f104 0c14 	add.w	ip, r4, #20
 80074e0:	f8bc b000 	ldrh.w	fp, [ip]
 80074e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	fb09 770b 	mla	r7, r9, fp, r7
 80074ee:	4457      	add	r7, sl
 80074f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80074f4:	f84e 3b04 	str.w	r3, [lr], #4
 80074f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80074fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007500:	f8be 3000 	ldrh.w	r3, [lr]
 8007504:	4562      	cmp	r2, ip
 8007506:	fb09 330a 	mla	r3, r9, sl, r3
 800750a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800750e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007512:	d8e5      	bhi.n	80074e0 <__multiply+0x108>
 8007514:	9f01      	ldr	r7, [sp, #4]
 8007516:	51eb      	str	r3, [r5, r7]
 8007518:	3504      	adds	r5, #4
 800751a:	e79a      	b.n	8007452 <__multiply+0x7a>
 800751c:	3e01      	subs	r6, #1
 800751e:	e79c      	b.n	800745a <__multiply+0x82>
 8007520:	08008331 	.word	0x08008331
 8007524:	08008342 	.word	0x08008342

08007528 <__pow5mult>:
 8007528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800752c:	4615      	mov	r5, r2
 800752e:	f012 0203 	ands.w	r2, r2, #3
 8007532:	4607      	mov	r7, r0
 8007534:	460e      	mov	r6, r1
 8007536:	d007      	beq.n	8007548 <__pow5mult+0x20>
 8007538:	4c25      	ldr	r4, [pc, #148]	@ (80075d0 <__pow5mult+0xa8>)
 800753a:	3a01      	subs	r2, #1
 800753c:	2300      	movs	r3, #0
 800753e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007542:	f7ff fea1 	bl	8007288 <__multadd>
 8007546:	4606      	mov	r6, r0
 8007548:	10ad      	asrs	r5, r5, #2
 800754a:	d03d      	beq.n	80075c8 <__pow5mult+0xa0>
 800754c:	69fc      	ldr	r4, [r7, #28]
 800754e:	b97c      	cbnz	r4, 8007570 <__pow5mult+0x48>
 8007550:	2010      	movs	r0, #16
 8007552:	f7ff fd81 	bl	8007058 <malloc>
 8007556:	4602      	mov	r2, r0
 8007558:	61f8      	str	r0, [r7, #28]
 800755a:	b928      	cbnz	r0, 8007568 <__pow5mult+0x40>
 800755c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007560:	4b1c      	ldr	r3, [pc, #112]	@ (80075d4 <__pow5mult+0xac>)
 8007562:	481d      	ldr	r0, [pc, #116]	@ (80075d8 <__pow5mult+0xb0>)
 8007564:	f7fe f83c 	bl	80055e0 <__assert_func>
 8007568:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800756c:	6004      	str	r4, [r0, #0]
 800756e:	60c4      	str	r4, [r0, #12]
 8007570:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007574:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007578:	b94c      	cbnz	r4, 800758e <__pow5mult+0x66>
 800757a:	f240 2171 	movw	r1, #625	@ 0x271
 800757e:	4638      	mov	r0, r7
 8007580:	f7ff ff14 	bl	80073ac <__i2b>
 8007584:	2300      	movs	r3, #0
 8007586:	4604      	mov	r4, r0
 8007588:	f8c8 0008 	str.w	r0, [r8, #8]
 800758c:	6003      	str	r3, [r0, #0]
 800758e:	f04f 0900 	mov.w	r9, #0
 8007592:	07eb      	lsls	r3, r5, #31
 8007594:	d50a      	bpl.n	80075ac <__pow5mult+0x84>
 8007596:	4631      	mov	r1, r6
 8007598:	4622      	mov	r2, r4
 800759a:	4638      	mov	r0, r7
 800759c:	f7ff ff1c 	bl	80073d8 <__multiply>
 80075a0:	4680      	mov	r8, r0
 80075a2:	4631      	mov	r1, r6
 80075a4:	4638      	mov	r0, r7
 80075a6:	f7ff fe4d 	bl	8007244 <_Bfree>
 80075aa:	4646      	mov	r6, r8
 80075ac:	106d      	asrs	r5, r5, #1
 80075ae:	d00b      	beq.n	80075c8 <__pow5mult+0xa0>
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	b938      	cbnz	r0, 80075c4 <__pow5mult+0x9c>
 80075b4:	4622      	mov	r2, r4
 80075b6:	4621      	mov	r1, r4
 80075b8:	4638      	mov	r0, r7
 80075ba:	f7ff ff0d 	bl	80073d8 <__multiply>
 80075be:	6020      	str	r0, [r4, #0]
 80075c0:	f8c0 9000 	str.w	r9, [r0]
 80075c4:	4604      	mov	r4, r0
 80075c6:	e7e4      	b.n	8007592 <__pow5mult+0x6a>
 80075c8:	4630      	mov	r0, r6
 80075ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ce:	bf00      	nop
 80075d0:	0800839c 	.word	0x0800839c
 80075d4:	080082c2 	.word	0x080082c2
 80075d8:	08008342 	.word	0x08008342

080075dc <__lshift>:
 80075dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e0:	460c      	mov	r4, r1
 80075e2:	4607      	mov	r7, r0
 80075e4:	4691      	mov	r9, r2
 80075e6:	6923      	ldr	r3, [r4, #16]
 80075e8:	6849      	ldr	r1, [r1, #4]
 80075ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075ee:	68a3      	ldr	r3, [r4, #8]
 80075f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075f4:	f108 0601 	add.w	r6, r8, #1
 80075f8:	42b3      	cmp	r3, r6
 80075fa:	db0b      	blt.n	8007614 <__lshift+0x38>
 80075fc:	4638      	mov	r0, r7
 80075fe:	f7ff fde1 	bl	80071c4 <_Balloc>
 8007602:	4605      	mov	r5, r0
 8007604:	b948      	cbnz	r0, 800761a <__lshift+0x3e>
 8007606:	4602      	mov	r2, r0
 8007608:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800760c:	4b27      	ldr	r3, [pc, #156]	@ (80076ac <__lshift+0xd0>)
 800760e:	4828      	ldr	r0, [pc, #160]	@ (80076b0 <__lshift+0xd4>)
 8007610:	f7fd ffe6 	bl	80055e0 <__assert_func>
 8007614:	3101      	adds	r1, #1
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	e7ee      	b.n	80075f8 <__lshift+0x1c>
 800761a:	2300      	movs	r3, #0
 800761c:	f100 0114 	add.w	r1, r0, #20
 8007620:	f100 0210 	add.w	r2, r0, #16
 8007624:	4618      	mov	r0, r3
 8007626:	4553      	cmp	r3, sl
 8007628:	db33      	blt.n	8007692 <__lshift+0xb6>
 800762a:	6920      	ldr	r0, [r4, #16]
 800762c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007630:	f104 0314 	add.w	r3, r4, #20
 8007634:	f019 091f 	ands.w	r9, r9, #31
 8007638:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800763c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007640:	d02b      	beq.n	800769a <__lshift+0xbe>
 8007642:	468a      	mov	sl, r1
 8007644:	2200      	movs	r2, #0
 8007646:	f1c9 0e20 	rsb	lr, r9, #32
 800764a:	6818      	ldr	r0, [r3, #0]
 800764c:	fa00 f009 	lsl.w	r0, r0, r9
 8007650:	4310      	orrs	r0, r2
 8007652:	f84a 0b04 	str.w	r0, [sl], #4
 8007656:	f853 2b04 	ldr.w	r2, [r3], #4
 800765a:	459c      	cmp	ip, r3
 800765c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007660:	d8f3      	bhi.n	800764a <__lshift+0x6e>
 8007662:	ebac 0304 	sub.w	r3, ip, r4
 8007666:	3b15      	subs	r3, #21
 8007668:	f023 0303 	bic.w	r3, r3, #3
 800766c:	3304      	adds	r3, #4
 800766e:	f104 0015 	add.w	r0, r4, #21
 8007672:	4584      	cmp	ip, r0
 8007674:	bf38      	it	cc
 8007676:	2304      	movcc	r3, #4
 8007678:	50ca      	str	r2, [r1, r3]
 800767a:	b10a      	cbz	r2, 8007680 <__lshift+0xa4>
 800767c:	f108 0602 	add.w	r6, r8, #2
 8007680:	3e01      	subs	r6, #1
 8007682:	4638      	mov	r0, r7
 8007684:	4621      	mov	r1, r4
 8007686:	612e      	str	r6, [r5, #16]
 8007688:	f7ff fddc 	bl	8007244 <_Bfree>
 800768c:	4628      	mov	r0, r5
 800768e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007692:	f842 0f04 	str.w	r0, [r2, #4]!
 8007696:	3301      	adds	r3, #1
 8007698:	e7c5      	b.n	8007626 <__lshift+0x4a>
 800769a:	3904      	subs	r1, #4
 800769c:	f853 2b04 	ldr.w	r2, [r3], #4
 80076a0:	459c      	cmp	ip, r3
 80076a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80076a6:	d8f9      	bhi.n	800769c <__lshift+0xc0>
 80076a8:	e7ea      	b.n	8007680 <__lshift+0xa4>
 80076aa:	bf00      	nop
 80076ac:	08008331 	.word	0x08008331
 80076b0:	08008342 	.word	0x08008342

080076b4 <__mcmp>:
 80076b4:	4603      	mov	r3, r0
 80076b6:	690a      	ldr	r2, [r1, #16]
 80076b8:	6900      	ldr	r0, [r0, #16]
 80076ba:	b530      	push	{r4, r5, lr}
 80076bc:	1a80      	subs	r0, r0, r2
 80076be:	d10e      	bne.n	80076de <__mcmp+0x2a>
 80076c0:	3314      	adds	r3, #20
 80076c2:	3114      	adds	r1, #20
 80076c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80076c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80076cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80076d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80076d4:	4295      	cmp	r5, r2
 80076d6:	d003      	beq.n	80076e0 <__mcmp+0x2c>
 80076d8:	d205      	bcs.n	80076e6 <__mcmp+0x32>
 80076da:	f04f 30ff 	mov.w	r0, #4294967295
 80076de:	bd30      	pop	{r4, r5, pc}
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	d3f3      	bcc.n	80076cc <__mcmp+0x18>
 80076e4:	e7fb      	b.n	80076de <__mcmp+0x2a>
 80076e6:	2001      	movs	r0, #1
 80076e8:	e7f9      	b.n	80076de <__mcmp+0x2a>
	...

080076ec <__mdiff>:
 80076ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f0:	4689      	mov	r9, r1
 80076f2:	4606      	mov	r6, r0
 80076f4:	4611      	mov	r1, r2
 80076f6:	4648      	mov	r0, r9
 80076f8:	4614      	mov	r4, r2
 80076fa:	f7ff ffdb 	bl	80076b4 <__mcmp>
 80076fe:	1e05      	subs	r5, r0, #0
 8007700:	d112      	bne.n	8007728 <__mdiff+0x3c>
 8007702:	4629      	mov	r1, r5
 8007704:	4630      	mov	r0, r6
 8007706:	f7ff fd5d 	bl	80071c4 <_Balloc>
 800770a:	4602      	mov	r2, r0
 800770c:	b928      	cbnz	r0, 800771a <__mdiff+0x2e>
 800770e:	f240 2137 	movw	r1, #567	@ 0x237
 8007712:	4b3e      	ldr	r3, [pc, #248]	@ (800780c <__mdiff+0x120>)
 8007714:	483e      	ldr	r0, [pc, #248]	@ (8007810 <__mdiff+0x124>)
 8007716:	f7fd ff63 	bl	80055e0 <__assert_func>
 800771a:	2301      	movs	r3, #1
 800771c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007720:	4610      	mov	r0, r2
 8007722:	b003      	add	sp, #12
 8007724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007728:	bfbc      	itt	lt
 800772a:	464b      	movlt	r3, r9
 800772c:	46a1      	movlt	r9, r4
 800772e:	4630      	mov	r0, r6
 8007730:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007734:	bfba      	itte	lt
 8007736:	461c      	movlt	r4, r3
 8007738:	2501      	movlt	r5, #1
 800773a:	2500      	movge	r5, #0
 800773c:	f7ff fd42 	bl	80071c4 <_Balloc>
 8007740:	4602      	mov	r2, r0
 8007742:	b918      	cbnz	r0, 800774c <__mdiff+0x60>
 8007744:	f240 2145 	movw	r1, #581	@ 0x245
 8007748:	4b30      	ldr	r3, [pc, #192]	@ (800780c <__mdiff+0x120>)
 800774a:	e7e3      	b.n	8007714 <__mdiff+0x28>
 800774c:	f100 0b14 	add.w	fp, r0, #20
 8007750:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007754:	f109 0310 	add.w	r3, r9, #16
 8007758:	60c5      	str	r5, [r0, #12]
 800775a:	f04f 0c00 	mov.w	ip, #0
 800775e:	f109 0514 	add.w	r5, r9, #20
 8007762:	46d9      	mov	r9, fp
 8007764:	6926      	ldr	r6, [r4, #16]
 8007766:	f104 0e14 	add.w	lr, r4, #20
 800776a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800776e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007772:	9301      	str	r3, [sp, #4]
 8007774:	9b01      	ldr	r3, [sp, #4]
 8007776:	f85e 0b04 	ldr.w	r0, [lr], #4
 800777a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800777e:	b281      	uxth	r1, r0
 8007780:	9301      	str	r3, [sp, #4]
 8007782:	fa1f f38a 	uxth.w	r3, sl
 8007786:	1a5b      	subs	r3, r3, r1
 8007788:	0c00      	lsrs	r0, r0, #16
 800778a:	4463      	add	r3, ip
 800778c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007790:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007794:	b29b      	uxth	r3, r3
 8007796:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800779a:	4576      	cmp	r6, lr
 800779c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077a0:	f849 3b04 	str.w	r3, [r9], #4
 80077a4:	d8e6      	bhi.n	8007774 <__mdiff+0x88>
 80077a6:	1b33      	subs	r3, r6, r4
 80077a8:	3b15      	subs	r3, #21
 80077aa:	f023 0303 	bic.w	r3, r3, #3
 80077ae:	3415      	adds	r4, #21
 80077b0:	3304      	adds	r3, #4
 80077b2:	42a6      	cmp	r6, r4
 80077b4:	bf38      	it	cc
 80077b6:	2304      	movcc	r3, #4
 80077b8:	441d      	add	r5, r3
 80077ba:	445b      	add	r3, fp
 80077bc:	461e      	mov	r6, r3
 80077be:	462c      	mov	r4, r5
 80077c0:	4544      	cmp	r4, r8
 80077c2:	d30e      	bcc.n	80077e2 <__mdiff+0xf6>
 80077c4:	f108 0103 	add.w	r1, r8, #3
 80077c8:	1b49      	subs	r1, r1, r5
 80077ca:	f021 0103 	bic.w	r1, r1, #3
 80077ce:	3d03      	subs	r5, #3
 80077d0:	45a8      	cmp	r8, r5
 80077d2:	bf38      	it	cc
 80077d4:	2100      	movcc	r1, #0
 80077d6:	440b      	add	r3, r1
 80077d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077dc:	b199      	cbz	r1, 8007806 <__mdiff+0x11a>
 80077de:	6117      	str	r7, [r2, #16]
 80077e0:	e79e      	b.n	8007720 <__mdiff+0x34>
 80077e2:	46e6      	mov	lr, ip
 80077e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80077e8:	fa1f fc81 	uxth.w	ip, r1
 80077ec:	44f4      	add	ip, lr
 80077ee:	0c08      	lsrs	r0, r1, #16
 80077f0:	4471      	add	r1, lr
 80077f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80077f6:	b289      	uxth	r1, r1
 80077f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80077fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007800:	f846 1b04 	str.w	r1, [r6], #4
 8007804:	e7dc      	b.n	80077c0 <__mdiff+0xd4>
 8007806:	3f01      	subs	r7, #1
 8007808:	e7e6      	b.n	80077d8 <__mdiff+0xec>
 800780a:	bf00      	nop
 800780c:	08008331 	.word	0x08008331
 8007810:	08008342 	.word	0x08008342

08007814 <__d2b>:
 8007814:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007818:	2101      	movs	r1, #1
 800781a:	4690      	mov	r8, r2
 800781c:	4699      	mov	r9, r3
 800781e:	9e08      	ldr	r6, [sp, #32]
 8007820:	f7ff fcd0 	bl	80071c4 <_Balloc>
 8007824:	4604      	mov	r4, r0
 8007826:	b930      	cbnz	r0, 8007836 <__d2b+0x22>
 8007828:	4602      	mov	r2, r0
 800782a:	f240 310f 	movw	r1, #783	@ 0x30f
 800782e:	4b23      	ldr	r3, [pc, #140]	@ (80078bc <__d2b+0xa8>)
 8007830:	4823      	ldr	r0, [pc, #140]	@ (80078c0 <__d2b+0xac>)
 8007832:	f7fd fed5 	bl	80055e0 <__assert_func>
 8007836:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800783a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800783e:	b10d      	cbz	r5, 8007844 <__d2b+0x30>
 8007840:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	f1b8 0300 	subs.w	r3, r8, #0
 800784a:	d024      	beq.n	8007896 <__d2b+0x82>
 800784c:	4668      	mov	r0, sp
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	f7ff fd7f 	bl	8007352 <__lo0bits>
 8007854:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007858:	b1d8      	cbz	r0, 8007892 <__d2b+0x7e>
 800785a:	f1c0 0320 	rsb	r3, r0, #32
 800785e:	fa02 f303 	lsl.w	r3, r2, r3
 8007862:	430b      	orrs	r3, r1
 8007864:	40c2      	lsrs	r2, r0
 8007866:	6163      	str	r3, [r4, #20]
 8007868:	9201      	str	r2, [sp, #4]
 800786a:	9b01      	ldr	r3, [sp, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	bf0c      	ite	eq
 8007870:	2201      	moveq	r2, #1
 8007872:	2202      	movne	r2, #2
 8007874:	61a3      	str	r3, [r4, #24]
 8007876:	6122      	str	r2, [r4, #16]
 8007878:	b1ad      	cbz	r5, 80078a6 <__d2b+0x92>
 800787a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800787e:	4405      	add	r5, r0
 8007880:	6035      	str	r5, [r6, #0]
 8007882:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007888:	6018      	str	r0, [r3, #0]
 800788a:	4620      	mov	r0, r4
 800788c:	b002      	add	sp, #8
 800788e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007892:	6161      	str	r1, [r4, #20]
 8007894:	e7e9      	b.n	800786a <__d2b+0x56>
 8007896:	a801      	add	r0, sp, #4
 8007898:	f7ff fd5b 	bl	8007352 <__lo0bits>
 800789c:	9b01      	ldr	r3, [sp, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	6163      	str	r3, [r4, #20]
 80078a2:	3020      	adds	r0, #32
 80078a4:	e7e7      	b.n	8007876 <__d2b+0x62>
 80078a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80078aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078ae:	6030      	str	r0, [r6, #0]
 80078b0:	6918      	ldr	r0, [r3, #16]
 80078b2:	f7ff fd2f 	bl	8007314 <__hi0bits>
 80078b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078ba:	e7e4      	b.n	8007886 <__d2b+0x72>
 80078bc:	08008331 	.word	0x08008331
 80078c0:	08008342 	.word	0x08008342

080078c4 <__sfputc_r>:
 80078c4:	6893      	ldr	r3, [r2, #8]
 80078c6:	b410      	push	{r4}
 80078c8:	3b01      	subs	r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	6093      	str	r3, [r2, #8]
 80078ce:	da07      	bge.n	80078e0 <__sfputc_r+0x1c>
 80078d0:	6994      	ldr	r4, [r2, #24]
 80078d2:	42a3      	cmp	r3, r4
 80078d4:	db01      	blt.n	80078da <__sfputc_r+0x16>
 80078d6:	290a      	cmp	r1, #10
 80078d8:	d102      	bne.n	80078e0 <__sfputc_r+0x1c>
 80078da:	bc10      	pop	{r4}
 80078dc:	f000 b9da 	b.w	8007c94 <__swbuf_r>
 80078e0:	6813      	ldr	r3, [r2, #0]
 80078e2:	1c58      	adds	r0, r3, #1
 80078e4:	6010      	str	r0, [r2, #0]
 80078e6:	7019      	strb	r1, [r3, #0]
 80078e8:	4608      	mov	r0, r1
 80078ea:	bc10      	pop	{r4}
 80078ec:	4770      	bx	lr

080078ee <__sfputs_r>:
 80078ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f0:	4606      	mov	r6, r0
 80078f2:	460f      	mov	r7, r1
 80078f4:	4614      	mov	r4, r2
 80078f6:	18d5      	adds	r5, r2, r3
 80078f8:	42ac      	cmp	r4, r5
 80078fa:	d101      	bne.n	8007900 <__sfputs_r+0x12>
 80078fc:	2000      	movs	r0, #0
 80078fe:	e007      	b.n	8007910 <__sfputs_r+0x22>
 8007900:	463a      	mov	r2, r7
 8007902:	4630      	mov	r0, r6
 8007904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007908:	f7ff ffdc 	bl	80078c4 <__sfputc_r>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d1f3      	bne.n	80078f8 <__sfputs_r+0xa>
 8007910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007914 <_vfiprintf_r>:
 8007914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007918:	460d      	mov	r5, r1
 800791a:	4614      	mov	r4, r2
 800791c:	4698      	mov	r8, r3
 800791e:	4606      	mov	r6, r0
 8007920:	b09d      	sub	sp, #116	@ 0x74
 8007922:	b118      	cbz	r0, 800792c <_vfiprintf_r+0x18>
 8007924:	6a03      	ldr	r3, [r0, #32]
 8007926:	b90b      	cbnz	r3, 800792c <_vfiprintf_r+0x18>
 8007928:	f7fe fbce 	bl	80060c8 <__sinit>
 800792c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800792e:	07d9      	lsls	r1, r3, #31
 8007930:	d405      	bmi.n	800793e <_vfiprintf_r+0x2a>
 8007932:	89ab      	ldrh	r3, [r5, #12]
 8007934:	059a      	lsls	r2, r3, #22
 8007936:	d402      	bmi.n	800793e <_vfiprintf_r+0x2a>
 8007938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800793a:	f7fe fcdc 	bl	80062f6 <__retarget_lock_acquire_recursive>
 800793e:	89ab      	ldrh	r3, [r5, #12]
 8007940:	071b      	lsls	r3, r3, #28
 8007942:	d501      	bpl.n	8007948 <_vfiprintf_r+0x34>
 8007944:	692b      	ldr	r3, [r5, #16]
 8007946:	b99b      	cbnz	r3, 8007970 <_vfiprintf_r+0x5c>
 8007948:	4629      	mov	r1, r5
 800794a:	4630      	mov	r0, r6
 800794c:	f000 f9e0 	bl	8007d10 <__swsetup_r>
 8007950:	b170      	cbz	r0, 8007970 <_vfiprintf_r+0x5c>
 8007952:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007954:	07dc      	lsls	r4, r3, #31
 8007956:	d504      	bpl.n	8007962 <_vfiprintf_r+0x4e>
 8007958:	f04f 30ff 	mov.w	r0, #4294967295
 800795c:	b01d      	add	sp, #116	@ 0x74
 800795e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007962:	89ab      	ldrh	r3, [r5, #12]
 8007964:	0598      	lsls	r0, r3, #22
 8007966:	d4f7      	bmi.n	8007958 <_vfiprintf_r+0x44>
 8007968:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800796a:	f7fe fcc5 	bl	80062f8 <__retarget_lock_release_recursive>
 800796e:	e7f3      	b.n	8007958 <_vfiprintf_r+0x44>
 8007970:	2300      	movs	r3, #0
 8007972:	9309      	str	r3, [sp, #36]	@ 0x24
 8007974:	2320      	movs	r3, #32
 8007976:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800797a:	2330      	movs	r3, #48	@ 0x30
 800797c:	f04f 0901 	mov.w	r9, #1
 8007980:	f8cd 800c 	str.w	r8, [sp, #12]
 8007984:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007b30 <_vfiprintf_r+0x21c>
 8007988:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800798c:	4623      	mov	r3, r4
 800798e:	469a      	mov	sl, r3
 8007990:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007994:	b10a      	cbz	r2, 800799a <_vfiprintf_r+0x86>
 8007996:	2a25      	cmp	r2, #37	@ 0x25
 8007998:	d1f9      	bne.n	800798e <_vfiprintf_r+0x7a>
 800799a:	ebba 0b04 	subs.w	fp, sl, r4
 800799e:	d00b      	beq.n	80079b8 <_vfiprintf_r+0xa4>
 80079a0:	465b      	mov	r3, fp
 80079a2:	4622      	mov	r2, r4
 80079a4:	4629      	mov	r1, r5
 80079a6:	4630      	mov	r0, r6
 80079a8:	f7ff ffa1 	bl	80078ee <__sfputs_r>
 80079ac:	3001      	adds	r0, #1
 80079ae:	f000 80a7 	beq.w	8007b00 <_vfiprintf_r+0x1ec>
 80079b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079b4:	445a      	add	r2, fp
 80079b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80079b8:	f89a 3000 	ldrb.w	r3, [sl]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 809f 	beq.w	8007b00 <_vfiprintf_r+0x1ec>
 80079c2:	2300      	movs	r3, #0
 80079c4:	f04f 32ff 	mov.w	r2, #4294967295
 80079c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079cc:	f10a 0a01 	add.w	sl, sl, #1
 80079d0:	9304      	str	r3, [sp, #16]
 80079d2:	9307      	str	r3, [sp, #28]
 80079d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80079da:	4654      	mov	r4, sl
 80079dc:	2205      	movs	r2, #5
 80079de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e2:	4853      	ldr	r0, [pc, #332]	@ (8007b30 <_vfiprintf_r+0x21c>)
 80079e4:	f7fe fc89 	bl	80062fa <memchr>
 80079e8:	9a04      	ldr	r2, [sp, #16]
 80079ea:	b9d8      	cbnz	r0, 8007a24 <_vfiprintf_r+0x110>
 80079ec:	06d1      	lsls	r1, r2, #27
 80079ee:	bf44      	itt	mi
 80079f0:	2320      	movmi	r3, #32
 80079f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079f6:	0713      	lsls	r3, r2, #28
 80079f8:	bf44      	itt	mi
 80079fa:	232b      	movmi	r3, #43	@ 0x2b
 80079fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a00:	f89a 3000 	ldrb.w	r3, [sl]
 8007a04:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a06:	d015      	beq.n	8007a34 <_vfiprintf_r+0x120>
 8007a08:	4654      	mov	r4, sl
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	f04f 0c0a 	mov.w	ip, #10
 8007a10:	9a07      	ldr	r2, [sp, #28]
 8007a12:	4621      	mov	r1, r4
 8007a14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a18:	3b30      	subs	r3, #48	@ 0x30
 8007a1a:	2b09      	cmp	r3, #9
 8007a1c:	d94b      	bls.n	8007ab6 <_vfiprintf_r+0x1a2>
 8007a1e:	b1b0      	cbz	r0, 8007a4e <_vfiprintf_r+0x13a>
 8007a20:	9207      	str	r2, [sp, #28]
 8007a22:	e014      	b.n	8007a4e <_vfiprintf_r+0x13a>
 8007a24:	eba0 0308 	sub.w	r3, r0, r8
 8007a28:	fa09 f303 	lsl.w	r3, r9, r3
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	46a2      	mov	sl, r4
 8007a30:	9304      	str	r3, [sp, #16]
 8007a32:	e7d2      	b.n	80079da <_vfiprintf_r+0xc6>
 8007a34:	9b03      	ldr	r3, [sp, #12]
 8007a36:	1d19      	adds	r1, r3, #4
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	9103      	str	r1, [sp, #12]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	bfbb      	ittet	lt
 8007a40:	425b      	neglt	r3, r3
 8007a42:	f042 0202 	orrlt.w	r2, r2, #2
 8007a46:	9307      	strge	r3, [sp, #28]
 8007a48:	9307      	strlt	r3, [sp, #28]
 8007a4a:	bfb8      	it	lt
 8007a4c:	9204      	strlt	r2, [sp, #16]
 8007a4e:	7823      	ldrb	r3, [r4, #0]
 8007a50:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a52:	d10a      	bne.n	8007a6a <_vfiprintf_r+0x156>
 8007a54:	7863      	ldrb	r3, [r4, #1]
 8007a56:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a58:	d132      	bne.n	8007ac0 <_vfiprintf_r+0x1ac>
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	3402      	adds	r4, #2
 8007a5e:	1d1a      	adds	r2, r3, #4
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	9203      	str	r2, [sp, #12]
 8007a64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a68:	9305      	str	r3, [sp, #20]
 8007a6a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007b34 <_vfiprintf_r+0x220>
 8007a6e:	2203      	movs	r2, #3
 8007a70:	4650      	mov	r0, sl
 8007a72:	7821      	ldrb	r1, [r4, #0]
 8007a74:	f7fe fc41 	bl	80062fa <memchr>
 8007a78:	b138      	cbz	r0, 8007a8a <_vfiprintf_r+0x176>
 8007a7a:	2240      	movs	r2, #64	@ 0x40
 8007a7c:	9b04      	ldr	r3, [sp, #16]
 8007a7e:	eba0 000a 	sub.w	r0, r0, sl
 8007a82:	4082      	lsls	r2, r0
 8007a84:	4313      	orrs	r3, r2
 8007a86:	3401      	adds	r4, #1
 8007a88:	9304      	str	r3, [sp, #16]
 8007a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a8e:	2206      	movs	r2, #6
 8007a90:	4829      	ldr	r0, [pc, #164]	@ (8007b38 <_vfiprintf_r+0x224>)
 8007a92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a96:	f7fe fc30 	bl	80062fa <memchr>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d03f      	beq.n	8007b1e <_vfiprintf_r+0x20a>
 8007a9e:	4b27      	ldr	r3, [pc, #156]	@ (8007b3c <_vfiprintf_r+0x228>)
 8007aa0:	bb1b      	cbnz	r3, 8007aea <_vfiprintf_r+0x1d6>
 8007aa2:	9b03      	ldr	r3, [sp, #12]
 8007aa4:	3307      	adds	r3, #7
 8007aa6:	f023 0307 	bic.w	r3, r3, #7
 8007aaa:	3308      	adds	r3, #8
 8007aac:	9303      	str	r3, [sp, #12]
 8007aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ab0:	443b      	add	r3, r7
 8007ab2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ab4:	e76a      	b.n	800798c <_vfiprintf_r+0x78>
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	2001      	movs	r0, #1
 8007aba:	fb0c 3202 	mla	r2, ip, r2, r3
 8007abe:	e7a8      	b.n	8007a12 <_vfiprintf_r+0xfe>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	f04f 0c0a 	mov.w	ip, #10
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	3401      	adds	r4, #1
 8007aca:	9305      	str	r3, [sp, #20]
 8007acc:	4620      	mov	r0, r4
 8007ace:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ad2:	3a30      	subs	r2, #48	@ 0x30
 8007ad4:	2a09      	cmp	r2, #9
 8007ad6:	d903      	bls.n	8007ae0 <_vfiprintf_r+0x1cc>
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d0c6      	beq.n	8007a6a <_vfiprintf_r+0x156>
 8007adc:	9105      	str	r1, [sp, #20]
 8007ade:	e7c4      	b.n	8007a6a <_vfiprintf_r+0x156>
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ae8:	e7f0      	b.n	8007acc <_vfiprintf_r+0x1b8>
 8007aea:	ab03      	add	r3, sp, #12
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	462a      	mov	r2, r5
 8007af0:	4630      	mov	r0, r6
 8007af2:	4b13      	ldr	r3, [pc, #76]	@ (8007b40 <_vfiprintf_r+0x22c>)
 8007af4:	a904      	add	r1, sp, #16
 8007af6:	f7fd fe9d 	bl	8005834 <_printf_float>
 8007afa:	4607      	mov	r7, r0
 8007afc:	1c78      	adds	r0, r7, #1
 8007afe:	d1d6      	bne.n	8007aae <_vfiprintf_r+0x19a>
 8007b00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b02:	07d9      	lsls	r1, r3, #31
 8007b04:	d405      	bmi.n	8007b12 <_vfiprintf_r+0x1fe>
 8007b06:	89ab      	ldrh	r3, [r5, #12]
 8007b08:	059a      	lsls	r2, r3, #22
 8007b0a:	d402      	bmi.n	8007b12 <_vfiprintf_r+0x1fe>
 8007b0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b0e:	f7fe fbf3 	bl	80062f8 <__retarget_lock_release_recursive>
 8007b12:	89ab      	ldrh	r3, [r5, #12]
 8007b14:	065b      	lsls	r3, r3, #25
 8007b16:	f53f af1f 	bmi.w	8007958 <_vfiprintf_r+0x44>
 8007b1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b1c:	e71e      	b.n	800795c <_vfiprintf_r+0x48>
 8007b1e:	ab03      	add	r3, sp, #12
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	462a      	mov	r2, r5
 8007b24:	4630      	mov	r0, r6
 8007b26:	4b06      	ldr	r3, [pc, #24]	@ (8007b40 <_vfiprintf_r+0x22c>)
 8007b28:	a904      	add	r1, sp, #16
 8007b2a:	f7fe f921 	bl	8005d70 <_printf_i>
 8007b2e:	e7e4      	b.n	8007afa <_vfiprintf_r+0x1e6>
 8007b30:	08008498 	.word	0x08008498
 8007b34:	0800849e 	.word	0x0800849e
 8007b38:	080084a2 	.word	0x080084a2
 8007b3c:	08005835 	.word	0x08005835
 8007b40:	080078ef 	.word	0x080078ef

08007b44 <__sflush_r>:
 8007b44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4a:	0716      	lsls	r6, r2, #28
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	460c      	mov	r4, r1
 8007b50:	d454      	bmi.n	8007bfc <__sflush_r+0xb8>
 8007b52:	684b      	ldr	r3, [r1, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	dc02      	bgt.n	8007b5e <__sflush_r+0x1a>
 8007b58:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	dd48      	ble.n	8007bf0 <__sflush_r+0xac>
 8007b5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b60:	2e00      	cmp	r6, #0
 8007b62:	d045      	beq.n	8007bf0 <__sflush_r+0xac>
 8007b64:	2300      	movs	r3, #0
 8007b66:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b6a:	682f      	ldr	r7, [r5, #0]
 8007b6c:	6a21      	ldr	r1, [r4, #32]
 8007b6e:	602b      	str	r3, [r5, #0]
 8007b70:	d030      	beq.n	8007bd4 <__sflush_r+0x90>
 8007b72:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	0759      	lsls	r1, r3, #29
 8007b78:	d505      	bpl.n	8007b86 <__sflush_r+0x42>
 8007b7a:	6863      	ldr	r3, [r4, #4]
 8007b7c:	1ad2      	subs	r2, r2, r3
 8007b7e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b80:	b10b      	cbz	r3, 8007b86 <__sflush_r+0x42>
 8007b82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b84:	1ad2      	subs	r2, r2, r3
 8007b86:	2300      	movs	r3, #0
 8007b88:	4628      	mov	r0, r5
 8007b8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b8c:	6a21      	ldr	r1, [r4, #32]
 8007b8e:	47b0      	blx	r6
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	d106      	bne.n	8007ba4 <__sflush_r+0x60>
 8007b96:	6829      	ldr	r1, [r5, #0]
 8007b98:	291d      	cmp	r1, #29
 8007b9a:	d82b      	bhi.n	8007bf4 <__sflush_r+0xb0>
 8007b9c:	4a28      	ldr	r2, [pc, #160]	@ (8007c40 <__sflush_r+0xfc>)
 8007b9e:	410a      	asrs	r2, r1
 8007ba0:	07d6      	lsls	r6, r2, #31
 8007ba2:	d427      	bmi.n	8007bf4 <__sflush_r+0xb0>
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	6062      	str	r2, [r4, #4]
 8007ba8:	6922      	ldr	r2, [r4, #16]
 8007baa:	04d9      	lsls	r1, r3, #19
 8007bac:	6022      	str	r2, [r4, #0]
 8007bae:	d504      	bpl.n	8007bba <__sflush_r+0x76>
 8007bb0:	1c42      	adds	r2, r0, #1
 8007bb2:	d101      	bne.n	8007bb8 <__sflush_r+0x74>
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	b903      	cbnz	r3, 8007bba <__sflush_r+0x76>
 8007bb8:	6560      	str	r0, [r4, #84]	@ 0x54
 8007bba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bbc:	602f      	str	r7, [r5, #0]
 8007bbe:	b1b9      	cbz	r1, 8007bf0 <__sflush_r+0xac>
 8007bc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bc4:	4299      	cmp	r1, r3
 8007bc6:	d002      	beq.n	8007bce <__sflush_r+0x8a>
 8007bc8:	4628      	mov	r0, r5
 8007bca:	f7ff f9fd 	bl	8006fc8 <_free_r>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bd2:	e00d      	b.n	8007bf0 <__sflush_r+0xac>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	47b0      	blx	r6
 8007bda:	4602      	mov	r2, r0
 8007bdc:	1c50      	adds	r0, r2, #1
 8007bde:	d1c9      	bne.n	8007b74 <__sflush_r+0x30>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0c6      	beq.n	8007b74 <__sflush_r+0x30>
 8007be6:	2b1d      	cmp	r3, #29
 8007be8:	d001      	beq.n	8007bee <__sflush_r+0xaa>
 8007bea:	2b16      	cmp	r3, #22
 8007bec:	d11d      	bne.n	8007c2a <__sflush_r+0xe6>
 8007bee:	602f      	str	r7, [r5, #0]
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	e021      	b.n	8007c38 <__sflush_r+0xf4>
 8007bf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bf8:	b21b      	sxth	r3, r3
 8007bfa:	e01a      	b.n	8007c32 <__sflush_r+0xee>
 8007bfc:	690f      	ldr	r7, [r1, #16]
 8007bfe:	2f00      	cmp	r7, #0
 8007c00:	d0f6      	beq.n	8007bf0 <__sflush_r+0xac>
 8007c02:	0793      	lsls	r3, r2, #30
 8007c04:	bf18      	it	ne
 8007c06:	2300      	movne	r3, #0
 8007c08:	680e      	ldr	r6, [r1, #0]
 8007c0a:	bf08      	it	eq
 8007c0c:	694b      	ldreq	r3, [r1, #20]
 8007c0e:	1bf6      	subs	r6, r6, r7
 8007c10:	600f      	str	r7, [r1, #0]
 8007c12:	608b      	str	r3, [r1, #8]
 8007c14:	2e00      	cmp	r6, #0
 8007c16:	ddeb      	ble.n	8007bf0 <__sflush_r+0xac>
 8007c18:	4633      	mov	r3, r6
 8007c1a:	463a      	mov	r2, r7
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	6a21      	ldr	r1, [r4, #32]
 8007c20:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007c24:	47e0      	blx	ip
 8007c26:	2800      	cmp	r0, #0
 8007c28:	dc07      	bgt.n	8007c3a <__sflush_r+0xf6>
 8007c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c32:	f04f 30ff 	mov.w	r0, #4294967295
 8007c36:	81a3      	strh	r3, [r4, #12]
 8007c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c3a:	4407      	add	r7, r0
 8007c3c:	1a36      	subs	r6, r6, r0
 8007c3e:	e7e9      	b.n	8007c14 <__sflush_r+0xd0>
 8007c40:	dfbffffe 	.word	0xdfbffffe

08007c44 <_fflush_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	690b      	ldr	r3, [r1, #16]
 8007c48:	4605      	mov	r5, r0
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	b913      	cbnz	r3, 8007c54 <_fflush_r+0x10>
 8007c4e:	2500      	movs	r5, #0
 8007c50:	4628      	mov	r0, r5
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
 8007c54:	b118      	cbz	r0, 8007c5e <_fflush_r+0x1a>
 8007c56:	6a03      	ldr	r3, [r0, #32]
 8007c58:	b90b      	cbnz	r3, 8007c5e <_fflush_r+0x1a>
 8007c5a:	f7fe fa35 	bl	80060c8 <__sinit>
 8007c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d0f3      	beq.n	8007c4e <_fflush_r+0xa>
 8007c66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c68:	07d0      	lsls	r0, r2, #31
 8007c6a:	d404      	bmi.n	8007c76 <_fflush_r+0x32>
 8007c6c:	0599      	lsls	r1, r3, #22
 8007c6e:	d402      	bmi.n	8007c76 <_fflush_r+0x32>
 8007c70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c72:	f7fe fb40 	bl	80062f6 <__retarget_lock_acquire_recursive>
 8007c76:	4628      	mov	r0, r5
 8007c78:	4621      	mov	r1, r4
 8007c7a:	f7ff ff63 	bl	8007b44 <__sflush_r>
 8007c7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c80:	4605      	mov	r5, r0
 8007c82:	07da      	lsls	r2, r3, #31
 8007c84:	d4e4      	bmi.n	8007c50 <_fflush_r+0xc>
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	059b      	lsls	r3, r3, #22
 8007c8a:	d4e1      	bmi.n	8007c50 <_fflush_r+0xc>
 8007c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c8e:	f7fe fb33 	bl	80062f8 <__retarget_lock_release_recursive>
 8007c92:	e7dd      	b.n	8007c50 <_fflush_r+0xc>

08007c94 <__swbuf_r>:
 8007c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c96:	460e      	mov	r6, r1
 8007c98:	4614      	mov	r4, r2
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	b118      	cbz	r0, 8007ca6 <__swbuf_r+0x12>
 8007c9e:	6a03      	ldr	r3, [r0, #32]
 8007ca0:	b90b      	cbnz	r3, 8007ca6 <__swbuf_r+0x12>
 8007ca2:	f7fe fa11 	bl	80060c8 <__sinit>
 8007ca6:	69a3      	ldr	r3, [r4, #24]
 8007ca8:	60a3      	str	r3, [r4, #8]
 8007caa:	89a3      	ldrh	r3, [r4, #12]
 8007cac:	071a      	lsls	r2, r3, #28
 8007cae:	d501      	bpl.n	8007cb4 <__swbuf_r+0x20>
 8007cb0:	6923      	ldr	r3, [r4, #16]
 8007cb2:	b943      	cbnz	r3, 8007cc6 <__swbuf_r+0x32>
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	f000 f82a 	bl	8007d10 <__swsetup_r>
 8007cbc:	b118      	cbz	r0, 8007cc6 <__swbuf_r+0x32>
 8007cbe:	f04f 37ff 	mov.w	r7, #4294967295
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	6922      	ldr	r2, [r4, #16]
 8007cca:	b2f6      	uxtb	r6, r6
 8007ccc:	1a98      	subs	r0, r3, r2
 8007cce:	6963      	ldr	r3, [r4, #20]
 8007cd0:	4637      	mov	r7, r6
 8007cd2:	4283      	cmp	r3, r0
 8007cd4:	dc05      	bgt.n	8007ce2 <__swbuf_r+0x4e>
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f7ff ffb3 	bl	8007c44 <_fflush_r>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d1ed      	bne.n	8007cbe <__swbuf_r+0x2a>
 8007ce2:	68a3      	ldr	r3, [r4, #8]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	60a3      	str	r3, [r4, #8]
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	6022      	str	r2, [r4, #0]
 8007cee:	701e      	strb	r6, [r3, #0]
 8007cf0:	6962      	ldr	r2, [r4, #20]
 8007cf2:	1c43      	adds	r3, r0, #1
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d004      	beq.n	8007d02 <__swbuf_r+0x6e>
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	07db      	lsls	r3, r3, #31
 8007cfc:	d5e1      	bpl.n	8007cc2 <__swbuf_r+0x2e>
 8007cfe:	2e0a      	cmp	r6, #10
 8007d00:	d1df      	bne.n	8007cc2 <__swbuf_r+0x2e>
 8007d02:	4621      	mov	r1, r4
 8007d04:	4628      	mov	r0, r5
 8007d06:	f7ff ff9d 	bl	8007c44 <_fflush_r>
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	d0d9      	beq.n	8007cc2 <__swbuf_r+0x2e>
 8007d0e:	e7d6      	b.n	8007cbe <__swbuf_r+0x2a>

08007d10 <__swsetup_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4b29      	ldr	r3, [pc, #164]	@ (8007db8 <__swsetup_r+0xa8>)
 8007d14:	4605      	mov	r5, r0
 8007d16:	6818      	ldr	r0, [r3, #0]
 8007d18:	460c      	mov	r4, r1
 8007d1a:	b118      	cbz	r0, 8007d24 <__swsetup_r+0x14>
 8007d1c:	6a03      	ldr	r3, [r0, #32]
 8007d1e:	b90b      	cbnz	r3, 8007d24 <__swsetup_r+0x14>
 8007d20:	f7fe f9d2 	bl	80060c8 <__sinit>
 8007d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d28:	0719      	lsls	r1, r3, #28
 8007d2a:	d422      	bmi.n	8007d72 <__swsetup_r+0x62>
 8007d2c:	06da      	lsls	r2, r3, #27
 8007d2e:	d407      	bmi.n	8007d40 <__swsetup_r+0x30>
 8007d30:	2209      	movs	r2, #9
 8007d32:	602a      	str	r2, [r5, #0]
 8007d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3c:	81a3      	strh	r3, [r4, #12]
 8007d3e:	e033      	b.n	8007da8 <__swsetup_r+0x98>
 8007d40:	0758      	lsls	r0, r3, #29
 8007d42:	d512      	bpl.n	8007d6a <__swsetup_r+0x5a>
 8007d44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d46:	b141      	cbz	r1, 8007d5a <__swsetup_r+0x4a>
 8007d48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d4c:	4299      	cmp	r1, r3
 8007d4e:	d002      	beq.n	8007d56 <__swsetup_r+0x46>
 8007d50:	4628      	mov	r0, r5
 8007d52:	f7ff f939 	bl	8006fc8 <_free_r>
 8007d56:	2300      	movs	r3, #0
 8007d58:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d60:	81a3      	strh	r3, [r4, #12]
 8007d62:	2300      	movs	r3, #0
 8007d64:	6063      	str	r3, [r4, #4]
 8007d66:	6923      	ldr	r3, [r4, #16]
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	f043 0308 	orr.w	r3, r3, #8
 8007d70:	81a3      	strh	r3, [r4, #12]
 8007d72:	6923      	ldr	r3, [r4, #16]
 8007d74:	b94b      	cbnz	r3, 8007d8a <__swsetup_r+0x7a>
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d80:	d003      	beq.n	8007d8a <__swsetup_r+0x7a>
 8007d82:	4621      	mov	r1, r4
 8007d84:	4628      	mov	r0, r5
 8007d86:	f000 f8d3 	bl	8007f30 <__smakebuf_r>
 8007d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8e:	f013 0201 	ands.w	r2, r3, #1
 8007d92:	d00a      	beq.n	8007daa <__swsetup_r+0x9a>
 8007d94:	2200      	movs	r2, #0
 8007d96:	60a2      	str	r2, [r4, #8]
 8007d98:	6962      	ldr	r2, [r4, #20]
 8007d9a:	4252      	negs	r2, r2
 8007d9c:	61a2      	str	r2, [r4, #24]
 8007d9e:	6922      	ldr	r2, [r4, #16]
 8007da0:	b942      	cbnz	r2, 8007db4 <__swsetup_r+0xa4>
 8007da2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007da6:	d1c5      	bne.n	8007d34 <__swsetup_r+0x24>
 8007da8:	bd38      	pop	{r3, r4, r5, pc}
 8007daa:	0799      	lsls	r1, r3, #30
 8007dac:	bf58      	it	pl
 8007dae:	6962      	ldrpl	r2, [r4, #20]
 8007db0:	60a2      	str	r2, [r4, #8]
 8007db2:	e7f4      	b.n	8007d9e <__swsetup_r+0x8e>
 8007db4:	2000      	movs	r0, #0
 8007db6:	e7f7      	b.n	8007da8 <__swsetup_r+0x98>
 8007db8:	200000e4 	.word	0x200000e4

08007dbc <_raise_r>:
 8007dbc:	291f      	cmp	r1, #31
 8007dbe:	b538      	push	{r3, r4, r5, lr}
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	d904      	bls.n	8007dd0 <_raise_r+0x14>
 8007dc6:	2316      	movs	r3, #22
 8007dc8:	6003      	str	r3, [r0, #0]
 8007dca:	f04f 30ff 	mov.w	r0, #4294967295
 8007dce:	bd38      	pop	{r3, r4, r5, pc}
 8007dd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007dd2:	b112      	cbz	r2, 8007dda <_raise_r+0x1e>
 8007dd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007dd8:	b94b      	cbnz	r3, 8007dee <_raise_r+0x32>
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f000 f830 	bl	8007e40 <_getpid_r>
 8007de0:	4622      	mov	r2, r4
 8007de2:	4601      	mov	r1, r0
 8007de4:	4628      	mov	r0, r5
 8007de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dea:	f000 b817 	b.w	8007e1c <_kill_r>
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d00a      	beq.n	8007e08 <_raise_r+0x4c>
 8007df2:	1c59      	adds	r1, r3, #1
 8007df4:	d103      	bne.n	8007dfe <_raise_r+0x42>
 8007df6:	2316      	movs	r3, #22
 8007df8:	6003      	str	r3, [r0, #0]
 8007dfa:	2001      	movs	r0, #1
 8007dfc:	e7e7      	b.n	8007dce <_raise_r+0x12>
 8007dfe:	2100      	movs	r1, #0
 8007e00:	4620      	mov	r0, r4
 8007e02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007e06:	4798      	blx	r3
 8007e08:	2000      	movs	r0, #0
 8007e0a:	e7e0      	b.n	8007dce <_raise_r+0x12>

08007e0c <raise>:
 8007e0c:	4b02      	ldr	r3, [pc, #8]	@ (8007e18 <raise+0xc>)
 8007e0e:	4601      	mov	r1, r0
 8007e10:	6818      	ldr	r0, [r3, #0]
 8007e12:	f7ff bfd3 	b.w	8007dbc <_raise_r>
 8007e16:	bf00      	nop
 8007e18:	200000e4 	.word	0x200000e4

08007e1c <_kill_r>:
 8007e1c:	b538      	push	{r3, r4, r5, lr}
 8007e1e:	2300      	movs	r3, #0
 8007e20:	4d06      	ldr	r5, [pc, #24]	@ (8007e3c <_kill_r+0x20>)
 8007e22:	4604      	mov	r4, r0
 8007e24:	4608      	mov	r0, r1
 8007e26:	4611      	mov	r1, r2
 8007e28:	602b      	str	r3, [r5, #0]
 8007e2a:	f7fa fd26 	bl	800287a <_kill>
 8007e2e:	1c43      	adds	r3, r0, #1
 8007e30:	d102      	bne.n	8007e38 <_kill_r+0x1c>
 8007e32:	682b      	ldr	r3, [r5, #0]
 8007e34:	b103      	cbz	r3, 8007e38 <_kill_r+0x1c>
 8007e36:	6023      	str	r3, [r4, #0]
 8007e38:	bd38      	pop	{r3, r4, r5, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20000a74 	.word	0x20000a74

08007e40 <_getpid_r>:
 8007e40:	f7fa bd14 	b.w	800286c <_getpid>

08007e44 <_sbrk_r>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	2300      	movs	r3, #0
 8007e48:	4d05      	ldr	r5, [pc, #20]	@ (8007e60 <_sbrk_r+0x1c>)
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	4608      	mov	r0, r1
 8007e4e:	602b      	str	r3, [r5, #0]
 8007e50:	f7fa fd98 	bl	8002984 <_sbrk>
 8007e54:	1c43      	adds	r3, r0, #1
 8007e56:	d102      	bne.n	8007e5e <_sbrk_r+0x1a>
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	b103      	cbz	r3, 8007e5e <_sbrk_r+0x1a>
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	bd38      	pop	{r3, r4, r5, pc}
 8007e60:	20000a74 	.word	0x20000a74

08007e64 <memcpy>:
 8007e64:	440a      	add	r2, r1
 8007e66:	4291      	cmp	r1, r2
 8007e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e6c:	d100      	bne.n	8007e70 <memcpy+0xc>
 8007e6e:	4770      	bx	lr
 8007e70:	b510      	push	{r4, lr}
 8007e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e76:	4291      	cmp	r1, r2
 8007e78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e7c:	d1f9      	bne.n	8007e72 <memcpy+0xe>
 8007e7e:	bd10      	pop	{r4, pc}

08007e80 <_calloc_r>:
 8007e80:	b570      	push	{r4, r5, r6, lr}
 8007e82:	fba1 5402 	umull	r5, r4, r1, r2
 8007e86:	b93c      	cbnz	r4, 8007e98 <_calloc_r+0x18>
 8007e88:	4629      	mov	r1, r5
 8007e8a:	f7ff f90f 	bl	80070ac <_malloc_r>
 8007e8e:	4606      	mov	r6, r0
 8007e90:	b928      	cbnz	r0, 8007e9e <_calloc_r+0x1e>
 8007e92:	2600      	movs	r6, #0
 8007e94:	4630      	mov	r0, r6
 8007e96:	bd70      	pop	{r4, r5, r6, pc}
 8007e98:	220c      	movs	r2, #12
 8007e9a:	6002      	str	r2, [r0, #0]
 8007e9c:	e7f9      	b.n	8007e92 <_calloc_r+0x12>
 8007e9e:	462a      	mov	r2, r5
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	f7fe f99c 	bl	80061de <memset>
 8007ea6:	e7f5      	b.n	8007e94 <_calloc_r+0x14>

08007ea8 <__ascii_mbtowc>:
 8007ea8:	b082      	sub	sp, #8
 8007eaa:	b901      	cbnz	r1, 8007eae <__ascii_mbtowc+0x6>
 8007eac:	a901      	add	r1, sp, #4
 8007eae:	b142      	cbz	r2, 8007ec2 <__ascii_mbtowc+0x1a>
 8007eb0:	b14b      	cbz	r3, 8007ec6 <__ascii_mbtowc+0x1e>
 8007eb2:	7813      	ldrb	r3, [r2, #0]
 8007eb4:	600b      	str	r3, [r1, #0]
 8007eb6:	7812      	ldrb	r2, [r2, #0]
 8007eb8:	1e10      	subs	r0, r2, #0
 8007eba:	bf18      	it	ne
 8007ebc:	2001      	movne	r0, #1
 8007ebe:	b002      	add	sp, #8
 8007ec0:	4770      	bx	lr
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	e7fb      	b.n	8007ebe <__ascii_mbtowc+0x16>
 8007ec6:	f06f 0001 	mvn.w	r0, #1
 8007eca:	e7f8      	b.n	8007ebe <__ascii_mbtowc+0x16>

08007ecc <__ascii_wctomb>:
 8007ecc:	4603      	mov	r3, r0
 8007ece:	4608      	mov	r0, r1
 8007ed0:	b141      	cbz	r1, 8007ee4 <__ascii_wctomb+0x18>
 8007ed2:	2aff      	cmp	r2, #255	@ 0xff
 8007ed4:	d904      	bls.n	8007ee0 <__ascii_wctomb+0x14>
 8007ed6:	228a      	movs	r2, #138	@ 0x8a
 8007ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	4770      	bx	lr
 8007ee0:	2001      	movs	r0, #1
 8007ee2:	700a      	strb	r2, [r1, #0]
 8007ee4:	4770      	bx	lr

08007ee6 <__swhatbuf_r>:
 8007ee6:	b570      	push	{r4, r5, r6, lr}
 8007ee8:	460c      	mov	r4, r1
 8007eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eee:	4615      	mov	r5, r2
 8007ef0:	2900      	cmp	r1, #0
 8007ef2:	461e      	mov	r6, r3
 8007ef4:	b096      	sub	sp, #88	@ 0x58
 8007ef6:	da0c      	bge.n	8007f12 <__swhatbuf_r+0x2c>
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	2100      	movs	r1, #0
 8007efc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007f00:	bf14      	ite	ne
 8007f02:	2340      	movne	r3, #64	@ 0x40
 8007f04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f08:	2000      	movs	r0, #0
 8007f0a:	6031      	str	r1, [r6, #0]
 8007f0c:	602b      	str	r3, [r5, #0]
 8007f0e:	b016      	add	sp, #88	@ 0x58
 8007f10:	bd70      	pop	{r4, r5, r6, pc}
 8007f12:	466a      	mov	r2, sp
 8007f14:	f000 f848 	bl	8007fa8 <_fstat_r>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	dbed      	blt.n	8007ef8 <__swhatbuf_r+0x12>
 8007f1c:	9901      	ldr	r1, [sp, #4]
 8007f1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f26:	4259      	negs	r1, r3
 8007f28:	4159      	adcs	r1, r3
 8007f2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f2e:	e7eb      	b.n	8007f08 <__swhatbuf_r+0x22>

08007f30 <__smakebuf_r>:
 8007f30:	898b      	ldrh	r3, [r1, #12]
 8007f32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f34:	079d      	lsls	r5, r3, #30
 8007f36:	4606      	mov	r6, r0
 8007f38:	460c      	mov	r4, r1
 8007f3a:	d507      	bpl.n	8007f4c <__smakebuf_r+0x1c>
 8007f3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f40:	6023      	str	r3, [r4, #0]
 8007f42:	6123      	str	r3, [r4, #16]
 8007f44:	2301      	movs	r3, #1
 8007f46:	6163      	str	r3, [r4, #20]
 8007f48:	b003      	add	sp, #12
 8007f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f4c:	466a      	mov	r2, sp
 8007f4e:	ab01      	add	r3, sp, #4
 8007f50:	f7ff ffc9 	bl	8007ee6 <__swhatbuf_r>
 8007f54:	9f00      	ldr	r7, [sp, #0]
 8007f56:	4605      	mov	r5, r0
 8007f58:	4639      	mov	r1, r7
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f7ff f8a6 	bl	80070ac <_malloc_r>
 8007f60:	b948      	cbnz	r0, 8007f76 <__smakebuf_r+0x46>
 8007f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f66:	059a      	lsls	r2, r3, #22
 8007f68:	d4ee      	bmi.n	8007f48 <__smakebuf_r+0x18>
 8007f6a:	f023 0303 	bic.w	r3, r3, #3
 8007f6e:	f043 0302 	orr.w	r3, r3, #2
 8007f72:	81a3      	strh	r3, [r4, #12]
 8007f74:	e7e2      	b.n	8007f3c <__smakebuf_r+0xc>
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f80:	81a3      	strh	r3, [r4, #12]
 8007f82:	9b01      	ldr	r3, [sp, #4]
 8007f84:	6020      	str	r0, [r4, #0]
 8007f86:	b15b      	cbz	r3, 8007fa0 <__smakebuf_r+0x70>
 8007f88:	4630      	mov	r0, r6
 8007f8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f8e:	f000 f81d 	bl	8007fcc <_isatty_r>
 8007f92:	b128      	cbz	r0, 8007fa0 <__smakebuf_r+0x70>
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	f023 0303 	bic.w	r3, r3, #3
 8007f9a:	f043 0301 	orr.w	r3, r3, #1
 8007f9e:	81a3      	strh	r3, [r4, #12]
 8007fa0:	89a3      	ldrh	r3, [r4, #12]
 8007fa2:	431d      	orrs	r5, r3
 8007fa4:	81a5      	strh	r5, [r4, #12]
 8007fa6:	e7cf      	b.n	8007f48 <__smakebuf_r+0x18>

08007fa8 <_fstat_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	2300      	movs	r3, #0
 8007fac:	4d06      	ldr	r5, [pc, #24]	@ (8007fc8 <_fstat_r+0x20>)
 8007fae:	4604      	mov	r4, r0
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	602b      	str	r3, [r5, #0]
 8007fb6:	f7fa fcbf 	bl	8002938 <_fstat>
 8007fba:	1c43      	adds	r3, r0, #1
 8007fbc:	d102      	bne.n	8007fc4 <_fstat_r+0x1c>
 8007fbe:	682b      	ldr	r3, [r5, #0]
 8007fc0:	b103      	cbz	r3, 8007fc4 <_fstat_r+0x1c>
 8007fc2:	6023      	str	r3, [r4, #0]
 8007fc4:	bd38      	pop	{r3, r4, r5, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20000a74 	.word	0x20000a74

08007fcc <_isatty_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	2300      	movs	r3, #0
 8007fd0:	4d05      	ldr	r5, [pc, #20]	@ (8007fe8 <_isatty_r+0x1c>)
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	602b      	str	r3, [r5, #0]
 8007fd8:	f7fa fcbd 	bl	8002956 <_isatty>
 8007fdc:	1c43      	adds	r3, r0, #1
 8007fde:	d102      	bne.n	8007fe6 <_isatty_r+0x1a>
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	b103      	cbz	r3, 8007fe6 <_isatty_r+0x1a>
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	20000a74 	.word	0x20000a74

08007fec <_init>:
 8007fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fee:	bf00      	nop
 8007ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ff2:	bc08      	pop	{r3}
 8007ff4:	469e      	mov	lr, r3
 8007ff6:	4770      	bx	lr

08007ff8 <_fini>:
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffa:	bf00      	nop
 8007ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffe:	bc08      	pop	{r3}
 8008000:	469e      	mov	lr, r3
 8008002:	4770      	bx	lr
